CRUD API
~~~~~~~~

.. module:: CN_crud
   :synopsis: Create, read, update, and delete operations for Coordinating Nodes

The ``CN_crud`` API implements methods that enable object management
operations on a :term:`Coordinating Node`.

.. Table:: Methods exposed by the CN_crud API.

  =================  ==========================================================
  Function           Parameters
  =================  ==========================================================
  getSystemMetadata  ``(token, guid) ->`` :class:`Types.SystemMetadata`
  get                ``(token, guid) ->`` bytes
  resolve            ``(token, guid) ->`` :class:`Types.ObjectLocationList`
  create             ``(systemMetadataGuid, systemMetadata, scienceMetadataGuid, scienceMetadata) ->`` ?
  reserveId          ``(token, [scope, format]) ->`` :class:`Types.IdentifierType`
  assertRelation     ``(token, IDofSubject, relationship, IDofObject) ->`` boolean
  =================  ==========================================================


----

.. function:: getSystemMetadata(token, guid) -> SystemMetadata

   Returns the :term:`system metadata` that contains DataONE specific
   information about the object identified by ``guid``. Note that
   authoritative copies of System Metadata are only available from the
   Coordinating Nodes.

  :param token: authentication token

  :type token: :class:`Types.AuthToken`

  :param guid: Identifier for the object of interest.

  :type guid: :class:`Types.IdentifierType`

  :returns: A system metadata document describing the object.

  :rtype: :class:`Types.SystemMetadata`

  :raises Exceptions.NotAuthorized:
    :errorCode: 401
    :detailCode: 4040

    The pricipal identified by token does not have READ permission on the object.

  :raises Exceptions.NotFound: 
    :errorCode: 404
    :detailCode: 4060

    There is no object identified by ``identifier`` and so no system metadata
    can be returned.


----

.. function:: get (token, guid) -> bytes

   Retrieves the object identified by ``guid`` from the node. If the object is
   not present on the node, then an :exc:`Exceptions.NotFound` error is raised
   (regardless of whether the object exists on another node in the DataONE
   system).

  :param token: authentication token

  :type token: :class:`Types.AuthToken`

  :param guid:
    The identifier for the science metadata or system metadata object to be
    retrieved.

  :type guid: :class:`Types.IdentifierType`

  :returns:
    For science metadata objects, this will be the exact byte stream of the
    science metadata oject as it was original ingested. Note that additional
    object types may in the future be returned by the get method.

  :rtype: bytes

  :raises Exceptions.NotAuthorized:
    :errorCode: 401
    :detailCode: 4000

  :raises Exceptions.NotFound: 
    :errorCode: 404
    :detailCode: 4020

    The object specified by the identifier is not present on this (or any) CN. The
    response body should contain a reference to :func:`CN_crud.resolve`.


----

.. function:: resolve(token, guid) -> ObjectLocationList

   Given an identifier, returns information that a client can use to retrieve
   the identified target object from the DataONE system. The target may reside
   on a MN or a CN.

    :param token: authentication token

    :type token: :class:`Types.AuthToken`

    :param guid: Identifier for the object in question

    :type guid: :class:`Types.IdentifierType`

    :returns: 
      A list of nodes known to contain copies of the target object, plus the
      URLs known to resolve to the node get methods.

    :rtype: :class:`Types.ObjectLocationList`

   :raise Exceptions.NotAuthorized:
     :errorCode: 401
     :detailCode: 4120

   :raises Exceptions.NotFound: 
     :errorCode: 404
     :detailCode: 4140

     There is no data object identified by the given GUID.

   :raises Exceptions.InvalidRequest: 
     :errorCode: 400
     :detailCode: 4160

     The GUID requested identifies a system metadata object.


----

.. function:: create(guid, systemMetadata, [scienceMetadata])

   This is a method used internally by the CN, not exposed to MNs or the
   world. Stores the two given objects (systemMetadata, scienceMetadata) in a
   single atomic action. The scienceMetadata document is optional as ``guid``
   may refer to science data which is not retrieved to the Coordinating Node.
   This method is used as part of the :term:`Member Node synchronization` of
   science metadata between a MN and the CN.

   :param guid: The identifier of the object being registered

   :type guid: :class:`Types.IdentifierType`

   :param systemMetadata:
     The system metadata generated by the Member Node (and ITK client)
     describing the object

   :type systemMetadata: :class:`Types.SystemMetadata`

   :param scienceMetadata: The science metadata identified by ``guid``

   :type scienceMetadata: bytes

   :returns: acknowledgement of success or failure

   :rtype: boolean

   :raises exceptions.UnspportedMetadataType: 
     :errorCode: 400
     :detailCode: 4100

     The science metadata is not of a type supported by the D1 system

   :raise exceptions.IdentifierNotUnique:
     :errorCode: 409
     :detailCode: 4110

     This should never be raised, but is required as a sanity check on the
     object store.


----

.. function:: reserveIdentifier(token, [scope, format]) -> identifier

   Given an optional scope and format, reserves and returns an identifier within 
   that scope and format that is unique and will not be used by any other sessions.
   Future calls to create() and update() that reference this ID must originate from
   the session in which the identifier was reserved, otherwise an error is raised on
   those methods.

    :param token: authentication token

    :type token: :class:`Types.AuthToken`

    :param scope: 
      An optional string to be used to qualify the scope of the identifer
      namespace, which is applied differently depending on the format
      requested. If scope is not supplied, a default scope will be used.

    :type scope: String
   
    :param format: 
      The optional name of the identifier format to be used, drawn from a
      DataONE-specific vocabulary of identifier format names, including
      several common syntaxes such as DOI, LSID, UUID, and LSRN, among others.
      If the format is not supplied by the caller, the CN service will use a
      default identifier format, which may change over time.

    :type format: :class:`Types.IdentifierFormatType`

    :returns: The identifier that was reserved

    :rtype: :class:`Types.IdentifierType`

    :raises Exceptions.NotAuthorized:
      :errorCode: 401
      :detailCode: 4180

      Supplied credentials do not have WRITE privileges.

    :raises Exceptions.InvalidRequest: 
      :errorCode: 400
      :detailCode: 4200

      The format requested is not a valid format accepted by this service.

    :raise exceptions.IdentifierNotUnique:
      :errorCode: 409
      :detailCode: 4210

      The requested identifier can not be reserved because it already exists
      in the DataONE system.


----

.. function:: assertRelation (token, IDofSubject, relationship, IDofObject) -> boolean

   Tests that the specified relationship between IDofSubject and IDofObject exists.

   :param token: authentication token

   :type token: :class:`Types.AuthToken`

   :param IDofSubject: The subject of the relationship being tested 

   :type IDofSubject: :class:`Types.IdentifierType`

   :param relationship: The relationship between IDofSubject and IDofObject being tested.

   :type relationship: ???

   :param IDofObject: The object of the relationship being tested.

   :type IDofObject: :class:`Types.IdentifierType`

   :raises Exceptions.NotAuthorized:
     :errorCode: 401
     :detailCode: 4220

   :raises NotFound:
     :errorCode: 404
     :detailCode: 4240

   :raises InvalidRequest:
     :errorCode: 400
     :detailCode: 4260

     Raised if the parameters are incorrect (e.g. unknown relationship type specfied)

----

.. TODO:: Clean up this cruft.

----


.. function:: batchWrite (objectsList)

.. function:: deleteRecords (token, listOfGUIDs)

.. function:: register (memberToken, ID, metadata)

.. function:: storeRecords ()

.. function:: update()


