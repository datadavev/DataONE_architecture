CRUD API
~~~~~~~~

.. module:: CN_crud
   :synopsis: Create, read, update, and delete operations for Coordinating Nodes

The ``CN_crud`` API implements methods that enable object management
operations on a :term:`Coordinating Node`.

.. Table:: Methods exposed by the CN_crud API.

  =================  ==========================================================
  Function           Parameters
  =================  ==========================================================
  getSystemMetadata  ``(token, GUID) ->`` :class:`Types.SystemMetadata`
  get                ``(token, GUID) ->`` bytes
  resolve            ``(token, GUID) ->`` :class:`Types.ObjectLocationList`
  create             ``(systemMetadataGUID, systemMetadata, scienceMetadataGUID, scienceMetadata) ->`` ?
  reserveId          ``(token, [scope, format]) ->`` :class:`Types.IdentifierType`
  assertRelation     ``(token, IDofSubject, relationship, IDofObject) ->`` boolean
  =================  ==========================================================


----

.. function:: getSystemMetadata(token, GUID) -> SystemMetadata

   Describes the science metadata or data object identified by the GUID 
   by returing the system metadata object associated with the GUID.

  :param token: authentication token

  :type token: :class:`Types.AuthToken`

  :param GUID: Identifier for the science data or science metedata object of interest.

  :type GUID: :class:`Types.IdentifierType`

  :returns: System metadata object describing the object.

  :rtype: :class:`Types.SystemMetadata`

  :raises Exceptions.NotAuthorized:
    :errorCode: 401
    :detailCode: 4040

    The provided identity does not have READ permission on the object.

  :raises Exceptions.NotFound: 
    :errorCode: 404
    :detailCode: 4060

    There is no data or science metadata identified by the given GUID.

  :raises Exceptions.InvalidRequest:
    :errorCode: 400
    :detailCode: 4080
     
    The GUID requested identifies a system metadata object.


----

.. function:: get (token, GUID) -> bytes

   Retrieves the object identified by GUID from the node. If the object is not
   present on the node, then an :exc:`Exceptions.NotFound` error is raised.

   science metedata or system metadata object identified by the
   given GUID. If the object identified by the GUID is a data object, then an
   error is raised.

  :param token: authentication token; ignored for V0.3

  :type token: :class:`Types.AuthToken`

  :param GUID:
    The identifier for the science metadata or system metadata object to be
    retrieved.

  :type GUID: :class:`Types.IdentifierType`

  :returns:
    For system metadata objects, the system metadata itself is returned. For
    science metadata objects, this will be the exact byte stream of the science
    metadata oject, as is was original ingested.

  :rtype: bytes

  :raises Exceptions.NotAuthorized:
    :errorCode: 401
    :detailCode: 4000

  :raises Exceptions.NotFound: 
    :errorCode: 404
    :detailCode: 4020

    The object specified by the GUID is a data object and is not present on
    this (or any) CN. This response could be accompanied by the results of a
    standard resolve() method call to provide more information about the
    object.


----

.. function:: resolve(token, identifier) -> ObjectLocationList

   Given an identifier, returns information that a client can use to retrieve
   the identified target object form the DataONE system. The target may reside
   on a MN or a CN. The actual content returned will be specific to the type
   of interface implemented, and is described in detail in the documentation
   for the implementation (e.g. REST implementation might differ from SOAP
   implementation).

    :param token: authentication token; ignored for V0.3

    :type token: :class:`Types.AuthToken`

    :param identifier: Identifier for the object in question

    :returns: 
      A list of nodes known to contain copies of the target object, plus the
      URLs known to resolve to the node get methods.

    :rtype: :class:`Types.ObjectLocationList`

   :raise Exceptions.NotAuthorized:
     :errorCode: 401
     :detailCode: 4120

   :raises Exceptions.NotFound: 
     :errorCode: 404
     :detailCode: 4140

     There is no data object identified by the given GUID.

   :raises Exceptions.InvalidRequest: 
     :errorCode: 400
     :detailCode: 4160

     The GUID requested identifies a system metadata object.


----

.. function:: create(systemMetadataGUID, systemMetadata,
                     scienceMetadataGUID, scienceMetadata)

   This is a method used internally by the CN, not exposed to MNs or the
   world. Stores the two given objects (systemMetadata, scienceMetadata) in a
   single atomic action. This method is used as part of the :term:`Member Node
   synchronization` of science metadata between a MN and the CN.

   .. TODO:: Should this method be protected by authorization (i.e. include an
     authorization token)?

  :param systemMetadataGUID: the GUID of the system metadata

  :param systemMetadata:
   The system metadata describing the data package (data and science metadata)

  :param scienceMetaDataGUID: the GUID of the science metadata

  :param scienceMetadata: the science metadata portion of the data package

  :returns: ?
  
  .. TODO:: Define what is returned (if anything)

  :raises exceptions.UnspportedMetadataType: 
    :errorCode: 400
    :detailCode: 4100

    The science metadata is not of a type supported by the D1 system


----

.. function:: reserveId(token, [scope, format]) -> GUID

   Given an optional scope and format, reserves and returns an identifier within 
   that scope and format that is unique and will not be used by any other sessions.
   Future calls to create() and update() that reference this ID must originate from
   the session in which the identifier was reserved, otherwise an error is raised on
   those methods.

    :param token: authentication token

    :type token: :class:`Types.AuthToken`

    :param scope: an optional string to be used to qualify the scope of the 
      identifer namespace, which is applied differently depending on the format 
      requested. If scope is not supplied, a default scope will be used.

    :type scope: 
   
    :param format: the optional name of the identifier format to be used, drawn from 
      a DataONE-specific vocabulary of identifier format names, including 
      several common syntaxes such as DOI, LSID, UUID, and LSRN, among others. If
      the format is not supplied by the caller, the CN service will use a default 
      identifier format, which may change over time.

    :type format: :class:`Types.IdentifierFormatType`

    :returns: The GUID that was reserved

    :rtype: :class:`Types.IdentifierType`

    :raises Exceptions.NotAuthorized:
      :errorCode: 401
      :detailCode: 4180

      Supplied credentials do not have WRITE privileges.

    :raises Exceptions.InvalidRequest: 
      :errorCode: 400
      :detailCode: 4200

      The format requested is not a valid format accepted by this service.

----

.. function:: assertRelation (token, IDofSubject, relationship, IDofObject) -> boolean

   Tests that the specified relationship between IDofSubject and IDofObject exists.

   :param token: authentication token

   :type token: :class:`Types.AuthToken`

   :param IDofSubject: The subject of the relationship being tested 

   :type IDofSubject: :class:`Types.IdentifierType`

   :param relationship: The relationship between IDofSubject and IDofObject being tested.

   :type relationship: ???

   :param IDofObject: The object of the relationship being tested.

   :type IDofObject: :class:`Types.IdentifierType`

   :raises Exceptions.NotAuthorized:
     :errorCode: 401
     :detailCode: 4220

   :raises NotFound:
     :errorCode: 404
     :detailCode: 4240

   :raises InvalidRequest:
     :errorCode: 400
     :detailCode: 4260

     Raised if the parameters are incorrect (e.g. unknown relationship type specfied)

----

.. TODO:: Clean up this cruft.

----


.. function:: batchWrite (objectsList)

.. function:: deleteRecords (token, listOfGUIDs)

.. function:: register (memberToken, ID, metadata)

.. function:: storeRecords ()

.. function:: update()


