REST Interface
--------------

:About: 
  This document describes the Representational State Transfer (REST) model for
  DataONE Member and Coordinating Nodes and maps the DataONE API to a RESTful
  web service.

.. contents::
   :local: 


The REST interface through which the methods described in the sections
:doc:`MN_APIs` and :doc:`CN_APIs` are called.

Overview
~~~~~~~~

- Content is modeled as collections, with :class:`GUIDs <Types.Identifier>`
  identifying individual items of a collection.

- The HTTP verbs HEAD, GET, POST, PUT, DELETE are used for retrieving
  information about content, retrieving content, creating content, updating
  content, and deleting content respectively.

- If state information is required (e.g. authentication token), it is passed
  in the HTTP headers.

- Hints to support efficient caching (e.g. content time stamps) should be
  respected. Caching is an important mechanism for achieving scalability.

- Several URL patterns listed below support parameters as key, value pairs.
  Unless otherwise indicted, the key is not case sensitive, though the case of
  the value is significant.

Collections exposed by :term:`Member Node`\s and :term:`Coordinating Node`\s
include:

:``/object``:
  The set of objects available for retrieval from the node.

:``/meta``:
  Metadata about objects available for retrieval from the node.  

:``/log``:
  Log records held on the node.

:``/reserve``:
  Identifiers that have been reserved for future use.

:``/account``:
  Principal and ownership related functionality.


.. include:: generated/generated_rest_summarytable.txt


.. note::
   GUID is used interchangeably with the term 'identifier' in this document.
   For all purposes of DataONE, a 'guid' is an identifier.


**Serialization**

The format of the response (except for responses from :func:`MN_crud.get` or
:func:`CN_crud.get`) is determined by the ``Accept:`` header provided in the
request. Acceptable content types include:

:``application/json``:
   The response structure is returned as a JSON_ encoded string. The service
   should support an additional parameter "jsonvar" which would cause the
   value of the parameter to be set as a variable name for the resulting JSON
   block (e.g. ``&jsonvar=rs1`` would cause the JSON output to be "rs1=...").

:``text/xml``:

  The response is serialized as XML.

:``application/rdf+xml``:

  The response is serialized in RDF.

:``text/csv``:

  The response is serialized as a comma delimited set of fields, with records
  delimited by a new line.

:``text/html``:

  A HTML rendering of the response.

Regardless of the format, the response is always encoded using the UTF-8
character set.

If the service is not able to provide a response in the specified format, then
the node should return an error code of :exc:`Exceptions.NotImplemented`, with
the HTTP error code set to 406.


.. _JSON: http://www.json.org/


**Parameters in Requests**

Many of the URL patterns described here accept parameters in the URL. In these
cases, the parameter name is not case sensitive, however the value of the
parameter should be preserved unless specifically indicated otherwise.

Parameter names are identical to the parameter names as described in the
corresponding method signature.

For requests that use the HTTP POST verb, all parameters are sent as part of
the request body using an appropriate format.

Requests that use HTTP PUT should include the ``id`` parameter as a URL
parameter to be consistent with the semantics of the HTTP PUT operation which
is intended to modify a specific resource.

In all cases where it is required, the ``token`` parameter will be provided in
the HTTP request header.

.. TODO:: Define the representation of the AuthToken for transfer over HTTP.


----

The Object Collection
~~~~~~~~~~~~~~~~~~~~~

The ``/object`` collection represents any object that can be identified
within the DataONE system. These can be :term:`science data`, :term:`science
metadata`, or potentially other types of objects (e.g. :term:`principal`\s,
work flows, relationships). It is anticipated that fundamental access and
manipulation of those new object formats will occur through the same
``/object`` collection interface.

The object collection is exposed by both MNs and CNs. On a MN, the object
collection is implemented by :func:`MN_replication.listObjects` and on a CN by
:func:`CN_query.search`.


.. list-table:: Response for HTTP operations on ``/object`` for different HTTP
                request verbs.
   :widths: 2 20
   :header-rows: 1

   * - Verb
     - Response
   * - HEAD
     - Returns information about the collection in the headers, including last
       modified to indicate when the collection was last updated. Note that
       the HEAD response is the same as a GET response without a body.
   * - GET
     - Return a :class:`Types.ObjectList` if called without the ``id`` 
       parameter in the URL, otherwise returns the object identified by
       the value of the ``id`` URL parameter.
   * - POST
     - Creates a new instance with the specified identifier, implementing
       :func:`MN_crud.create`. The DataONE authorization token should be
       placed in the appropriate HTTP Header field (to be determined), the
       identifier to be used, the object content, and sysmeta content are
       encoded in the request body using `MIME-multipart Mixed Media Type`_,
       where the identifier part has the name of 'id', the object part has the
       name 'object', and the sysmeta part has the name 'systemmetadata'.
       Parameter names are not case sensitive.
   * - PUT
     - Updates an existing instance identified by identifier, implementing
       :func:`MN_crud.update`. The DataONE authorization token should be
       placed in the appropriate HTTP Header field (to be determined). The 
       identifier should be provided as the ``id`` URL parameter, and the
       the object content, and sysmeta content are encoded in the request 
       body using `MIME-multipart Mixed Media Type`_,
       where the identifier part has the name 'id', the object part has the
       name 'object', and the sysmeta part has the name 'systemmetadata'. The
       obsoletedGUID parameter should be url-form-encoded in the query string
       with the name 'obsoletedGUID'.
   * - DELETE
     - Removes the specified instance from the collection, implementing
       :func:`MN_crud.delete`. The DataONE authorization token should be
       placed in the appropriate HTTP Header field (to be determined). 


.. _MIME-multipart Mixed Media Type: http://tools.ietf.org/html/rfc2046#section-5.1.3

----

.. _MN_replication.listObjects:
.. _CN_query.search:

``GET /object``
...............

List of objects that are present on the node. Default ordering is newest first.

Implemented by the methods:

- :func:`MN_replication.listObjects`

- :func:`CN_query.search`

The return value is a :class:`Types.ObjectList`


**Parameters**

Parameter names are not case sensitive. The case of values should be preserved
however, unless otherwise indicated.

:start: (optional) Zero based index of the first item to return

:count: (optional) Maximum number of items to return

:format: (optional) Restrict the response to the specified object format. 

:startTime: 
  (optional) Specifies the beginning of the time range from which to return
  object (>=). Queries against :attr:`SystemMetadata.dateSysMetadataModified`

:endTime: 
  (optional) Specifies the end of the time range to which to return object
  (<=). Queries against :attr:`SystemMetadata.dateSysMetadataModified`

.. note:: startTime <= :attr:`SystemMetadata.dateSysMetadataModified` <= endTime

:jsonvar: 
  (optional) Applicable only when the JSON response is requested. Indicates
  the variable name that will be prepended to the JSON response. For example,
  if ``jsonvar=rs1``, the JSON result would start with ``rs1=``. This enables
  the response to be embedded as a script block in a static HTML page

:orderby:
  (optional) Indicates which attribute will be used to sort the results, and
  whether the sorting should be in ascending or descending order. The value of
  the parameter must be a valid attribute name, and should be prefixed with
  ``asc_`` to indicate ascending order, or ``desc_`` to indicate descending
  order. If neither the ``asc_`` or ``desc_`` prefix is present, then the
  default should be ascending.

.. TODO:: It is not clear what is meant by "attribute" here


**Response**

:class:`Types.ObjectList` serialized according to the requested format as
indicated in the ``Accept:`` HTTP header.

The expected response when a user agent sends a GET request to a Member Node
exposing the DataONE REST API ``/object`` collection is an extract from the
total list of identifiers that the Member Node is able to provide access to
when the request was received. 

Example of a JSON response structure::

  {
    'start': <integer>,
    'count': <integer>,
    'total': <integer>,
    'objectInfo':
    [
      {
        'identifier':<IdentifierType>,
        'objectFormat':<ObjectFormatType>,
        'checksum': 
        {
          'algorithm':<checkSum Algorithm Type>, 
          'value':<SHA1 hash of object>
        },
        'dateSysMetadataModified':<DateTime>,
        'size':<integer>
      },
      ...
    ]
  }

JSON with ``jsonvar=rs1`` ::

  rs1={ ... }

and an associated html page that could utilize the JSON result::

  <html>
  <head>...
  <script type="text/javascript">
  var rs1=false;
  </script>
  <script src="http://cn1.dataone.org/cn/object?qt=solr&jsonvar=rs1&q=..."></script>
  ...
  </html>


Expressed in CSV, one entry per line, comma delimiting fields, new line
delimiting records::

  #<start>,<count>,<total>
  identifier,objectFormat,algorithm,checksum,dateSysMetadataModified,size
  "<identifier>","<object format>","<SHA-1 | SHA-224 | MD5 | ...>","<SHA1 hash of object>","<date time last modified>",<byte size of object>


Expressed in XML::

  <d1:listObjects xmlns:d1="http://dataone.org/service/types/ListObjects/0.1"
    xmlns:common="http://dataone.org/service/types/common/0.1"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    count="_integer_" 
    start="_integer_" 
    total="_integer_">
    <objectInfo>
      <identifier>_identifier_</identifier>
      <objectFormat>_object format_</objectFormat>
      <checksum algorithm='SHA-1 | SHA-224 | MD5 | ...'>_hash of object_</checksum>
      <dateSysMetadataModified>_date time last modified_</dateSysMetadataModified>
      <size>_byte size of object_</size>
    </objectInfo>
    ...
  </d1:listObjects>


Expressed in RDF/XML::

  <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
      xmlns:d1='http://ns.dataone.org/core/objects/'>
    <rdf:Description rdf:about="_requesting URL_">
      <d1:start>_integer_</d1:start>
      <d1:count>_integer_</d1:count>
      <d1:total>_integer_</d1:total>
    </rdf:Description>
    <rdf:Description rdf:about="_requesting URL_">
      <d1:objectInfo rdf:parseType="Collection">
        <rdf:Description rdf:about="http://mn1.dataone.org/object/_identifier_">
          <d1:objectFormat>_object format_</d1:objectFormat>
          <d1:checksum d1:algorithm='SHA-1 | SHA-224 | MD5 | ...'>_SHA1 hash of object</d1:checksum>
          <d1:dateSysMetadataModified>_date time last modified_</d1:dateSysMetadataModified>
          <d1:size>_byte size of object_</d1:size>
        </rdf:Description>
      </d1:objectInfo>
    </rdf:Description>
  </rdf:RDF>



**Examples**

Retrieve a list of identifiers from a Member Node in JSON format::

  curl -X GET -H "Accept: application/json" http://mn1.dataone.org/object/

  {'start':0,
   'count':1000,
   'total':159734,
   'objectInfo':[{'identifier': 'ABC123',
  	  'objectFormat':'data',
  	  'checksum': {
  	     'algorithm':'SHA-1', 
  	     'value':'b3a1617100c2b782fe5f9f2050dc714fdd05df28'
  	   },
  	  'dateSysMetadataModified':'2009-12-02T17:40:03.0Z',
  	  'size':1040032112},
  	 ...,
  	 {'identifier':'XYZ332',
  	  'objectFormat':'metadata',
  	  'checksum': {
  	     'algorithm':'SHA-1', 
  	     'value':'008b7d10f4cb282e6054146c5ee3a1ae5f4b4c07'
  	   },
  	  'dateSysMetadataModified':'2009-11-30T06:44:19.0Z',
  	  'size':1044} ] }


Retrieve a list of identifiers from a Member Node in plain text format::

  curl -X GET -H "Accept: text/csv" http://mn1.dataone.org/object/

  #0,1000,159734
  identifier,objectFormat,algorithm,checksum,dateSysMetadataModified,size
  "ABC123","data","SHA-1","b3a1617100c2b782fe5f9f2050dc714fdd05df28","2009-12-02T17:40:03.0Z",1040032112
  ...
  "XYZ332","science metadata","SHA-1","008b7d10f4cb282e6054146c5ee3a1ae5f4b4c07","2009-11-30T06:44:19.0Z",1044


Retrieve last modified information about the collection::

  curl -I http://mn1.dataone.org/object/
  
  HTTP/1.1 200 OK
  Date: Wed, 02 Dec 2009 22:48:46 GMT
  Last-Modified: Wed, 02 Dec 2009 17:40:03 GMT
  Content-Length: *
  Content-Type: application/json; charset=utf-8


Perform a search against a Coordinating Node::

  curl -X GET -H "Accept: application/json" http://cn1.dataone.org/cn/object?qt=solr&q=...

  {
   'start':0,
   'count':1000,
   'total':159734,
   'objectInfo':[
     {
      'identifier': 'ABC123',
      'objectFormat':'data',
      'checksum': 
      {
       'algorithm':'SHA-1', 
       'value':'b3a1617100c2b782fe5f9f2050dc714fdd05df28'
       },
      'dateSysMetadataModified':'2009-12-02T17:40:03.0Z',
      'size':1040032112
     },
     ...,
     {
      'identifier':'XYZ332',
      'objectFormat':'metadata',
      'checksum': 
      {
         'algorithm':'SHA-1', 
         'value':'008b7d10f4cb282e6054146c5ee3a1ae5f4b4c07'
       },
      'dateSysMetadataModified':'2009-11-30T06:44:19.0Z',
      'size':1044
     } ] 
  }

The search results are the same as the response from
:func:`MN_replication.listObjects`. At this stage, additional attributes can
not be specified in the response, though this is likely to change in the
future.

Ordering of search results is currently unspecified. A simple approach would
be to add an additional parameter ``orderby`` to the request, the value of
which would be a combination of an attribute name and and indication of
ascending or descending order.

So for example, to return the results ordered by dateSysMetadataModified, with
the oldest records first, the parameter and value of::

  orderby=asc_dateSysMetadataModified

might be specified, and similarly for newest first::

  orderby=desc_dateSysMetadataModified


----

.. _MN_crud.get:
.. _CN_crud.get:

``GET /object/<guid>``
......................

Operates on individual items of the ``/object`` collection identified by the
identifier ``<guid>``. This URL pattern is implemented by Member and
Coordinating Nodes.

Implemented by the methods:

- :func:`MN_crud.get`

- :func:`CN_crud.get`

Returns the bytes of the specified object.

.. TODO:: How to specify the mime-type of HTTP response stream?

**Examples**

(GET) Retrieve the object with identifier "XYZ332"::

  curl http://m1.dataone.org/object/XYZ332
  
  ... data ...

(GET) Attempt to retrieve a non-existent object (and show headers in response)::

  curl -D - http://m1.dataone.org/object/XYZ33255

  HTTP/1.1 404 Not Found
  Content-Type: 
  Date: Wed, 16 Dec 2009 13:58:34 GMT
  Content-Length: 355


  <html>
    <head>
      <meta http-equiv="content-type" content="text/html;charset=utf-8">
      <title>Error: 404 Not Found (1020)</title>
    </head>
    <body>
      <p>
        <dl>
          <dt>Code</dt>
          <dd class="errorCode">404</dd>
          <dt>Detail Code</dt>
          <dd class="detailCode">1020</dd>
        </dl>
      </p>
      <p class="description">The specificed object does not exist on this node.</p>
      <dl class="traceInformation">
        <dt>identifier</dt>
        <dd>123XYZ</dd>
        <dt>method</dt>
        <dd>mn.get</dd>
        <dt>hint</dt>
        <dd>Please try <a href='http://cn.dataone.org/cn/resolve/123XYZ'> resolving</a>
            at a <a href='http://dataone.org'>DataONE</a> Coordinating Node.</dd>
      </dl>
    </body>
  </html>


----

.. _MN_crud.describe:

``HEAD /object/<guid>``
.......................

Implemented by the methods:

- :func:`MN_crud.describe`

returns :class:`Types.DescribeResponse`

**Examples**

(HEAD) Retrieve information about the object with identifier "ABC123"::

  curl -I http://mn1.dataone.org/object?id=ABC123

  HTTP/1.1 200 OK
  Date: Wed, 16 Dec 2009 13:58:34 GMT
  Content-Length: 1040032112
  Content-Type: application/octet-stream

----

.. _MN_crud.create:

``POST /object``
................

Implemented by the methods:

- :func:`MN_crud.create`

Returns :class:`Types.Identifier`

**Examples**

(POST) Create a new object with a given identifier (``XYZ33256``)::

  curl -H "AuthToken: UR45W21A1S19ZE3CC9" \
       -F "file=@datafile.csv;name=object" \
       -F "file=@sysmeta.xml;name=systemmetdata" \
       -d "id=XYZ33256"
       http://m1.dataone.org/object
  
  HTTP/1.1 200 Success
  Content-Type: 
  Date: Wed, 16 Dec 2009 13:58:34 GMT
  Content-Length: 355
  
  XYZ33256


----

.. _MN_crud.update:

``PUT /object/<guid>``
......................

Implemented by the methods:

- :func:`MN_crud.update`

Returns :class:`Types.Identifier`

----

.. _MN_crud.delete:

``DELETE /object/<guid>``
.........................

Implemented by the methods:

- :func:`MN_crud.delete`

Returns :class:`Types.Identifier`

----

.. _MN_crud.getSystemMetadata:
.. _CN_crud.getSystemMetadata:

``GET /meta/<guid>``
...........................

Requests the :class:`Types.SystemMetadata` for the specified object. Although
this access point is supported by both Member and Coordinating Nodes, only the
responses from Coordinating Nodes should be considered authoritative,
especially with respect to the :attr:`SystemMetadata.replica` entries.

The ``/meta`` response format defaults to ``text/xml`` and is the only
format currently supported. Other formats such as JSON may be supported in the
future.


Implemented by the methods:

- :func:`MN_crud.getSystemMetadata`

- :func:`CN_crud.getSystemMetadata`

Returns :class:`Types.SystemMetadata`


**Examples**

(GET) Retrieve system metadata from a Member Node for object "XYZ332" which
happens to be science metadata (an EML document) that describes dataset
identified by "XYZ333"::

  curl http://m1.dataone.org/meta/XYZ332

  <?xml version="1.0" encoding="UTF-8"?>
  <d1:systemMetadata xmlns:d1="http://dataone.org/coordinating_node_sysmeta_0.1"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://dataone.org/coordinating_node_sysmeta_0.1 https://repository.dataone.org/software/cicore/trunk/schemas/coordinating_node_sysmeta.xsd">
      <!-- This instance document was auto generated by oXygen XML for testing purposes.
           It contains no useful information.
      -->
      <identifier>Identifier0</identifier>
      <objectFormat>eml://ecoinformatics.org/eml-2.0.1</objectFormat>
      <size>0</size>
      <submitter>uid=jones,o=NCEAS,dc=ecoinformatics,dc=org</submitter>
      <rightsHolder>uid=jones,o=NCEAS,dc=ecoinformatics,dc=org</rightsHolder>
      <describes>XYZ333</describes>
      <checksum algorithm="SHA-1">2e01e17467891f7c933dbaa00e1459d23db3fe4f</checksum>
      <embargoExpires>2006-05-04T18:13:51.0Z</embargoExpires>
      <accessRule rule="allow" service="read" principal="Principal0"/>
      <accessRule rule="allow" service="read" principal="Principal1"/>
      <replicationPolicy replicationAllowed="true" numberReplicas="2">
          <preferredMemberNode>MemberNode12</preferredMemberNode>
          <preferredMemberNode>MemberNode13</preferredMemberNode>
          <blockedMemberNode>MemberNode6</blockedMemberNode>
          <blockedMemberNode>MemberNode7</blockedMemberNode>
      </replicationPolicy>
      <dateUploaded>2006-05-04T18:13:51.0Z</dateUploaded>
      <dateSysMetadataModified>2009-05-04T18:13:51.0Z</dateSysMetadataModified>
      <originMemberNode>mn1.dataone.org/</originMemberNode>
      <authoritativeMemberNode>mn1.dataone.org/</authoritativeMemberNode>
  </d1:systemMetadata>


(GET) Attempt to retrieve system metadata for an object that does not exist.::

  curl http://cn.dataone.org/cn/meta/SomeObjectID

  <error errorCode='404' detailCode='4060'>
    <description>The specified object does not exist on this node.</description>
    <traceInformation>
      <value key='identifier'>SomeObjectID</value>
      <value key='method'>cn.getSystemMetadat</value>
      <value key='hint'>http://cn.dataone.org/cn/resolve/SomeObjectID</value>
    </traceInformation>
  </error>


----


``HEAD /meta/<guid>``
.....................

HEAD     Returns basic information about the system metadata object.

         ``Last-Modified:`` Date collection was last modified.

         ``Content-Type:`` The MIME type of the object

         ``Content-Length:`` Byte size of the object


----

.. _CN_crud.resolve:

``GET /resolve/<guid>``
.......................

Implemented by CNs (possibly MNs by proxy to CN), returns the nodes known to
hold copies of the object identified by ``<guid>``.

Implemented by the following methods:

- :func:`CN_crud.resolve` (``GET /object/resolve/<guid>``)

Returns :class:`Types.ObjectLocationList`


**Response**

The representation of the response varies according to content type negotiation and should contain:

.. productionlist::
   RESPONSE           : IdentifierListType | Exception
   IdentifierListType : `identifier` + n*[NODE, FULL_URL]
   NODE               : node service base url
   FULL_URL           : full url for get object on the node
   Exception          : NotFound | NotAuthorized


The following representations show different encodings for the example
identifier '1234' that is located on the following nodes:

============================ =================================================
Node Identifier              GET Object URL
============================ =================================================
mn1.dataone.org/mn           ``http://mn1.dataone.org/mn/object/1234``
mn2.dataone.org/some_base/mn ``http://mn2.dataone.org/some_base/mn/object/1234``
cn.dataone.org/cn            ``http://cn.dataone.org/object/1234``
============================ =================================================


CSV representation::

  #1234
  node,url
  'mn1.dataone.org/mn','http://mn1.dataone.org/mn/object/1234'
  'mn2.dataone.org/some_base/mn','http://mn2.dataone.org/some_base/mn/object/1234'
  'cn.dataone.org/cn','http://cn.dataone.org/cn/object/1234'


JSON representation::

   {
    'identifier':'1234',
    'locations': [ 
      ['mn1.dataone.org/mn', 'http://mn1.dataone.org/mn/object/1234'],
      ['mn2.dataone.org/some_base/mn', 'http://mn2.dataone.org/some_base/mn/object/1234'], 
      ['cn.dataone.org/cn', 'http://cn.dataone.org/cn/object/1234'] ]
   }


XML representation::

  <locations identifier='1234'>
    <location node='mn1.dataone.org/mn' href='http://mn1.dataone.org/mn/object/1234' />
    <location node='mn2.dataone.org/some_base/mn' href='http://mn1.dataone.org/some_base/mn/object/1234' />
    <location node='cn.dataone.org/cn' href='http://cn.dataone.org/cn/object/1234' />
  </locations>


HTML::

  ...
  <ol identifier='1234'>
    <a href='http://mn1.dataone.org/mn/object/1234'>mn1.dataone.org/mn</a>
    <a href='http://mn2.dataone.org/some_base/mn/object/1234'>mn1.dataone.org/some_base/mn</a>
    <a href='http://cn.dataone.org/cn/object/1234'>cn.dataone.org/cn</a>
  </ol>
  ...


**Examples**

Using CURL::

  curl -X GET -H "Accept: text/csv" http://cn.dataone.org/object/resolve/1234

  #1234
  node,url
  'mn1.dataone.org/mn','http://mn1.dataone.org/mn/object/1234'
  'mn2.dataone.org/some_base/mn','http://mn2.dataone.org/some_base/mn/object/1234'
  'cn.dataone.org/cn','http://cn.dataone.org/cn/object/1234'

----

``HEAD /resolve/<guid>``
........................

HEAD     Returns basic information resolve response document

         ``Last-Modified:`` Date the resolve information was last updated for that
         identifier.  This is helpful to clients that may cache resolve responses.



----

.. _MN_crud.getChecksum:

``GET /checksum/<guid>``
........................

Implemented by the methods:

-:func:`MN_crud.getChecksum`

Returns :class:`Types.Checksum`

----

.. _MN_authorization.isAuthorized:
.. _CN_authorization.isAuthorized:

``GET /isAuthorized/<guid>``
............................

Implemented by the methods:

- :func:`MN_authorization.isAuthorized` 
- :func:`CN_authorization.isAuthorized`

Returns a boolean result.  "1" = true, "0" = false.

----

.. _CN_crud.assertRelation:

``GET /assertRelation/<idOfSubject>``
.....................................

Implemented by the methods:

- :func:`CN_crud.assertRelation`

Returns a boolean result. "1" = true, "0" = false.

----


``GET /accessRules/<guid>``
...........................

pass


----

.. _CN_authorization.setAccess:

``PUT /accessRules/<guid>``
............................

Implemented by the methods:

- :func:`CN_authorization.setAccess`

Returns a boolean result. "1" = true, "0" = false.

----

``GET /owner/<guid>``
.....................

pass


----

.. _CN_authentication.setOwner:

``PUT /owner/<guid>``
.....................

Implemented by the methods:

- :func:`CN_authentication.setOwner`

Returns :class:`Types.Identifier`

----

Reserve Collection
~~~~~~~~~~~~~~~~~~


.. _CN_crud.listReservedIdentifiers:

``GET /reserve``
................

Implemented by the methods:

- :func:`CN_crud.listReservedIdentifiers` (``GET /reserve``)

Returns ???

.. TODO:: Discuss and flesh these out.

----

.. _CN_crud.reserveIdentifier:

``POST /reserve``
.................

Implemented by the methods:

- :func:`CN_crud.reserveIdentifier` (``POST /reserve``)

Returns :class:`Types.Identifier`

----


.. _CN_crud.deleteReservedIdentifier:

``DELETE /reserve/<guid>``
..........................

Implemented by the methods:

- :func:`CN_crud.deleteReservedIdentifier` (``DELETE /reserve?guid=<guid>``)

Returns :class:`Types.Identifier`

----


Log Collection
~~~~~~~~~~~~~~

The ``/log`` collection provide access to the record of object access events
as recorded by Member and Coordinating Nodes.


.. _MN_crud.getLogRecords:
.. _CN_query.getLogRecords:

``GET /log``
.............

List of access records for all objects that are present on the node, ordered
with most recent entries first.

Access to logs should support restriction by time range, principal, event
type, and identifier.

Implemented by the methods:

- :func:`MN_crud.getLogRecords`

- :func:`CN_query.getLogRecords`

Returns ???


**Optional Parameters**

The ``/log`` collection supports the same optional parameters as the
``/object`` collection.



Account Collection
~~~~~~~~~~~~~~~~~~

.. _CN_authentication.newAccount:

``POST /account``
.................

Implemented by the methods:

- :func:`CN_authentication.newAccount`

Returns ???

----

.. _CN_authentication.login:

``POST /account/login``
.......................

Implemented by the methods:

- :func:`CN_authentication.login`

Returns :class:`Types.AuthToken`

-----

``GET /account/logout``
.......................

Implemented by the methods:

- ???

Returns ???


-----


.. _CN_authentication.verifyToken:

``GET /account/verifyToken``
............................

Implemented by the methods:

- :func:`CN_authentication.verifyToken`

Returns a boolean result. "1" = true, "0" = false.

----


Nodes Collection
~~~~~~~~~~~~~~~~

``GET /node``
.............

Implemented by the methods:

- :func:`CN_register.listNodes`

Returns a list of nodes that have been registered with the DataONE infrastructure.


``PUT /node/<id>``
..................

Implemented by the methods:

- :func:`CN_register.addNodeCapabilities`

TODO


``POST /node``
..............

Implemented by the methods:

- :func:`CN_register.register`

TODO


Monitor Collection
~~~~~~~~~~~~~~~~~~

The ``/monitor`` collection represents various performance and utilization
metrics of Member Nodes. It is exposed by Member Nodes.


``GET /monitor``
.......................

Returns the number of object related events that have occured.

Implemented by the methods:

- :func:`MN_monitor.listObjects`.

Returns :class:`Types.MonitorList`


**Parameters**

:day: (optional) Flag that causes the number of object related events to be
  reported for each day in which one or more events occurred. Without this flag,
  the number of events is cumulative.

:time: (optional) (range operators supported) Filter on date-time ranges.
  Date-times must be ISO8601 compatible.

:ip_address: (optional) (wildcards supported) Filter on IP address.

:operationtype: (optional) (wildcards supported) Filter on operation type.

:format: (optional) (wildcards supported) Filter on objectFormat.


**Response**

:class:`Types.MonitorList`.

The response format defaults to text/xml and is the only format currently
supported. Other formats such as JSON may be supported in the future.


**Examples**

Retrieve a cumulative count of all object related events on MN::

  curl -X GET -H "Accept: text/xml" http://mn1.dataone.org/monitor

  <?xml version="1.0" ?>
  <ns1:monitorObject xmlns:ns1="http://dataone.org/service/types/monitorObject/0.1">
    <monitorObjectEntry>
      <date>2010-07-23</date>
      <count>100</count>
    </monitorObjectEntry>
  </ns1:monitorObject>

Retrieve a count of object related events for all objects based on EML for each
day in 1980 (arguments are on separate lines for readability)::

  curl -X GET -H "Accept: text/xml" http://mn1.dataone.org
    /monitor
    ?day
    &time_ge=1980-01-01
    &time_lt=1981-01-01
    &format=eml:*
  
  <?xml version="1.0" ?>
  <ns1:monitorList xmlns:ns1="http://dataone.org/service/types/monitorObject/0.1">
    <monitorInfo>
      <date>1980-01-19</date>
      <count>1</count>
    </monitorInfo>
    <monitorInfo>
      <date>1980-02-08</date>
      <count>1</count>
    </monitorInfo>
    <monitorInfo>
      <date>1980-03-22</date>
      <count>1</count>
    </monitorInfo>
    <monitorInfo>
      <date>1980-04-20</date>
      <count>1</count>
    </monitorInfo>
    <monitorInfo>
      <date>1980-05-06</date>
      <count>1</count>
    </monitorInfo>
    <monitorInfo>
      <date>1980-08-29</date>
      <count>1</count>
    </monitorInfo>
  </ns1:monitorList>



Wildcards and Range Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Several of the REST calls support filtering using wildcards and/or range
operators. When such filtering is supported, it is explicitly noted in the
documentation for a given REST call.

The basic approach is the use of name/value pairs (NVPs) in the URL to construct
a filter for restricting results to a portion of a data set. All NVPs are
combined using the AND operator.

Wildcards are typically supported for string values and allow substring
filters to be specified by including one or more of the following wildcard
characters in the string.

:\*: Match a string of zero or more random characters
:\?: Match a single random character

Range operators are typically supported for values that represent a continuous
series, such as byte sizes and datetimes. A range operator is specified by
appending it to a name. Valid range operators are:

======= ===========================
Suffix  Range Operator
======= ===========================
None    Equals (==) (default)
_eq     Equals (==)
_lt     Less than (<)
_le     Less than or equals (<=)
_gt     Greater than (>)
_ge     Greater than or equals (>=)
======= ===========================

Wildcards and range operators cannot be combined in a single NVP.

**Examples**

Return only objects of type data that have been modified since 6AM on the first
of January, 2010 UTC::

  ../object/
  ?qt=nvp
  &oclass=data
  &lastModified_gt=2010-01-01T06:00:00Z

Return only objects of type system metadata that were last modified in 2005::

  ../object/
  ?qt=nvp
  &oclass=metadata
  &lastModified_ge=2005-01-01-T00:00:00Z
  &lastModified_lt=2006-01-01-T00:00:00Z

Return only objects of type data or metadata (filter out system metadata)::

  ../object/
  ?qt=nvp
  &oclass=*data

