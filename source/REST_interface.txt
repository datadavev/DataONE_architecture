REST Interface
--------------

:status: DRAFT.  MN portion outlined, CN portion still to do.

:author: Dave V.

:About: 
  This document proposes a Representational State Transfer (REST) model for
  DataONE Member Nodes and maps the v0.3 API methods to HTTP REST calls.

.. contents::
   :local: 


The REST interface through which the methods described in the sections
:doc:`MN_APIs` and :doc:`CN_APIs`.

Basic information:

- Content is modeled as collections, with GUIDs identifying individual items
  of a collection.

- The HTTP verbs HEAD, GET, POST, PUT, DELETE are used for retrieving
  information about content, retrieving content, creating content, updating
  content, and deleting content respectively.

- If state information is required (e.g. authentication token), it is passed
  in the HTTP headers.

- Cache information should be respected. Caching is an important mechanism for
  achieving scalability 

- Several URL patterns listed below support parameters. These should be
  interpreted without regard to case (i.e. case insensitive).

Collections exposed by :term:`Member Node`\s and :term:`Coordinating Node`\s include:

:``/object/``:
  The set of objects available for retrieval from the node.

:``/log/``:
  Log records held on the node.

:``/reserve/``:
  Identifiers that have been reserved for future use.


An overview of mapping API methods to URLs in the REST interface. 

======= ================================================== =========== ========================================
Version API Method                                         Method      URL
======= ================================================== =========== ========================================
.       MN Operations
0.3     :func:`MN_crud.getLogRecords`                       ``GET``     ``/log/``
0.3     :func:`MN_replication.listObjects`                  ``GET``     `/object/`_
0.3     :func:`MN_crud.get`                                 ``GET``     `/object/<guid>/`_
0.4     :func:`MN_crud.create`                              ``POST``    `/object/<guid>/`_
0.4     :func:`MN_crud.update`                              ``PUT``     `/object/<guid>/`_
0.9     :func:`MN_crud.delete`                              ``DELETE``  `/object/<guid>/`_
0.3     :func:`MN_crud.getSystemMetadata`                   ``GET``     `/object/<guid>/meta/`_
0.3     :func:`MN_replication.synchronizationComplete`      ``PUT``     ``/object/<guid>/meta/``
0.3     :func:`MN_replication.synchronizationFailed`        ``PUT``     ``/object/<guid>/meta/``
0.4     :func:`MN_capabilities.getCapabilities`
0.4     :func:`MN_health.getStatus`
0.6     synchronize
0.7     :func:`MN_authorization.login`
0.7     :func:`MN_authorization.authorize`
0.8     :func:`MN_authorization.isAuthorized`
.
.       CN Operations
0.3     :func:`CN_query.getLogRecords`                      ``GET``     ``/log/``
0.3     :func:`CN_health.generateReport`                    ``GET``     ``/log/report``
0.3     :func:`CN_query.search`                             ``GET``     `/object/`_
0.3     :func:`CN_crud.get`                                 ``GET``     `/object/<guid>/`_ 
0.3     :func:`CN_crud.getSystemMetadata`                   ``GET``     `/object/<guid>/meta/`_
0.3     :func:`CN_crud.resolve`                             ``GET``     `/object/<guid>/resolve/`_
0.4     UNDEF - `CN_crud.listReservedIdentifiers`           ``GET``     `/reserve/`_
0.4     :func:`CN_crud.reserveIdentifier`                   ``POST``    `/reserve/<guid>/`_
0.4     UNDEF :func:`CN_crud.deleteReservedIdentifier`      ``DELETE``  `/reserve/<guid>/`_
0.4     :func:`CN_query.query`
0.4     :func:`CN_register.register`
0.4     :func:`CN_crud.create`
0.6     synchronizationComplete
0.6     beginTransaction
0.6     commitTransaction
0.6     rollbackTransaction
0.7     :func:`CN_authorization.login`
0.7     :func:`CN_authorization.authorize`
0.8     :func:`CN_authorization.isAuthorized`
======= ================================================== =========== ========================================

.. note:: 
   Previous versions of this document referred to a ``/meta/`` collection. This
   has been removed as it is redundant and can be emulated by
   ``/object/?oclass=sysmeta`` for the collection, and ``/object/123/meta`` for
   the sysmeta for a specific object.

.. note::
   GUID is used interchangeably with the term 'identifier' in this document. For all purposes of DataONE, a 'guid' is an identifier.


Object Collection
~~~~~~~~~~~~~~~~~

The ``/object/`` collection represents any object that can be identified
within the DataONE system. These can be :term:`science data`, :term:`science
metadata`, or potentially other types of objects (e.g. :term:`principal`\s,
work flows, relationships). It is anticipated that fundamental access and
manipulation of those new object classes will occur through the same
``/object/`` collection interface.

The object collection is exposed by both MNs and CNs.


``/object/``
^^^^^^^^^^^^

List of objects that are present on the node, ordered with newest first.

Implements the functions:

- :func:`MN_replication.listObjects`

- Possibly :func:`CN_query.search` if appropriate parameters are specified


**Optional Parameters**

:start: Zero based index of the first item to return

:count: Maximum number of items to return

:objectFormat: Restrict the response to the specified object class. 

:startTime: 
  Specifies the beginning of the time range from which to return object (>=).
  Queries against :attr:`SystemMetadata.dateSysMetadataModified`

:endTime: 
  Specifies the end of the time range to which to return object (<=). Queries
  against :attr:`SystemMetadata.dateSysMetadataModified`

.. note:: startTime <= :attr:`SystemMetadata.dateSysMetadataModified` <= endTime


**Response**

The expected response when a user agent sends a GET request to a Member Node
exposing the DataONE REST API ``/object/`` collection is an extract from the
total list of identifiers that the Member Node is able to provide access to
when the request was received. 

The format of the response is determined by the ``Accept:`` HTTP header
provided by the client, and may be one of: ``application/json`` (default),
``text/csv``, ``text/xml``, ``application/rdf+xml``. Regardless of the format,
the response is always encoded using the UTF-8 character set.

If the requested format is not available, then the node should return an error
code (:exc:`Exceptions.NotImplemented`, with errorCode set to 406).

The structure of the response is::

  RESPONSE      = RESPONSE_INFO + RESPONSE_BODY
  RESPONSE_INFO = START + COUNT + TOTAL
    START       = integer, zero based index of first item
    COUNT       = integer, number of items in response
    TOTAL       = integer, total number of items in collection
  RESPONSE_BODY = n*(guid + GUID_INFO)
    guid        = object identifier, string
  GUID_INFO     = OBJECT_CLASS + HASH + TIME_STAMP + SIZE
  OBJECT_CLASS  = 'data' | 'metadata' 
  HASH          = SHA-1 | SHA-224 | MD5 hash
  HASH_TYPE	= algorithm type
  TIME_STAMP    = ISO8601 formatted date time, GMT, YYYY-MM-DDTHH:mm:SS.FFFZ
    YYYY        = Year
    MM          = Month
    DD          = Day
    HH          = Hour
    mm          = Minute
    SS          = Second
    FFF         = Fraction of second
  SIZE = Byte size of object


Expressed in JSON::

  {
    'start': <integer>,
    'count': <integer>,
    'total': <integer>,
    'objectInfo':
    [
      {
        'identifier':<IdentifierType>,
        'objectFormat':<ObjectFormatType>,
        'checksum': 
        {
          'algorithm':<checkSum Algorithm Type>, 
          'value':<SHA1 hash of object>
        },
        'dateSysMedatadataModified':<DateTime>,
        'size':<integer>
      },
      ...
    ]
  }

Expressed in CSV, one entry per line, comma delimiting fields, new line
delimiting records::

  #<start>,<count>,<total>
  identifier,objectFormat,algorithm,checksum,dateSysMedatadataModified,size
  "<identifier>","<object class>","<SHA-1 | SHA-224 | MD5 | ...>","<SHA1 hash of object>","<date time last modified>",<byte size of object>


Expressed in XML::

  <ObjectList xmlns='http://ns.dataone.org/core/objects'
            start='_integer_'
            count='_integer_'
            total='_integer_'>
    <objectInfo identifier='_identifier_'>
      <objectFormat>_object class_</objectFormat>
      <checksum algorithm='SHA-1 | SHA-224 | MD5 | ...'>_hash of object_</checksum>
      <dateSysMedatadataModified>_date time last modified_</dateSysMedatadataModified>
      <size>_byte size of object_</size>
    </objectInfo>
    ...
  </ObjectList>


Expressed in RDF/XML::

  <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
      xmlns:d1='http://ns.dataone.org/core/objects/'>
    <rdf:Description rdf:about="_requesting URL_">
      <d1:start>_integer_</d1:start>
      <d1:count>_integer_</d1:count>
      <d1:total>_integer_</d1:total>
    </rdf:Description>
    <rdf:Description rdf:about="_requesting URL_">
      <d1:objectInfo rdf:parseType="Collection">
        <rdf:Description rdf:about="http://mn1.dataone.org/object/_identifier_">
          <d1:objectFormat>_object class_</d1:objectFormat>
          <d1:checksum d1:algorithm='SHA-1 | SHA-224 | MD5 | ...'>_SHA1 hash of object</d1:checksum>
          <d1:dateSysMedatadataModified>_date time last modified_</d1:dateSysMedatadataModified>
          <d1:size>_byte size of object_</d1:size>
        </rdf:Description>
      </d1:objectInfo>
    </rdf:Description>
  </rdf:RDF>


.. table:: 
  Response for HTTP operations on ``/object/`` for different HTTP request verbs

  ======= ===========================================================================
  Verb    Response
  ======= ===========================================================================
  HEAD    Returns information about the collection in the headers, including last 
          modified to indicate when the collection was last updated.  Note that the 
          HEAD response is the same as a GET response without a body.

  GET     List of GUIDs, expressed in JSON, CSV, xml, or RDF/xml. The
          response is encoded using the encoding type specified in the client
          ``Accept:`` header parameter which can be one of
          ``application/json``, ``text/csv``, ``text/xml``, or
          ``application/rdf+xml``.  Default is JSON.

  POST    No operation

  PUT     No operation

  DELETE  No operation
  ======= ===========================================================================


**Examples**

Retrieve a list of identifiers from a member node in JSON format::

  curl -X GET -H "Accept: application/json" http://mn1.dataone.org/object/

  {'start':0,
   'count':1000,
   'total':159734,
   'objectInfo':[{'identifier': 'ABC123',
  	  'objectFormat':'data',
  	  'checksum': {
  	     'algorithm':'SHA-1', 
  	     'value':'b3a1617100c2b782fe5f9f2050dc714fdd05df28'
  	   },
  	  'dateSysMetadataModified':'2009-12-02T17:40:03.0Z',
  	  'size':1040032112},
  	 ...,
  	 {'identifier':'XYZ332',
  	  'objectFormat':'metadata',
  	  'checksum': {
  	     'algorithm':'SHA-1', 
  	     'value':'008b7d10f4cb282e6054146c5ee3a1ae5f4b4c07'
  	   },
  	  'dateSysMetadataModified':'2009-11-30T06:44:19.0Z',
  	  'size':1044} ] }


Retrieve a list of identifiers from a member node in plain text format::

  curl -X GET -H "Accept: text/csv" http://mn1.dataone.org/object/

  #0,1000,159734
  identifier,objectFormat,algorithm,checksum, dateSysMedatadataModified,size
  "ABC123","data","SHA-1","b3a1617100c2b782fe5f9f2050dc714fdd05df28","2009-12-02T17:40:03.0Z",1040032112
  ...
  "XYZ332","science metadata","SHA-1","008b7d10f4cb282e6054146c5ee3a1ae5f4b4c07","2009-11-30T06:44:19.0Z",1044


Retrieve last modified information about the collection::

  curl -I http://mn1.dataone.org/object/
  
  HTTP/1.1 200 OK
  Date: Wed, 02 Dec 2009 22:48:46 GMT
  Last-Modified: Wed, 02 Dec 2009 17:40:03 GMT
  Content-Length: *
  Content-Type: application/json; charset=utf-8


----


``/object/<guid>/``
^^^^^^^^^^^^^^^^^^^

Operates on individual items of the ``/object/`` collection identified by an
identifier.  This URL pattern is implemented by Member and Coordinating Nodes.

Implemented by the methods:

- :func:`MN_crud.get`

- :func:`MN_crud.create`

- :func:`MN_crud.update`

- :func:`MN_crud.delete`

- :func:`CN_crud.get`


.. table:: 
  Response to HTTP requests against ``/object/<guid>/`` for different verbs.
  GET and HEAD operations are permitted from any origin. POST, PUT, and HEAD
  operations are only permitted from Coordinating Nodes.

  ====== ===========================================================================
  Verb   Response
  ====== ===========================================================================
  HEAD   Returns basic information about the object.
  
         ``Last-Modified:`` Date object was last modified.
  
         ``Content-Type:`` The MIME type of the object
  
         ``Content-Length:`` Byte size of the object

  GET    Returns the bytes of the object, implementing :func:`MN_crud.get` and
         :func:`CN_crud.get`

  POST   Creates a new instance with the specified GUID, implementing 
         :func:`MN_crud.create`. The DataONE authorization token should be placed 
         in the appropriate HTTP Header field (to be determined), the GUID to be 
         used is in the request URI, and the object content and sysmeta content are
         encoded in the request body using `MIME-multipart Mixed Media Type
         <http://tools.ietf.org/html/rfc2046#section-5.1.3>`_, where the 
         object part has the name 'object', and the sysmeta part has the name 
         'systemmetadata'.  Parameter names are not case sensitive.

  PUT    Updates an existing instance identified by GUID, implementing 
         :func:`MN_crud.update`.  The DataONE authorization token should be placed 
         in the appropriate HTTP Header field (to be determined), the GUID to be 
         used is in the request URI, and the object content and sysmeta content are
         encoded in the request body using `MIME-multipart Mixed Media Type
         <http://tools.ietf.org/html/rfc2046#section-5.1.3>`_, where the 
         object part has the name 'object', and the sysmeta part has the name 
         'system_metadata'.  The obsoletedGUID parameter should be url-form-encoded 
         in the query string with the name 'obsoletedGUID'.

  DELETE Removes the specified instance from the collection, implementing
         :func:`MN_crud.delete`. The DataONE authorization token should be placed
         in the appropriate HTTP Header field (to be determined).
  ====== ===========================================================================


**Examples**


(HEAD) Retrieve information about the object with identifier "ABC123"::

  curl -I http://mn1.dataone.org/object/ABC123/

  HTTP/1.1 200 OK
  Date: Wed, 16 Dec 2009 13:58:34 GMT
  Content-Length: 1040032112
  Content-Type: application/octet-stream

(GET) Retrieve the object with identifier "XYZ332"::

  curl http://m1.dataone.org/object/XYZ332/
  
  ... data ...


(GET) Attempt to retrieve a non-existent object (and show headers in response)::

  curl -D - http://m1.dataone.org/object/XYZ33255/
  
  HTTP/1.1 404 Not Found
  Content-Type: 
  Date: Wed, 16 Dec 2009 13:58:34 GMT
  Content-Length: 355
  
  
  <html>
    <head>
      <meta http-equiv="content-type" content="text/html;charset=utf-8">
      <title>Error: 404 Not Found (1020)</title>
    </head>
    <body>
      <p>
        <dl>
          <dt>Code</dt>
          <dd class="errorCode">404</dd>
          <dt>Detail Code</dt>
          <dd class="detailCode">1020</dd>
        </dl>
      </p>
      <p class="description">The specificed object does not exist on this node.</p>
      <dl class="traceInformation">
        <dt>identifier</dt>
        <dd>123XYZ</dd>
        <dt>method</dt>
        <dd>mn.get</dd>
        <dt>hint</dt>
        <dd>Please try <a href='http://cn.dataone.org/cn/resolve/123XYZ'> resolving</a>
            at a <a href='http://dataone.org'>DataONE</a> coordinating node.</dd>
      </dl>
    </body>
  </html>


(POST) Create a new object with a given identifier::

  curl -H "AuthToken: UR45W21A1S19ZE3CC9" \
       -F "file=@datafile.csv;name=object" \
       -F "file=@sysmeta.xml;name=systemmetdata" \
       http://m1.dataone.org/object/XYZ33256/
  
  HTTP/1.1 200 Success
  Content-Type: 
  Date: Wed, 16 Dec 2009 13:58:34 GMT
  Content-Length: 355
  
  XYZ33256


----


``/object/<guid>/meta/``
^^^^^^^^^^^^^^^^^^^^^^^^

Requests the :class:`Types.SystemMetadata` for the specified object. Although
this access point is supported by both Member and Coordinating Nodes, only the
responses from Coordinating Nodes should be considered authoritative,
especially with respect to the :attr:`SystemMetadata.replica` entries.

The ``/object/<guid>/meta`` response format defaults to ``text/xml`` and is
the only format currently supported. Other formats such as JSON may be
supported in the future.


Implemented by the methods:

- :func:`MN_crud.getSystemMetadata` (``GET /object/<guid>/meta/``)

- :func:`CN_crud.getSystemMetadata` (``GET /object/<guid>/meta/``)


.. table:: 
  Responses to HTTP requests against ``/object/<guid>/meta/`` for different
  verbs.

  ======== ===========================================================================
  Verb     Response
  ======== ===========================================================================
  HEAD     Returns basic information about the system metadata object.
  
           ``Last-Modified:`` Date collection was last modified.
  
           ``Content-Type:`` The MIME type of the object
  
           ``Content-Length:`` Byte size of the object

  GET      Returns the bytes of the system metadata object.

  POST     No Operation

  PUT      No Operation

  DELETE   No Operation
  ======== ===========================================================================


**Examples**

(GET) Retrieve system metadata from a Member Node for object "XYZ332" which
happens to be science metadata (an EML document) that describes dataset
identified by "XYZ333"

::

  curl http://m1.dataone.org/object/XYZ332/

  <?xml version="1.0" encoding="UTF-8"?>
  <d1:systemMetadata xmlns:d1="http://dataone.org/coordinating_node_sysmeta_0.1"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://dataone.org/coordinating_node_sysmeta_0.1 https://repository.dataone.org/software/cicore/trunk/schemas/coordinating_node_sysmeta.xsd">
      <!-- This instance document was auto generated by oXygen XML for testing purposes.
           It contains no useful information.
      -->
      <identifier>Identifier0</identifier>
      <objectFormat>eml://ecoinformatics.org/eml-2.0.1</objectFormat>
      <size>0</size>
      <submitter>uid=jones,o=NCEAS,dc=ecoinformatics,dc=org</submitter>
      <rightsHolder>uid=jones,o=NCEAS,dc=ecoinformatics,dc=org</rightsHolder>
      <describes>XYZ333</describes>
      <checksum algorithm="SHA-1">2e01e17467891f7c933dbaa00e1459d23db3fe4f</checksum>
      <embargoExpires>2006-05-04T18:13:51.0Z</embargoExpires>
      <accessRule rule="allow" service="read" principal="Principal0"/>
      <accessRule rule="allow" service="read" principal="Principal1"/>
      <replicationPolicy replicationAllowed="true" numberReplicas="2">
          <preferredMemberNode>MemberNode12</preferredMemberNode>
          <preferredMemberNode>MemberNode13</preferredMemberNode>
          <blockedMemberNode>MemberNode6</blockedMemberNode>
          <blockedMemberNode>MemberNode7</blockedMemberNode>
      </replicationPolicy>
      <dateUploaded>2006-05-04T18:13:51.0Z</dateUploaded>
      <dateSysMetadataModified>2009-05-04T18:13:51.0Z</dateSysMetadataModified>
      <originMemberNode>mn1.dataone.org/</originMemberNode>
      <authoritativeMemberNode>mn1.dataone.org/</authoritativeMemberNode>
  </d1:systemMetadata>


(GET) Attempt to retrieve system metadata for an object that does not exist.

::

  curl http://cn.dataone.org/cn/object/SomeObjectID/meta/

  <error errorCode='404' detailCode='4060'>
    <description>The specified object does not exist on this node.</description>
    <traceInformation>
      <value key='identifier'>SomeObjectID</value>
      <value key='method'>cn.getSystemMetadat</value>
      <value key='hint'>http://cn.dataone.org/cn/resolve/SomeObjectID</value>
    </traceInformation>
  </error>


----


``/object/<guid>/resolve/``
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Implemented by CNs (possibly MNs by proxy to CN), returns the nodes known to
hold copies of the object identified by ``<guid>``.

Implemented by the following methods:

- :func:`CN_crud.resolve` (``GET /object/<guid>/resolve/``)


.. table:: 
  Responses to HTTP requests against ``/object/<guid>/resolve/`` for different
  verbs.

  ======== ===========================================================================
  Verb     Response
  ======== ===========================================================================
  HEAD     Returns basic information resolve response document
  
           ``Last-Modified:`` Date the resolve information was last updated for that
           identifier.  This is helpful to clients that may cache resolve responses.
  
  GET      Returns the resolve response document

  POST     No Operation

  PUT      No Operation

  DELETE   No Operation
  ======== ===========================================================================


**Response**

The representation of the response varies according to content type negotiation and should contain:

.. productionlist::
   RESPONSE           : IdentifierListType | Exception
   IdentifierListType : `identifier` + n*[NODE, FULL_URL]
   NODE               : node service base url
   FULL_URL           : full url for get object on the node
   Exception          : NotFound | NotAuthorized


The following representations show different encodings for the example
identifier '1234' that is located on the following nodes:

============================ =================================================
Node Identifier              GET Object URL
============================ =================================================
mn1.dataone.org/mn           ``http://mn1.dataone.org/mn/object/1234``
mn2.dataone.org/some_base/mn ``http://mn2.dataone.org/some_base/mn/object/1234``
cn.dataone.org/cn            ``http://cn.dataone.org/object/1234``
============================ =================================================


CSV representation::

  #1234
  node,url
  'mn1.dataone.org/mn','http://mn1.dataone.org/mn/object/1234'
  'mn2.dataone.org/some_base/mn','http://mn2.dataone.org/some_base/mn/object/1234'
  'cn.dataone.org/cn','http://cn.dataone.org/cn/object/1234'


JSON representation::

   {
    'identifier':'1234',
    'locations': [ 
      ['mn1.dataone.org/mn', 'http://mn1.dataone.org/mn/object/1234'],
      ['mn2.dataone.org/some_base/mn', 'http://mn2.dataone.org/some_base/mn/object/1234'], 
      ['cn.dataone.org/cn', 'http://cn.dataone.org/cn/object/1234'] ]
   }


XML representation::

  <locations identifier='1234'>
    <location node='mn1.dataone.org/mn' href='http://mn1.dataone.org/mn/object/1234' />
    <location node='mn2.dataone.org/some_base/mn' href='http://mn1.dataone.org/some_base/mn/object/1234' />
    <location node='cn.dataone.org/cn' href='http://cn.dataone.org/cn/object/1234' />
  </locations>


HTML::

  ...
  <ol identifier='1234'>
    <a href='http://mn1.dataone.org/mn/object/1234'>mn1.dataone.org/mn</a>
    <a href='http://mn2.dataone.org/some_base/mn/object/1234'>mn1.dataone.org/some_base/mn</a>
    <a href='http://cn.dataone.org/cn/object/1234'>cn.dataone.org/cn</a>
  </ol>
  ...


**Examples**

Using CURL::

  curl -X GET -H "Accept: text/csv" http://cn.dataone.org/object/1234/locate/

  #1234
  node,url
  'mn1.dataone.org/mn','http://mn1.dataone.org/mn/object/1234'
  'mn2.dataone.org/some_base/mn','http://mn2.dataone.org/some_base/mn/object/1234'
  'cn.dataone.org/cn','http://cn.dataone.org/cn/object/1234'


----


Reserve Collection
~~~~~~~~~~~~~~~~~~



``/object/reserve/``
^^^^^^^^^^^^^^^^^^^^

Implemented by the methods:

- :func:`CN_crud.listReservedIdentifiers` (``GET /reserve/``)

- :func:`CN_crud.reserveIdentifier` (``POST /object/<guid>/``)

- :func:`CN_crud.deleteReservedIdentifier` (``DELETE /object/<guid>/``)


.. TODO:: Discuss and flesh these out.



----


Log Collection
~~~~~~~~~~~~~~

The ``/log/`` collection represents access records for all objects within the
DataONE system. 


``/log/``
^^^^^^^^^

List of access records for all objects that are present on the node, ordered
with newest first.

Implements the functions:

- :func:`MN_crud.getLogRecords`


**Optional Parameters**

The ``/log/`` collection supports the same optional parameters as the
``/object/`` collection.


Wildcards and Range Operators
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Several of the REST calls support filtering using wildcards and/or range
operators. When such filtering is supported, it is explicitly noted in the
documentation for a given REST call.

The basic approach is the use of name/value pairs (NVPs) in the URL to construct
a filter for restricting results to a portion of a data set. All NVPs are
combined using the AND operator.

Wildcards are typically supported for string values and allow substring
filters to be specified by including one or more of the following wildcard
characters in the string.

:\*: Match a string of zero or more random characters
:\?: Match a single random character

Range operators are typically supported for values that represent a continuous
series, such as byte sizes and datetimes. A range operator is specified by
appending it to a name. Valid range operators are:

======= ===========================
Suffix  Range Operator
======= ===========================
None    Equals (==) (default)
_eq     Equals (==)
_lt     Less than (<)
_le     Less than or equals (<=)
_gt     Greater than (>)
_ge     Greater than or equals (>=)
======= ===========================

Wildcards and range operators cannot be combined in a single NVP.

**Examples**

Return only objects of type data that have been modified since 6AM on the first
of January, 2010 UTC::

  ../object/
  ?qt=nvp
  &oclass=data
  &lastModified_gt=20100101T060000+00

Return only objects of type system metadata that were last modified in 2005::

  ../object/
  ?qt=nvp
  &oclass=metadata
  &lastModified_ge=20050101T000000+00
  &lastModified_lt=20060101T000000+00

Return only objects of type data or metadata (filter out system metadata)::

  ../object/
  ?qt=nvp
  &oclass=*data
