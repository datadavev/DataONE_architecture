Object Resolution Service
~~~~~~~~~~~~~~~~~~~~~~~~~

.. _CN_crud.resolve:

``GET /resolve/<guid>``
.......................

Implemented by CNs, returns the nodes known to hold copies of the object
identified by ``<guid>``.

Implemented by the following methods:

- :func:`CN_crud.resolve` (``GET /object/resolve/<guid>``)

Returns :class:`Types.ObjectLocationList`


**Response**

The response is of type :class:`Types.ObjectLocationList`. The response is
serialized according to the usual content type negotiation as indicated in the
following examples where the location of a science metadata object "1234" is
resolved.

**Examples**

XML (default) in response to ``Accept: text/xml``::

  curl -X GET -H "Accept: text/xml" http://cn.dataone.org/object/resolve/1234
  or
  curl -X GET -H "Accept: */*" http://cn.dataone.org/object/resolve/1234

  <objectLocationList 
    xmlns:d1="http://dataone.org/service/types/ObjectLocationList/0.1" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://dataone.org/service/types/ObjectLocationList/0.1 https://repository.dataone.org/software/cicore/trunk/schemas/objectLocationList.xsd">
    <identifier>1234</identifier>
    <objectLocation>
      <nodeIdentifier>mn1</nodeIdentifier>
      <url>http://mn1.dataone.org/mn/object/1234</url>
      <preference>100</preference>
    </objectLocation>
    <objectLocation>
      <nodeIdentifier>mn2</nodeIdentifier>
      <url>http://mn2.dataone.org/some_base/object/1234</url>
      <preference>75</preference>
    </objectLocation>
    <objectLocation>
      <nodeIdentifier>cn1</nodeIdentifier>
      <url>http://cn1.dataone.org/cn/object/1234</url>
      <preference>1</preference>
    </objectLocation>
    <objectLocation>
      <nodeIdentifier>cn2</nodeIdentifier>
      <url>http://cn2.dataone.org/cn/object/1234</url>
      <preference>1</preference>
    </objectLocation>
    <objectLocation>
      <nodeIdentifier>cn2</nodeIdentifier>
      <url>http://cn2.dataone.org/cn/object/1234</url>
      <preference>1</preference>
    </objectLocation>
  </objectLocationList>

.. Note:: I wonder if there's a way we can make this even more verbose...


JSON::

  curl -X GET -H "Accept: application/json" http://cn.dataone.org/object/resolve/1234

  {
    'identifier':'1234',
    'locations': [ 
      ['mn1', 'http://mn1.dataone.org/mn/object/1234',100],
      ['mn2', 'http://mn2.dataone.org/some_base/object/1234',75], 
      ['cn1', 'http://cn1.dataone.org/cn/object/1234',1],
      ['cn2', 'http://cn2.dataone.org/cn/object/1234',1],
      ['cn3', 'http://cn3.dataone.org/cn/object/1234',1],
      ]
   }


CSV in response to ``Accept: text/csv`` or ``Accept: text/plain``::

  curl -X GET -H "Accept: text/csv" http://cn.dataone.org/object/resolve/1234
  
  #1234
  node,url,preference
  'mn1','http://mn1.dataone.org/mn/object/1234',100
  'mn2','http://mn2.dataone.org/some_base/object/1234',75
  'cn1','http://cn1.dataone.org/cn/object/1234',1
  'cn2','http://cn2.dataone.org/cn/object/1234',1
  'cn3','http://cn3.dataone.org/cn/object/1234',1


HTML in response to ``Accept: text/html``::

  curl -X GET -H "Accept: text/html" http://cn.dataone.org/object/resolve/1234

  ...
  <ul identifier='1234'>
    <li><a href='http://mn1.dataone.org/mn/object/1234' preference='100'>mn1</a></li>
    <li><a href='http://mn2.dataone.org/some_base/object/1234' preference='75'>mn2</a></li>
    <li><a href='http://cn1.dataone.org/cn/object/1234' preference='1'>cn1</a></li>
    <li><a href='http://cn2.dataone.org/cn/object/1234' preference='1'>cn2</a></li>
    <li><a href='http://cn3.dataone.org/cn/object/1234' preference='1'>cn3</a></li>
  </ul>
  ...





Using CURL::

  curl -X GET -H "Accept: text/csv" http://cn.dataone.org/object/resolve/1234

  #1234
  node,url
  'mn1.dataone.org/mn','http://mn1.dataone.org/mn/object/1234'
  'mn2.dataone.org/some_base/mn','http://mn2.dataone.org/some_base/mn/object/1234'
  'cn.dataone.org/cn','http://cn.dataone.org/cn/object/1234'

----

``HEAD /resolve/<guid>``
........................

HEAD     Returns basic information resolve response document

         ``Last-Modified:`` Date the resolve information was last updated for that
         identifier.  This is helpful to clients that may cache resolve responses.


