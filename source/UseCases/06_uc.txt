.. _UC06:

Use Case 06 - MN Synchronize
----------------------------

Author
  VDC TWG

Date
  - 20091127 [PEA] Made consistent with V0.3 APIs.
  - 20090930 Filled out content, changed mode to pull from MN
  - 20090925 Adding to use case description and documentation
  - 20090114 (TWG meeting).  Subsequent various modifications.

Version 
  0.3

Goal
  Science metadata records present in a Member Node are created in (synchronized to) Coordinating Node.

Summary 

  As data packages, or portions there of are created or modified, the metadata
  associated with those needs to be replicated to the coordinating nodes.

  After V0.3, if new data packages are present on the MN, then a MN-MN synchronization
  process is scheduled.


Actors
  Member Node, Coordinating Node

Preconditions 
  - CN and MN operational
  
Triggers
  -  Member Node has new data package(s)
 
Post Conditions
  - All system and science metadata records from a MN are also present on the CN


.. figure:: images/06_uc.png
   :width: 75%

   Use case 06.


.. figure:: images/06_interaction.png
   :width: 100%

   Sequence diagram for use case 06. Synchronize metadata between Member and Coordinating Node.
   
   .. todo:: This diagram is in process of being updated for V0.3.


..
  @startuml images/06_uc.png
  !include ../plantuml.conf

  package "DataONE"
  actor "Coordinating Node" as CN
  actor "Member Node" as MN
  usecase "13. Authorization" as author
  usecase "06. Synchronize Metadata" as SYNC
  usecase "XX. Notify Watchers" as NOTIFY
  CN -- SYNC
  MN -- SYNC
  SYNC ..> author: <<includes>>
  SYNC ..> NOTIFY: <<includes>>
  @enduml


..
@startuml images/06_interaction.png
!include ../plantuml.conf
participant "CRUD API" as m_crud << Member Node >>

participant "Replication API" as m_rep << Member Node >>
c_sync -> m_rep: listChangedRecords(token)

note right of c_sync
  The RSS mechanism might be 
  appropriate for retrieving changes.
  
  Also could consider sitemap for this.
  
  Note - the return is a list of all
  objects.
end note


c_sync <-- m_rep: GUID_list
loop for each GUID
  c_sync -> m_crud: getSystemMetadata(token, GUID)
  c_sync <-- m_crud: metadata
  c_sync -> m_crud: get(token, GUID)
  c_sync <-- m_crud: object
participant "CRUD API" as c_crud << Coordinating Node >>
  c_sync -> c_crud: create(GUID, metadata)
  c_sync <-- c_crud: ack or FAIL
  c_sync -> m_rep: notifyReplicated(system_token, GUID)
  note over m_rep
    What happens if the CN create() operation fails?
    How far to roll back?
  end note
end
@enduml


.. raw:: latex

   \newpage
