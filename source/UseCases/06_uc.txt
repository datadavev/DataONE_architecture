.. _UC06:

Use Case 06 - MN Synchronize
----------------------------

Author
  VDC TWG

Date
  - 20091127 [PEA] Made consistent with V0.3 APIs.
  - 20090930 Filled out content, changed mode to pull from MN
  - 20090925 Adding to use case description and documentation
  - 20090114 (TWG meeting).  Subsequent various modifications.

Version 
  0.3

Goal
  Science metadata records present in a Member Node are created in (synchronized to) Coordinating Node.

Summary 

  As data packagesare created the metadata
  associated with those needs to be replicated to the coordinating nodes.

  After V0.3, if new data packages are present on the MN, then a MN-MN synchronization
  process is scheduled.


Actors
  Member Node, Coordinating Node

Preconditions 
  - CN and MN operational
  
Triggers
  -  Periodic polling of MNs
 
Post Conditions
  - All system and science metadata records from a MN are also present on the CN


.. figure:: images/06_uc.png
   :figwidth: 100%

   Use case 06.


.. figure:: images/06_interaction.png
   :figwidth: 100%

   Sequence diagram for use case 06. Synchronize metadata between Member and
   Coordinating Node. Note that the log messages record a REPLICATE rather
   than a READ event. The MN determines this through the User Agent header (NB
   - this assumes that CNs only call MN.get to do replication).


..
  @startuml images/06_uc.png
  !include ../plantuml.conf

  package "DataONE"
  actor "Coordinating Node" as CN
  actor "Member Node" as MN
  usecase "13. Authorization" as author
  usecase "06. Synchronize Metadata" as SYNC
  usecase "XX. Notify Watchers" as NOTIFY
  CN -- SYNC
  MN -- SYNC
  SYNC ..> author: <<includes>>
  SYNC ..> NOTIFY: <<includes>>
  @enduml


..
  @startuml images/06_interaction.png
  !include ../plantuml.conf
  participant "CRUD API" as c_crud << Coordinating Node >>
  participant "Synchronization API" as c_sync << Coordinating Node >>
  participant "Replication API" as m_rep << Member Node >>
  participant "CRUD API" as m_crud << Member Node >>

  c_sync -> m_rep: listObjects(token, startTime, ...)

  c_sync <-- m_rep: list of GUIDs

  loop for each GUID
    c_sync -> m_crud: getSystemMetadata(token, GUID)
    note right
      The association between data and 
      science metadata is created on 
      the Member Node (or by the ITK).
    end note
    c_sync <-- m_crud: SystemMetadata
    c_sync -> c_sync: parse -> is ScienceMetadata?
    note right
      Parse the sysmeta to determine if Science Metadata 
      needs to be retrieved.
    end note
    alt GUID refers to data
      c_sync -> c_crud: create(GUID, SystemMetadata)
    else GUID refers to ScienceMetadata
      c_sync -> m_crud: get(token, GUID)
      m_crud --> m_crud: log (REPLICATE)
      c_sync <-- m_crud: ScienceMetadata
      c_sync -> c_crud: create(GUID, SystemMetadata, ScienceMetadata)
    end
  end
  @enduml


.. raw:: latex

   \newpage
