.. raw:: latex

  \newpage
  

Use Case 01 - Get Object Identified by GUID
-------------------------------------------

.. index:: Use Case 01, Get

Author
  VDC TWG

Date
  - 20091126 [PEA] Make consistent with V0.3 API documentation.
  - 20091006 Added use case diagram
  - 20090924 Adding to use case description and documentation
  - 20090114 (TWG meeting).  Subsequent various modifications.

Version 
  0.3

Goal
  Retrieve an object identified by GUID (authenticated or not, notify
  subscriber of access).

Summary 
  A client has an identifier for some object within the DataONE system and is
  retrieving the referenced object. The DataONE system must resolve the
  identifier and return the object bytes after checking that the user has read
  privileges on the object.  

  After V0.3 - Watchers (subscribers) of the object are notified of the retrieval (what are
  they notified of?).

Actors
  - Client requesting object
  - Coordinating Node
  - Member Node

Preconditions 
  - Client has authenticated to at the desired level (e.g. client may not have
    authenticated, so access might be anonymous), and so an ``auth_token |
    None`` is available.

Triggers
  - An object is requested from the DataONE system.

Post Conditions
  - V0.3 and after - The client has a copy of the object bytes (or an error message in the case
    of failure)
  - V0.3 and after - The log is updated with the results of the operation
  - After V0.3 - Watchers perform their processing


**Notes**

1. For the GET operation, the coordinating node does not need to check access,
   because the member node will do this check before delivering the results.

2. For the GET operation, should isAuth() be performed only by CNs? Relying on
   the MN system metadata requires trusted implementation of the MN system and
   consistency of system metadata across all MNs (which will be the case, though
   with uncertain latency). Requiring all isAuth() operations to be performed by
   CNs will increase trust in the operation (assuming the operation is not
   spoofed by a MN) though will increase load on CNs.

3. Data sent to watchers might include: timestamp, object identifier, user id,
   IP of client.


.. figure:: images/01_uc.png
   :width: 75%

   Use case 01 diagram showing actors and components involved in this action.


.. figure:: images/01_interaction_a.png
   :width: 100%

   

   Sequence diagram for Use Case 01 illustrating the sequence for retrieving
   an object identified by a GUID from the DataONE system. Note the dichotomy
   in response depending on whether the object referenced by the GUID is a
   metadata document (record) or a data object. In the case of metadata, the
   metadata document is returned. In the case of data, a URL is returned that
   points drectly to a service endpoint for retrieving the bytes (perhaps
   instead always return metadata, for a data object it would be the system
   metadata?).



.. figure:: images/01_interaction.png
   :width: 100%

   OLD: Sequence diagram for retrieving an object from DataONE.


.. raw:: latex

  \newpage

.. raw:: pdf

  PageBreak


.. 
  This block defines the use case diagram referenced above
  @startuml images/01_uc.png
    !include ../plantuml.conf
    actor "User" as client
    usecase "12. Authentication" as authen
    note top of authen
    Authentication may be provided 
    by an external service
    such as CILogon
    end note

    package "DataONE"
      actor "Coordinating Node" as CN
      actor "Member Node" as MN
      usecase "13. Authorization" as author
      usecase "01. Get Object" as GET
      client -- GET
      CN -- GET
      MN -- GET
      GET ..> author: <<includes>>
      GET ..> authen: <<includes>>
  @enduml


..
  @startuml images/01_interaction_a.png
  !include ../plantuml.conf
  actor User
  participant "Client" as app_client << Application >>
  participant "CRUD API" as c_crud << Coordinating Node >>
  participant "Authorization API" as c_authorize << Coordinating Node >>
  participant "Object Store" as c_ostore << Coordinating Node >>
  participant "CRUD API" as m_crud << Member Node >>
  User -> app_client
  app_client -> c_crud: get(token, GUID)
  
  alt After V0.3
    c_crud -> c_authorize: isAuthorized(token, GUID, OP_GET)
    c_crud <-- c_authorize: T or F 
  end
  note right of c_crud
    The internal mechanism to determine the 
    GUID of the system metadata
    for a given GUID is not shown here
  end note
  c_crud -> c_crud: getSystemMetadata(GUID) 
  alt System Metadata
    c_crud --> app_client: system metadata object
  else Science Metadata
    note right of c_crud
      extract GUID of science metadata 
      from system metadata
    end note
    c_crud -> c_ostore: read (science metadata GUID)
    c_crud <-- c_ostore: science metadata object
    c_crud --> app_client: science metadata object
  else Data
    note right of c_crud
      extract list of MNs holding
      data from system metadata
    end note
    c_crud --> app_client: list of active MNs holding the data
    app_client -> m_crud: get(token, GUID)
    alt After V0.3
      m_crud -> c_authorize: isAuthorized(token, handle)
      m_crud <-- c_authorize: T or F
    end
    app_client <-- m_crud: data object
  end
  
  @enduml

..
  This block defines the interaction diagram referenced above.
  @startuml images/01_interaction.png
    !include ../plantuml.conf
    actor User
    participant "Client" as app_client << Application >>
    User -> app_client

    participant "CRUD API" as c_crud << Coordinating Node >>
    activate c_crud
    app_client -> c_crud: resolve(GUID, auth_token)
    participant "Authorization API" as c_authorize << Coordinating Node >>
    c_crud -> c_authorize: isAuth(auth_token, GUID)
    participant "Verify API" as c_ver << Coordinating Node >>
    c_authorize -> c_ver: isValidToken (token)
    c_authorize <-- c_ver: T or F
    c_crud <-- c_authorize: T or F
    app_client <-- c_crud: handle_list
    deactivate c_crud

    participant "CRUD API" as m_crud << Member Node >>
    activate m_crud
    app_client -> m_crud: get(auth_token, handle)
    participant "Server Authentication API" as m_authenticate << Member Node >>
    m_crud -> m_authenticate: isAuth(auth_token, GUID)
    m_crud <-- m_authenticate: T or F
    m_crud -> m_crud: log(get, UserID, GUID)
    app_client <-- m_crud: object or unauth or doesNotExist
    deactivate m_crud
  @enduml


