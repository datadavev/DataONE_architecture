.. module:: SystemMetadata

System Metadata
===============

System metadata is the information needed by DataONE to track and manage
objects across the distributed coordinating and member nodes of the network.
The information is maintained dynamically by Coordinating Nodes and is
mutable in that it reflects the current state of an object in the system.
System metadata is exchanged between Coordinating Nodes and Member Nodes in
order to accomplish services provided by the network, and replicate copies
of system metadata are maintained at each of the Coordinating nodes.

System metadata are considered operational information needed to run
DataONE, and can be read by all coordinating nodes and member nodes in the
course of service provision. In order to reduce issues with third-party 
tracking of data status information, users can read system metadata for an 
object if they have the access rights to read the corresponding object which 
a system metadata record describes.

The following list of fields represents the set of information collected and
maintained by Coordinating Nodes for every object in the system.

System Metadata fields
----------------------

.. attribute:: Identifier

  The unique Unicode string that is used to canonically name and identify
  the object in DataONE.  Each object in DataONE is immutable, and therefore
  all objects must have unique Identifier. If two objects are related to one
  another (such as one object is a more recent version of another object),
  each of these two objects will have unique identifiers.  The relationship
  among the objects is specified in other metadata fields (see Obsoletes and
  ObsoletedBy), but this does not preclude the inclusion of version
  information in the identifier string.

  :Cardinality:
    1

  :ValueSpace: 
    IdentifierValue consisting of Unicode text excluding reserved characters 
    (whitespace and other characters to be determined)


.. attribute:: OriginMemberNode

  A reference to the Member Node that originally uploaded the associated
  object. This value should never change, even if a Member Node no longer
  exists.

  :Cardinality:
    1

  :ValueSpace: 
    MemberNodeIdentifier drawn from the DataONE MemberNodeRegistryService


.. attribute:: AuthoritativeMemberNode

  A reference to the Member Node that acts as the authoritative source for
  an object in the system.  The AuthoritativeMemberNode will often also be the 
  OriginMemberNode, unless there has been a need to transfer authority for
  an object to a new node, such as when a Member Node becomes defunct.
  Replication should occur from the AuthoritativeMemberNode.

  :Cardinality:
    1

  :ValueSpace: 
    MemberNodeIdentifier drawn from the DataONE MemberNodeRegistryService


.. attribute:: Replica

  A container field used to repeatedly provide sseveral metadata fields about 
  each replica that exists in the system, or is being replicated. Note that
  a Replica field exists even for the Authoritative/Origin Member Nodes so
  that the status of those objects can be tracked.

  :Cardinality:
    0..n

  :ValueSpace: 
    Contains child metadata fields only -- no values per se


.. attribute:: ReplicaMemberNode

  A reference to the Member Node that houses this replica, regardless of
  whether it has arrived at the Member Node or not.  See ReplicationStatus
  to determine if the replica is completely transferred.

  :Cardinality:
    1

  :ValueSpace: 
    MemberNodeIdentifier drawn from the DataONE MemberNodeRegistryService


.. attribute:: ReplicationStatus

  A flag indicating the status of the replica throughout its lifecycle.
  Replicas start when they are queued for replication, then transition to
  'Requested' state when the Coordinating Node asks the Member Node to
  replicate the object, and then finish in 'Completed' state after the
  object has been transferred and the Coordinating Node is notified that
  the replication has completed. During the verification process a replica
  may be found to be corrupt, at which point it transitions to
  'Invalidated' to indicate that the replica is no longer valid and needs
  to be transferred again.

  :Cardinality:
    1

  :ValueSpace:
    'Queued', 'Requested', 'Completed', 'Invalidated'


.. attribute:: DateReplicaVerified

  Most recent date for which this particular replica was verified against
  its canonical checksum. Because of disk errors and other anomolies that 
  consistently corrupt data, all replicas need to be verified by comparing 
  them to their checksum.  Validation errors cause a change of
  ReplicationStatus to 'Invalidated'.

  :Cardinality:
    1


.. attribute:: ReplicationPolicy

  A controlled list of policy choices that determine how many replicas
  should be maintained for a given object and any preferences or
  requirements as to which Member Nodes should or are allowed to house the
  replicas that are created.
  - number of replicas required
  - preferred MNs (social contract, functional properties (size, etc))
  - blocked MNs (political, other)

  :Cardinality:
    1

  .. Note::
    This field probably will be hierarchical, or some of its subfields could
    be broken out as root level fields.  Need to determine the volcabularies
    for these replication policies.


.. attribute:: Submitter

  Person who submitted the associated abject to the DataONE Member 
  Node. The Submitter is by default the RightsHolder if a RightsHolder has
  not been specified. 

  :Cardinality:
    1

  :ValueSpace: PersonIdentifier drawn from the DataONE IdentityProviderService


.. attribute:: RightsHolder

  Person, Group, or Organization that has ultimate authority for object and
  is authorized to make all decisions regarding the disposition and
  accessibility of the object. The RightsHolder has all rights to
  access the object, update the object, and grant permissions for the object, 
  even if additional access control rules are not specified for the object.

  :Cardinality:
    1

  :ValueSpace: PrincipalIdentifier drawn from the DataONE IdentityProviderService

  .. Note::
  
     By allowing RightsHolder to be a group or organization, we are making the
     disposition of the object ambiguous if members of the collective
     disagree. It might be better to assign RightsHolder to one individual,
     and instruct that individual to grant any needed additional permissions
     to other individuals or groups. The downside of this approach is that the
     RightsHolder might not be accessible when a decision is needed (due to,
     e.g., retirement, career change, death), which then orphans the object in
     the system (which still may happen even if groups are allowed here).


.. attribute:: DateCreated

  Date and time (UTC) that the object was created in the DataONE system.
  Note this is independent of the publication or release date of the object.

  :Cardinality:
    1

  :ValueSpace: ISO 8601 Date-time value in UTC


.. attribute:: DateExpires

  Date and time (UTC) that the object expires in the DataONE system.

  :Cardinality:
    0..1

  :ValueSpace: ISO 8601 Date-time value in UTC

  .. Note::

     Its unclear what it means to 'expire'.  Needs clarification.


.. attribute:: DateEmbargoExpires

  Objects can be marked as embargoed by setting this field to a date in the
  future, and by providing access control rules that allow the public to
  read the object after the embargo date passes.  This allows people to
  submit an object with controlled access for a limited time period which
  authomatically expires without further action by the submitter.  This
  approach is common in many data networks, and will simplify management for
  the networks.

  :Cardinality:
    0..1

  :ValueSpace: 
    ISO 8601 Date-time value in UTC


.. attribute:: DateSysMetadataCreated

  Date and time (UTC) that this system metadaat record was created in the 
  DataONE system.

  :Cardinality:
    1

  :ValueSpace: 
    ISO 8601 Date-time value in UTC


.. attribute:: DateSysMetadataModified

  Date and time (UTC) that this system metadata record was modified in the 
  DataONE system.

  :Cardinality:
    1

  :ValueSpace: 
    ISO 8601 Date-time value in UTC


.. attribute:: ObjectFormat

  Designation of the standard or format that should be used to interpret the
  contents of the object.  For metadata objects, this is the namespace of
  the metadata content standard, whereas for data objects it is a
  well-known data representation format. DataONE maintains a list of formats
  in use and their canonical FormatIdentifiers. The format identifier for an
  object should imply its mime type for data objects and metadata type and
  serialization format for metadata objects. Examples include the namespace
  of the EML 2.1 metadata specification, the DOCTYPE of the Biological Data
  Profile, the mime type of text/csv files, and the canonincal name of the
  NetCDF specification.

  :Cardinality:
    1

  :ValueSpace:
    One value from the DataONE ObjectFormatVocabulary, which may be an
    adopted vocabulary maintained by another organization.


.. attribute:: Checksum

  A calculated hash value used to validate object integrity over time and
  after network transfers.  The value is calculated using a standard
  hashing algorithm that is accepted by DataONE and that is indicated in
  ChecksumAlgorithm.

  :Cardinality:
    1

  :ValueSpace: Unicode (or ASCII?) string


.. attribute:: CheckSumAlgorithm

  The name of the checksum algorithm used to calculate the checksum for this
  object.

  :Cardinality:
    1

  :ValueSpace:
    AlgorithmName drawn from a DataONE controlled list of accepted
    algorithms.


.. attribute:: Size

  The number of bytes represented in by this object (in bytes).

  :Cardinality:
    1

  :ValueSpace:
    long integer


.. attribute:: AccessRule

  A rule that is used to allow or deny a principal (user, group, or
  organization) to perform a service (such as read or write) on an object in 
  DataONE.  Rules are three-tuples (ruletype, service, principal) where
  ruletype specifies whether the service should be allowed or denied by the
  principal. Default access control rules are specified by the
  OriginMemberNode when the object is first registered in DataONE.  If no
  rules are specified at that time, then the object is deemed to be private
  and the only user with access to the object (read, write, or otherwise) is
  the RightsHolder.

  :Cardinality:
    0..n

  :ValueSpace:
  
    Three-tuple of the form (ruletype, service, principal) where:
  
    - ruletype: 'allow', 'deny'
    - service: 'read', 'write', changePermissions
    - principal: PrincipalIdentifier drawn from the DataONE 
      IdentityProviderService
  
  .. Note::

     - EML has a simple set of permissions that are applied to users and
       groups using the eml-access module

     - Most other science metadata systems don't incorporate acls explicitly

     - SAML is used broadly to represent these types of access rules


.. attribute:: Obsoletes

  The Identifier of an object that is a prior version of the object
  described in this system metadata record and that is obsoleted by this object.

  :Cardinality:
    0..n

  :ValueSpace:
    IdentifierValue as described in the Identifier field.

  .. Note::
     System metadata is mutable because it must reflect the current state of
     objects in the system. For preservation purposes, Obsoletes and
     ObsoletedBy may be better managed in the science metadata.


.. attribute:: ObsoletedBy

  The Identifier of an object that is a subsequent version of the object
  described in this system metadata record and that therefore obsoletes this 
  object.

  :Cardinality:
    0..n

  :ValueSpace:
    IdentifierValue as described in the Identifier field.
    
  .. Note::
  
    System metadata is mutable because it must reflect the current state of 
    objects in the system.  For preservation purposes, Obsoletes and ObsoletedBy
    may be better managed in the science metadata.


.. attribute:: DerivedFrom

  The identifier of an object from which information was derived in the
  process of creating the current object.

  :Cardinality:
    0..n

  :ValueSpace:
    IdentifierValue as described in the Identifier field.

  .. Note::
     System metadata is mutable because it must reflect the current state of
     objects in the system. For preservation purposes, DerivedFrom may be
     better managed in the science metadata.



CN Specific System Metadata
---------------------------

CN Replication locations (should perhaps move to CN specific metadata)
MN Replication status (completed, ...)

verification status (periodically check the checksums)

- need to be able to report to users which mns an object is available now


Notes and fields that probably do not belong in SystemMetadata
--------------------------------------------------------------

:Data/Metadata cross references:
  Need fields to cross reference metadata and data objects, currently
  dependent on the science metadata for this, but its so variable we need to
  track it ourselves too.

Title () skip this - not really system metadata.

Alternative identifiers (previously published identifiers)

  - Considered, but excluded because not needed for system operations

Access endpoints (science or higher level metadata? URL, may be outside of dataone)

  - Considered, but excluded because not needed for system operations

Ownership (originator)

  - Considered, but ownership is ambiguous and overlaps with RightsHolder in
    ambiguous ways

Time modified 

  - not applicable since immutable

Time accessed 

  - probably best to keep in logs)

Preservation metadata

  - Other preservation metadata other than expiration date and checksum might
    be needed

encoding, encryption, compression

  - these may belong here, or may belong in science metadata

:License:

  - belongs in science metadata? 

  - but also need controlled vocab for listing licenses- e.g. click thru)

  - its not clear what this really means for data, and might have negative
    consequences by imposing contract law on objects that would otherwise be
    unencumbered because copyright does not apply to data per se in the US

  - see the Creative Commons CC0 license for data

  :Cardinality:
    1

:IsAuthorizationRequired:
  Boolean flag indicating whether authorization is required to provide read
  access to the data.  By skipping authorization steps the process of
  distributing data can be faster.

  :Cardinality:
    1

.. Note::
  This field is really an optimization that is derived from the access
  control rules.  It is likely equivalent to an AC rule that allows
  anonymous access, or generic authenticated access. Probably exclude this
  field.

- need verification / validation rules for values retrieved from science metadata
