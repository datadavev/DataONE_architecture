Use Cases Overview
==================

:Date: 20090924

An important early part in the process of system architecture is identifying
the functional requirements that the resulting system should be able to
address. Use cases are helpful for this as they describe how actors (typically
entities external to the system) interact with system components. Interaction
diagrams help define the interfaces and messages transmitted between
components.


.. note:: 
   :TODO: Architecture overview diagram

   :TODO: Component diagram

   :TODO: Broad categories of use cases

.. raw:: pdf

   PageBreak


.. figure:: images/dataone_components.png

..
  @startuml images/dataone_components.png
    package "Coordinating Node" #EEEEEE
      component "Registration API" as CNregister
      component "Verify API" as CNverify
      component "CN Replication" as CNrepl
      component "MN Synchronization" as MNrepl
      component "Identity and Authentication" as CNIDAuth
      component "Authorization and Control" as CNaccesscontrol
      component "Search" as CNsearch
      component "CRUD" as CNcrud
      component "Health" as CNhealth
      component "Logging" as CNlogging
      component "Subscription" as CNsubscribe

    package "Member Node" #EEEEEE
      component "Replication" as repl
      component "Authentication" as MNauth
      component "Health" as MNhealth
      component "Capabilities" as MNcaps
      component "CRUD" as MNcrud
      component "Log" as MNlog

    package "Investigator Toolkit" #EEEEEE
      component client
      component admin

      
    CNIDAuth -- CNcrud
    CNIDAuth -- CNverify
    CNaccesscontrol -- CNcrud
    CNaccesscontrol -- CNverify
    CNcrud -- CNlogging
    CNcrud -- MNrepl
    CNcrud -- CNlogging
    CNsubscribe -- CNIDAuth
    MNrepl -- CNlogging
    CNsearch -- CNlogging
    CNsearch -- CNsubscribe
    CNsearch -- CNaccesscontrol
    CNregister -- CNlogging
    CNrepl -- CNrepl
    CNrepl -- CNlogging
    
      
    MNcaps -- CNregister
    repl -- MNrepl
    CNhealth -- MNhealth
    MNcrud -- CNcrud
    MNcrud -- CNverify
    MNcrud -- MNlog
    MNcrud -- MNrepl
    MNauth -- CNIDAuth
    MNauth -- MNauth
    MNauth -- CNverify
    repl -- repl
    MNlog -- MNrepl
    
    
    client -- CNcrud
    client -- CNsearch
    client -- MNauth
    client -- CNIDAuth
    client -- CNsubscribe
    client -- CNaccesscontrol
    admin ..|> client
    admin -- CNIDAuth
    admin -- CNhealth
    admin -- MNhealth
    
    
  @enduml


.. 
  @startuml images/cn_components_x.png
    package "Coordinating Node" #EEEEEE
      component "Registration API" as CNregister
      component "Verify API" as CNverify
      component "CN Replication" as CNrepl
      component "MN Synchronization" as MNrepl
      component "Identity and Authentication" as CNIDAuth
      component "Authorization and Control" as CNaccesscontrol
      component "Search" as CNsearch
      component "CRUD" as CNcrud
      component "Health" as CNhealth
      component "Logging" as CNlogging
      component "Subscription" as CNsubscribe
      component "System Metadata" as CNsysmeta
      component "Experiment Metadata" as CNexpmeta
      component "Metadata Parser" as CNparser

  CNcrud --> CNexpmeta: write
  CNcrud -- CNlogging
  CNexpmeta -- CNparser
  CNparser -- CNsysmeta
  CNsearch -- CNsubscribe
  CNsearch -- CNaccesscontrol
  CNsearch -- CNlogging
  CNaccesscontrol -- CNverify
  CNverify -- CNIDAuth
  CNsubscribe -- CNIDAuth
  CNIDAuth -- CNcrud
  CNcrud -- CNrepl
  CNcrud -- MNrepl
  CNrepl -- CNrepl
  CNregister -- CNlogging
  CNregister -- CNsysmeta
  CNhealth -- CNsysmeta
  @enduml



Use Case Layout
---------------

Each use case document is structured following a common template which
includes the following elements.

Author
 Who generated the use case.  This will usually be "VDC TWG".

Date
 Date the use case was identified and known subsequent modifications.

Version
 One of "Draft", "Review", "Published"

Goal
 Brief description of what is intended with the use case.

Summary
 An overview of the use case which includes the goal and major actors.

Use case diagram
 A diagram representation of the use case, somewhat following the UML.

Sequence diagram
 A sequence diagram that shows the operations involved in addressing the use
 case. 

Actors
 The participants in the use case - includes people and systems.

Preconditions
 The conditions that must exist for the use case. For example, a particular
 use case may only be valid if the use has been authenticated.

Triggers
 Describes the even that causes the use case to be initiated.
 
Postconditions
 The state of the system after the use case - what conditions are true after
 the use case is completed.

Notes
 Miscellaneous notes and discussion items that can't be placed in the various
 categories.  Comments should be annotated with time and author.
 
.. Note:: The diagrams presented in these documents are all generated using the
   excellent PlantUML_ tool developed by Arnaud Roques.  PlantUML has saved us
   many hours of work generating these diagrams.


.. _PlantUML: http://plantuml.sourceforge.net
 