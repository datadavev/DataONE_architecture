Overview
========

The DataONE core cyberinfrastructure implements three significant
functionalities:

1. Persistent identifiers for all discrete objects in the system (i.e. data,
metadata, system metadata, annotations, identities, node capabilities, and so
forth)

2. A consistent scheme for identifying users across all participating nodes.

3. An extensive, extensible search mechanism to assist discovery.

This functionality is available through a set of simple service interfaces and
components described in these documents.

The DataONE system is fundamentally composed of three major components:

:Member Nodes:

  Existing and new data repositories. These systems offer heterogeneous
  implementations across a variety of data types and support a variety of
  metadata types. All data is stored on Member Nodes, and the DataONE
  infrastructure, in particular the Coordinating Nodes assist with
  coordinating distribution of data between MNs.


:Coordinating Nodes:

  The operational core of DataONE. The coordinating nodes catalog data and
  metadata, control the dispersion of data across Member Nodes, keep a replica
  of all metadata, offer services for distributed identity, and offer search
  and discovery capabilities.


:Investigator Toolkit:

  Initially provides a set of libraries for interacting with DataONE CNs and
  MNs (i.e. a "client library"). As the project develops, the ITK will grow to
  contain a rich set of applications and tools for interacting with the
  content available in DataONE (and potentially other Data Nets).

.. figure:: images/ServicesOverview.png
   :width: 100%

   General overview of the major components of DataONE and the services they
   implement. It is invisaged that there will be very few CNs (3 in the first
   year), many more MNs (hundreds), and even more instances of the ITK.


In the initial version of DataONE, the system will be composed of three
instances of Coordinating Nodes and at least three instances of Member Nodes.


.. figure:: images/MNOverview.png
   :width: 50%

   Simple diagram of the MN structure. DataONE service APIs are implemented by
   a component that interacts with the existing APIs of the Member Node.


.. raw:: latex

   \begin{landscape}

.. figure:: images/CNOverview.png
   :width: 100%

   An estimate of CN components and the services they provide.


.. raw:: latex

   \end{landscape}


..
  @startuml images/MNOverview.png
  !include plantuml.conf

  () "CRUD" as mn_crud
  () "Authorization" as mn_auth
  () "Replication" as mn_repl
  () "Health" as mn_health
  () "Logging" as mn_logging
  package "Member Node" #EEEEEE
    component "Existing Services" as mn_existing
    component "DataONE Services" as MN
  mn_existing --> MN
  mn_existing <-- MN
  MN -- mn_crud
  MN -- mn_auth
  MN -- mn_repl
  MN -- mn_health
  MN -- mn_logging

  @enduml


..
  @startuml images/CNOverview.png
  !include plantuml.conf
  skinparam noteFontSize 12
  
  () "CRUD" as cn_crud
  () "Authentication" as cn_authn
  () "Authorization" as cn_authz
  () "Replication" as cn_repl
  () "Health" as cn_health
  () "Search" as cn_search
  () "Registration" as cn_register

  

  package "Coordinating Node" #EEEEEE
    component "Document Store\n(Metacat)" as ostore
    component "Science Metadata\nParser / Validator\n(Mercury)" as sparser
    component "Search Index\n(Mercury / SOLR)" as index
    component "CN_Service" as cn_service
    component "System Log" as log

  cn_crud -- cn_service
  cn_repl -- cn_service
  cn_register -- cn_service
  cn_health -- cn_service
  cn_service -- cn_authz
  cn_service -- cn_search
  cn_service -- cn_authn

  cn_service --> ostore
  ostore --> cn_service
  cn_service --> log
  log --> cn_service
  index --> cn_service
  sparser --> index
  ostore --> sparser
  
  @enduml
  
  note right of objectm
    The Content Manager implements most of the external 
    interfaces, provides the basis for replication (between MNs),
    and assists with synchronization (between CNs).
  endnote
  
  note right of sysm
    The System Directory manages many small pieces of information,
    providing system level metadata about all content, access control
    rules, authentication, and registration of member nodes.
  endnote
  
  note right of eparser
    The metadata parser is used to validate content and to extract
    specific items of information for generation of the search index.
  endnote

  '() "Logging" as cn_logging
  'component "System Status" as status
  'component "Identity Manager" as identm
  'component "Access Control" as access
  'component "MN Registry" as mnregister
  'component "Message Queue" as queue
  'component "Synchronizer" as sync
  'component "MN Replicator" as mn_repl
  
  'status -- cn_health
  'log -- cn_logging
  'index -- cn_search
  'mnregister -- cn_register
  'objectm .. status
  'objectm .. access
  'objectm .. identm

  'identm .. sysm
  'access .. sysm
  'mnregister .. sysm
  'mnregister .. queue
  'sync .. queue
    
  @enduml


..
  figure:: images/new_data.png
  :height: 8.5in
  This diagram indicates what happens when new data is present on a MN.

..
  @startuml images/new_data.png
  title New data present on MN
  (*) --> "CN Detects new data object" as A1
  A1 --> "Get information about new object" as A2
  A2 --> <> B1
  --> [metadata] "Retrieve Metadata" as A3
  --> [data] "test" as A4
  A3 --> "Store Metadata, update system metadata" as A5
  A5 --> ===B2===
  --> "Parse Metadata"
  --> "Update Search Index"
  --> "Update system metadata: indexed"
  --> (*)
  ===B2=== --> "Find Host (MN2)"
  --> "Request Host Copy (MN2)"
  --> ===B3===
  --> "Check MN transfer status" as A10
  --> <> B4
  --> [incomplete] A10
  --> [done] "Update system metadata: new host"
  --> (*)
  ===B3=== --> "MN2 Get data from MN1"
  --> "Retrieve Data"
  --> "Done"
  --> (*)
  @enduml  



.. raw:: latex

   \newpage



.. toctree::
   :maxdepth: 1

   WhatIsData
   GUIDs
   Replication
   DataAndMetadata
   Authentication

   
