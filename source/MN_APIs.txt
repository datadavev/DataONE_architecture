Member Node APIs
----------------


These APIs are implemented by Member Nodes.

.. todo:: 
   The APIs need to be edited for consistency of method signatures and naming.
   Update the sequence diagrams to reflect the edits to the API.


Authorization API
~~~~~~~~~~~~~~~~~

.. module:: MN_authorization
   :synopsis: Authentication and authorization operations for Member Nodes

Provides a mechanism for a User to authenticate themselves with the DataONE
system and verify that an operation is permitted for an authenticated User.
See the document :doc:`Authentication` for more details on some authentication
options.

::

  login(user, password, [auth_system]) -> token
  logout(token)
  isAuthorized (token, method, GUID) -> boolean
  verify(token) -> boolean

.. index:: authenticate, authorize


.. exception:: InvalidCredentials

.. exception:: AuthenticationTimeout

.. exception:: InvalidToken



.. function:: login(user, password, [auth_system]) -> token

   Authenticates a user for interaction with the DataONE system. The returned
   token is trusted throughout the DataONE system as a reliable statement as
   to the identity of the authenticated user.

   :param user: User name for authentication

   :param password: Secret used for verifying identity

   :param auth_system: Place holder for support of multiple authentication services 
     for a single user.

   :rtype: A composite of the user id and authentication token.

   :raises InvalidCredentials: The supplied credentials were invalid (password +
     username don't jive)

   :raises AuthenticationTimeout: A response from the authentication service was not received
       before the operation timed out.
   
   .. Note:: :func:`login` may delegate the actual login to an authentication service,
      and a given user may utilize several authentication services.  If this is the 
      case then an additional parameter identifying the authentication service to
      use will be required.



.. function:: logout(token)

   Revokes trust in the supplied token, making it invalid for further use
   within the DataONE system.

   :param token: The authentication token returned by :func:`login`

   :rtype: No return



.. function:: isAuthorized (token, method, GUID) -> boolean

   Indicates if the operation identified by ``method`` on the object
   identified by GUID is permitted by user identified by ``token``.

   :param token: The authentication token returned by :func:`login`

   :param method: Enumerated set of values indicating at least "read" and "write"

   :param GUID: An identifier or list of identifiers that are to be tested for access.

   :rtype: 
    True if the operation is permitted, otherwise False. If GUID is a list,
    then the return is the equivalent of boolean AND of the test results for
    all elements in the list.

   :raises InvalidToken: The supplied token is invalid.

   :raises MN_crud.NotFound: The object identified by GUID was not found.

   .. Note::
      Should perhaps add convenience methods for "canRead()" and "canWrite()" to
      verify that a user is able to read / write an object.



.. function:: verify(token) -> boolean

   Test if the provided token is valid. 

   Note that there is a potential security issue here as open access to this
   method enables a malicious user to potentially probe a large number of
   generated tokens to determine properties of the system, and perhaps even
   generate a token that matches a system token. Hence another level of
   restriction (perhaps network level blocking / limiting) is necessary.

   :param token: The authentication token returned by :func:`login`

   :rtype: True if the supplied token is valid, otherwise False





CRUD API
~~~~~~~~

.. module:: MN_crud
   :synopsis: Create, read, update, and delete operations on member nodes

::

  get(token, GUID) -> object
  batchGet(token, GUIDs) -> ?
  checkDataQuality (GUID)
  create (token, dataPackage) -> GUID
  create (token, workflowObject)
  getChecksum (GUID) -> checksum
  getLogRecords(token, fromDate, toDate)
  log (create, creationDate, ID)
  register (memberToken, ID, metadata)



.. exception:: NotFound

.. exception:: NotAuthorized

.. exception:: UnsupportedType

.. exception:: InsufficientResources



.. function:: get(token, GUID) -> object

   Retrieve an object identified by GUID from the Member Node.

   :param token: The authentication token returned by ``login()``

   :param GUID: The identifier for the object to be retrieved.

   :rtype: 
    Bytes of the specified object. For data objects, this will be the actual
    bytes of data. For metadata objects, this will be the representation of
    the object as provided by the Member Node.

   :raises NotAuthorized: The supplied identity does not have READ permission on the object.

   :raises NotFound: The object specified by GUID does not exist.

   .. Note:: There may be multiple representations of content (e.g. metadata as
      XML, RDF, or some other format).  May need to add another parameter to specify
      the format, or perhaps rely on HTTP content negotiation for this.



.. function:: batchGet(token, GUIDs) -> ?

  Identical to get() except that a list of identifiers is requested.

  The issue here is how to serialize the results. There are some conceptual
  mechanisms for handling structured markup such as XML, but no consistent
  approaches for working with data blobs. Perhaps this method should apply
  only to system metadata, for which the serialization can be defined
  independently of all the other participating nodes?

  :param token: The authentication token returned by ``login()``

  :param GUIDs: The list of identifiers to retrieve.

  :rtype: 
   Bytes of the specified objects. **How are multiple objects serialized?**

  :raises NotAuthorized: The supplied identity does not have READ permission on the object.

  :raises NotFound: The object specified by GUID does not exist.



.. function:: checkDataQuality (GUID)

  TODO: need details on what this operation is supposed to be doing.

  :param GUID: object to check



.. function:: create (token, dataPackage) -> GUID

  Adds a new data package to the Member Node. This mechanism is used by the
  Coordinating Nodes to indicate a Member Node should add a copy of the data
  package to itself.

  The actual transfer of content should occur asynchronously, so this method
  should return immediately after the operation has been scheduled.

  :param token: The authentication token returned by ``login()``

  :param dataPackage:
   The information that is to be added to the Member Node. This will contain
   GUIDs that at least identify the data and metadata that are to be added. It
   is up to the MN to determine when the actual retrieval should occur.

  :rtype: 
   An identifier that can be used to check on the status of the operation. For
   example, this could be a URL that points to a status document on the MN.

  :raises NotAuthorized:

  :raises UnsupportedType: 
   The MN can not deal with the content specified in the data package.

  :raises InsufficientResources:
   The MN is unable to execute the transfer because it does not have
   sufficient storage space for example.



.. function:: create (token, workflowObject)

.. Note:: Why is this method different from a regular create() operation?



.. function:: getChecksum (GUID) -> checksum

  Returns a checksum for the specified object using the system wide hashing
  algorithm. The result is used to determine if two instances referenced by a
  GUID are identical, hence it is important that the same algorithm is used throughout 

  :param GUID: The identifier of the object the operation is being performed on.

  :rtype: The checksum value originally computed for the specified object.

  .. Note:: for an MN, this should probably be a computed value.  For CNs, it
     should be the value originally calculated for the object (and retrieved from
     system metadata)



.. function:: getLogRecords(token, fromDate, toDate)

  Retrieve log information from the MN for the specified date range (inclusive).



.. function:: log (create, creationDate, ID)



.. function:: register (memberToken, ID, metadata)

  :param token: The authentication token returned by :func:`login`




Replication API
~~~~~~~~~~~~~~~

.. module:: MN_replication
   :synopsis: Handles CN directed replication of content between member nodes.

.. function::  cancelReplication (sess, transID)

.. function::  listAllObjects ()

.. function::  listRecords ()

.. function::  replicationSucceeds (transID)

.. function::  startReplica (ID, sessionID, transID, srcMN)

.. function::  sysOp (token)





Capabilities API
~~~~~~~~~~~~~~~~

.. module:: MN_capabilities
   :synopsis: Reports the capabilities of a Member Node

.. function::  serviceRequest (token)

.. function::  verify (token)

.. function::  getCapabilities ()




State of Health API
~~~~~~~~~~~~~~~~~~~

.. module:: MN_health
   :synopsis: Reports on the status of a Member Node

.. function::  sohQuery (token, service)
  


