Member Node APIs
----------------


These APIs are implemented by Member Nodes.

.. todo:: 
   The APIs need to be edited for consistency of method signatures and naming.
   Update the sequence diagrams to reflect the edits to the API.


Authorization API
~~~~~~~~~~~~~~~~~

.. module:: MN_authorization
   :synopsis: Authentication and authorization operations for Member Nodes

Provides a mechanism for a User to authenticate themselves with the DataONE
system and verify that an operation is permitted for an authenticated User.
See the document :doc:`Authentication` for more details on some authentication
options.

::


  login(user, password, [auth_system]) -> token
  logout(token)
  isAuthorized (token, method, GUID) -> boolean
  verify(token) -> boolean

.. index:: authenticate, authorize


.. exception:: InvalidCredentials

.. exception:: AuthenticationTimeout

.. exception:: InvalidToken



.. function:: login(user, password, [auth_system]) -> token

   Authenticates a user for interaction with the DataONE system. The returned
   token is trusted throughout the DataONE system as a reliable statement as
   to the identity of the authenticated user.

   :param user: User name for authentication

   :param password: Secret used for verifying identity

   :param auth_system: Place holder for support of multiple authentication services 
     for a single user.

   :rtype: A composite of the user id and authentication token.

   :raises InvalidCredentials: The supplied credentials were invalid (password +
     username don't jive)

   :raises AuthenticationTimeout: A response from the authentication service was not received
       before the operation timed out.
   
   .. Note:: :func:`login` may delegate the actual login to an authentication service,
      and a given user may utilize several authentication services.  If this is the 
      case then an additional parameter identifying the authentication service to
      use will be required.



.. function:: logout(token)

   Revokes trust in the supplied token, making it invalid for further use
   within the DataONE system.

   :param token: The authentication token returned by :func:`login`

   :rtype: No return



.. function:: isAuthorized (token, method, GUID) -> boolean

   Indicates if the operation identified by ``method`` on the object
   identified by GUID is permitted by user identified by ``token``.

   :param token: The authentication token returned by :func:`login`

   :param method: Enumerated set of values indicating at least "read" and "write"

   :param GUID: An identifier or list of identifiers that are to be tested for access.

   :rtype: 
    True if the operation is permitted, otherwise False. If GUID is a list,
    then the return is the equivalent of boolean AND of the test results for
    all elements in the list.

   :raises InvalidToken: The supplied token is invalid.

   :raises MN_crud.NotFound: The object identified by GUID was not found.

   .. Note::
      Should perhaps add convenience methods for "canRead()" and "canWrite()" to
      verify that a user is able to read / write an object.



.. function:: verify(token) -> boolean

   Test if the provided token is valid. 

   Note that there is a potential security issue here as open access to this
   method enables a malicious user to potentially probe a large number of
   generated tokens to determine properties of the system, and perhaps even
   generate a token that matches a system token. Hence another level of
   restriction (perhaps network level blocking / limiting) is necessary.

   :param token: The authentication token returned by :func:`login`

   :rtype: True if the supplied token is valid, otherwise False





CRUD API
~~~~~~~~

.. module:: MN_crud
   :synopsis: Create, read, update, and delete operations on member nodes

::

  describe(token, GUID) -> objectMetadata
  get(token, GUID) -> object
  batchGet(token, GUIDs) -> ?
  checkDataQuality (GUID)
  create(token, GUID, object, sysmeta) -> GUID
  update(token, GUID, object, obsoletedGUID, sysmeta) -> GUID
  delete (token, GUID)
  getChecksum (GUID) -> checksum
  getLogRecords(token, fromDate, toDate)
  log (create, creationDate, ID)
  register (memberToken, ID, metadata)


.. exception:: NotFound

.. exception:: NotAuthorized

.. exception:: UnsupportedType

.. exception:: InsufficientResources

.. exception:: IdentifierNotUnique


.. function:: describe(token, GUID) -> objectMetadata

   Describes the object located at the endpoint of a GUID. This is necessary
   to enable a client (e.g. a CN doing synchronization of new content) to
   determine what type of information is being referenced before it is
   registered in the system metadata. Helps to avoid accidental download of
   data objects rather than metadata.

   It may also be possible / feasible / appropriate to utilize content
   negotiation in the HTTP GET method as part of the :func:`get` operation to
   retrieve this information (or perhaps HTTP HEAD).

   :param token: Identity with privileges to read the GUID.

   :param GUID: Identifier for the object in question.

   :rtype: Metadata describing what the GUID refers to.


.. function:: get(token, GUID) -> object

   Retrieve an object identified by GUID from the Member Node.

   :param token: The authentication token returned by ``login()``

   :param GUID: The identifier for the object to be retrieved.

   :rtype: 
    Bytes of the specified object. For data objects, this will be the actual
    bytes of data. For metadata objects, this will be the representation of
    the object as provided by the Member Node.

   :raises NotAuthorized: The supplied identity does not have READ permission on the object.

   :raises NotFound: The object specified by GUID does not exist.

   .. Note:: There may be multiple representations of content (e.g. metadata as
      XML, RDF, or some other format).  May need to add another parameter to specify
      the format, or perhaps rely on HTTP content negotiation for this.



.. function:: batchGet(token, GUIDs) -> ?

  Identical to get() except that a list of identifiers is requested.

  The issue here is how to serialize the results. There are some conceptual
  mechanisms for handling structured markup such as XML, but no consistent
  approaches for working with data blobs. Perhaps this method should apply
  only to system metadata, for which the serialization can be defined
  independently of all the other participating nodes?

  :param token: The authentication token returned by ``login()``

  :param GUIDs: The list of identifiers to retrieve.

  :rtype: 
   Bytes of the specified objects. **How are multiple objects serialized?**

  :raises NotAuthorized: The supplied identity does not have READ permission on the object.

  :raises NotFound: The object specified by GUID does not exist.



.. function:: checkDataQuality (GUID)

  TODO: need details on what this operation is supposed to be doing.

  :param GUID: object to check



.. function:: create(token, GUID, object, sysmeta) -> GUID

  Adds a new object to the Member Node, where the object is either a data
  object or a science metadata object. This method is called by clients to
  create new data objects on Member nodes.

  :param token: The authentication token returned by ``login()``

  :param GUID: The globally unique identifier that should be used in
   DataONE to identify and access the object.  This is an Unicode string
   that follows the constraints on identifiers described in
   :doc:`GUIDs`. If the identifier is already in use, an exception will be
   raised and the client should try again with a different, unique
   identifier.

  :param object:
   The data bytes that are to be added to the Member Node. 

  :param sysmeta:
   The system metadata document that provides basic information about the
   object, including a reference to its identifier, access control
   information, etc.  See :doc:`SystemMetadata` for a full description and
   schema.

  :rtype: 
   The identifier that was used to insert the document into the system. 

  :raises NotAuthorized:

  :raises IdentifierNotUnique:
   The requested identifier is already used by another object and therefore
   can not be used for this object.  Clients should choose a new identifier
   that is unique and retry the operation.

  :raises UnsupportedType: 
   The MN can not deal with the content specified in the data package.

  :raises InsufficientResources:
   The MN is unable to execute the transfer because it does not have
   sufficient storage space for example.


.. function:: update(token, GUID, object, obsoletedGUID, sysmeta) -> GUID

  Creates a new object on the Member Node that explicity updates and
  obsoletes a previous object, where the object is either a data
  object or a science metadata object. This method is called by clients to
  update objects on Member nodes.  The object that is being obsoleted is
  passed in as a parameter, and the Member Node should record the update by 
  storing the Obsoletes and ObsoletedBy fields for the respective objects.

  :param token: The authentication token returned by ``login()``

  :param GUID: The globally unique identifier that should be used in
   DataONE to identify and access the object.  This is an Unicode string
   that follows the constraints on identifiers described in
   :doc:`GUIDs`. If the identifier is already in use, an exception will be
   raised and the client should try again with a different, unique
   identifier.

  :param object:
   The data bytes that are to be added to the Member Node. 

  :param obsoletedGUID: The identifier of the object that is being updated.
   If this identifier does not exist in the system, an error is raised and
   the operation does not complete.  If the identifier is already in use, 
   an exception will be raised and the client should try again with a 
   different, unique identifier.

  :param sysmeta:
   The system metadata document that provides basic information about the
   object, including a reference to its identifier, access control
   information, obsoleted objects, etc.  See :doc:`SystemMetadata` for a 
   full description and schema.

  :rtype: 
   The identifier that was used to insert the document into the system. 

  :raises NotAuthorized:

  :raises IdentifierNotUnique:
   The requested identifier is already used by another object and therefore
   can not be used for this object.  Clients should choose a new identifier
   that is unique and retry the operation.

  :raises UnsupportedType: 
   The MN can not deal with the content specified in the data package.

  :raises InsufficientResources:
   The MN is unable to execute the transfer because it does not have
   sufficient storage space for example.

  :raises NotFound:
   The update operation failed because the object which was supposed to be
   updated in the system (indicated via the obsoletedGUID parameter) is not
   present in the DataONE system, so update is an illegal operation.


.. function:: delete (token, GUID) -> GUID

  Deletes an object from the Member Node, where the object is either a data
  object or a science metadata object. This method is called by clients to
  create delete objects on Member nodes.i Member Nodes must check that the
  caller is authorized to perform this function.

  :param token: The authentication token returned by ``login()``

  :param GUID: The globally unique identifier that should be used in
   DataONE to identify and delete the object.  This is an Unicode string
   that follows the constraints on identifiers described in
   :doc:`GUIDs`. 

  :rtype: 
   The identifier that was used to delete the document from the system. 

  :raises NotAuthorized:

  :raises NotFound:
   The delete operation failed because the object which was supposed to be
   deleted in the system (indicated via the GUID parameter) is not
   present in the DataONE system, so delete is an illegal operation.

  .. Note:: As DataONE is to be an archival system, we need to determine
     what the semantics of the DELETE function really should be.  Can any
     user delete their objects at any time?  What if they have published
     and referenced the identifier in past?  Should DELETE simply be a
     mechanism to move the object out of commonly found search mechanisms?
     What about copyrighted or illegal content that is uploaded?


.. function:: getChecksum (GUID) -> checksum

  Returns a checksum for the specified object using the system wide hashing
  algorithm. The result is used to determine if two instances referenced by a
  GUID are identical, hence it is important that the same algorithm is used throughout 

  :param GUID: The identifier of the object the operation is being performed on.

  :rtype: The checksum value originally computed for the specified object.

  .. Note:: for an MN, this should probably be a computed value.  For CNs, it
     should be the value originally calculated for the object (and retrieved from
     system metadata)



.. function:: getLogRecords(token, fromDate, toDate)

  Retrieve log information from the MN for the specified date range (inclusive).



.. function:: log (create, creationDate, ID)



.. function:: register (memberToken, ID, metadata)

  :param token: The authentication token returned by :func:`login`




Replication API
~~~~~~~~~~~~~~~

.. module:: MN_replication
   :synopsis: Handles CN directed replication of content between member nodes.

::

  cancelReplication (sess, transID)
  listAllObjects ()
  listRecords ()
  replicationSucceeds (transID)
  startReplica (ID, sessionID, transID, srcMN)
  sysOp (token)
  listChangedRecords(token) -> GUIDs


.. function::  cancelReplication (sess, transID)

.. function::  listAllObjects ()

.. function::  listRecords ()

.. function::  replicationSucceeds (transID)

.. function::  startReplica (ID, sessionID, transID, srcMN)

.. function::  sysOp (token)



.. function:: listChangedRecords(token) -> GUIDs

   List the records that have changed since the last synchronization event.

   :param token: A token with authority to retrieve a list of changed records.




Capabilities API
~~~~~~~~~~~~~~~~

.. module:: MN_capabilities
   :synopsis: Reports the capabilities of a Member Node

::

  serviceRequest (token)
  getCapabilities () -> capabilities


.. function::  serviceRequest (token)

.. function::  getCapabilities () -> capabilities

   Returns a document describing the capabilities of the Member Node. 
   
   :rtype: Capabilities metadata document




State of Health API
~~~~~~~~~~~~~~~~~~~

.. module:: MN_health
   :synopsis: Reports on the status of a Member Node

::

  sohQuery (token, service)
  ping() -> pingResponse
  getStatus(token) -> currentStatus


.. function::  sohQuery (token, service)

.. function:: ping() -> pingResponse

   Low level "are you alive" operation. Response is simple ACK, but may be
   reasonable to overload with a couple of flags that could indicate
   availability of new data or change in capabilities.

   :rtype pingResponse: A simple chunk of data, perhaps XML, or plain text.

.. function:: getStatus(token) -> currentStatus

   Returns the current status of the MN, perhaps with some accumulation and
   averaging over the last xxx minutes.

   :param token: Identity with authority to retrieve the status information.

   :rtype: A status document in an easily parsed syntax such as JSON or XML


.. raw:: latex

   \newpage

