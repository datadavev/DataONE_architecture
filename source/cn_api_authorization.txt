Coordinating Node Authorization API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. module:: CN_authorization
   :synopsis: Methods for authentication and authorization

.. table:: Methods expressed by the :mod:`CN_authorization`.

   ==================== ==========================================
   Function             Parameters
   ==================== ==========================================
   :func:`login`        ``(user, password, [authSystem]) ->`` :class:`Types.AuthToken`
   :func:`setAccess`    ``(token, GUID, accessLevel) ->`` boolean
   :func:`setOwner`     ``(token, userid, GUID) ->`` :class:`Types.IdentifierType`
   :func:`newAccount`   ``(username, password, [authSystem]) ->`` :class:`Types.PrincipalType`
   :func:`verify`       ``(token) ->`` boolean
   :func:`isAuthorized` ``(token, GUID, operation) ->`` boolean 
   ==================== ==========================================


----

.. function:: login(user, password, [authSystem]) -> AuthToken

  Authenticates a user for interaction with the DataONE system. The returned
  token is trusted throughout the DataONE system as a reliable statement as
  to the identity of the authenticated user.

  :param user: User name for authentication

  :type user: :class:`Types.PrincipalType`

  :param password: Secret used for verifying identity

  :type password: string

  :param authSystem: Place holder for support of multiple authentication services 
    for a single user.

  :type authSystem: :class:`Types.AuthenticationSystemType`

  :returns: A composite of the user id and authentication token.

  :rtype: :class:`Types.AuthToken`

  :raises Exceptions.InvalidCredentials: 
    :errorCode: 401
    :detailCode: 4360

    The supplied credentials were invalid (password + username don't jive)

  :raises Exceptions.AuthenticationTimeout: 
    :errorCode: 408
    :detailCode: 4380

    A response from the authentication service was not received before the
    operation timed out.

.. Note:: 
  :func:`login` may delegate the actual login to an authentication service,
  and a given user may utilize several authentication services. If this is the
  case then an additional parameter identifying the authentication service to
  use will be required.


----

.. function:: setAccess (token, GUID, accessLevel) -> boolean

   Set the access permissions for an object identified by GUID.

   :param token: 
      The authentication token returned by :func:`login`. Used to verify that
      the calling user has authority to modify access control for the object.

   :type token: class:`Types.AuthToken`

   :param GUID:  The object for which access control is being edited.

   :type GUID: class:`Types.IdentifierType`

   :param accessLevel: The desired privileges to be assigned to the object.

   :type accessLevel: class:`Types.AccessRuleType`

   :returns: True if the operation succeeds, otherwise False.

   :rtype: boolean

   :raises Exceptions.NotFound: 
     :errorCode: 404
     :detailCode: 4400

   The object identified by GUID was not found.

   :raises Exceptions.NotAuthorized: 
     :errorCode: 401
     :detailCode: 4420

     The supplied identity does not have permission to alter access control
     rules for the object.

.. Note::
  Should permissions cascade? e.g. Should setting permission on a Data Package
  cascade to the contained objects as well (the experiment metadata and data)?


----

.. function:: setOwner(token, GUID, userId) -> IdentifierType

   Changes ownership of the specified object to the identity specified by
   userid. 

   :param token: 
      The authentication token returned by :func:`login`. Used to verify that
      the calling user has authority to take ownership of the object.

   :type token: :class:`Types.AuthToken`

   :param userid:
      Identity of the user that will be taking ownership of the specified objects.

   :type userid:  :class:`Types.PrincipalType`

   :param GUID: Identifier indicating the object to be modified.

   :type GUID: :class:`Types.IdentifierType`

   :returns: Identifier of object if successful.

   :rtype: :class:`Types.IdentifierType`

   :raises Exceptions.InvalidToken: 
     :errorCode: 401
     :detailCode: 4480

     The supplied token is invalid.

   :raises Exceptions.NotAuthorized: 
     :errorCode: 401
     :detailCode: 4440

     The supplied identity does not have authority to change ownership.

  :raises Exceptions.NotFound:
    :errorCode: 404
    :detailCode: 4460

    The specified object does not exist on the node processing the call.


----

.. function::  newAccount(username, password, [authSystem]) -> PrincipalType

   Create a new identity in the DataONE system. Note that there should
   probably be a lot more metadata captred about the new user, and there
   should be a mechanism for specifying the default access control rules for
   the new account.

   :param username: Requested username.  Must be unique within the DataONE system.

   :type username: string

   :param password: The secret associated with the account.

   :type password: string

   :param authSystem: Place holder for support of multiple authentication services 
     for a single user.

   :type authSystem: :class:`Types.AuthenticationSystemType`

   :returns:
     GUID for the new identity, otherwise NULL.

   :rtype: :class:`Types.IdentifierType`

   :raises Exceptions.IdentifierNotUnique: 
     :errorCode: 409
     :detailCode: 4500

     The provided identity already exists in the system

   :raises Exceptions.InvalidCredentials:
     :errorCode: 401
     :detailCode: 4520

     Raised if the supplied credentials are invalid, such as a password that
     is too weak or an innapropriate user name.

----

.. function:: verify(token) -> boolean

  Test if the provided token is valid. 

  Note that there is a potential security issue here as open access to this
  method enables a malicious user to potentially probe a large number of
  generated tokens to determine properties of the system, and perhaps even
  generate a token that matches a system token. Hence another level of
  restriction (perhaps network level blocking / limiting) is necessary.

  :param token: The authentication token returned by :func:`login`

  :type token: :class:`Types.AuthToken`

  :returns: True if the supplied token is valid, otherwise False

  :rtype: boolean

  :raises Exceptions.NotAuthorized:
    :errorCode: 401
    :detailCode: 4540

    This error is raised if the request comes from a black listed source (e.g.
    a temporary block may be imposed on a source that calls this method too
    many times within some time interval)


----

.. function:: isAuthorized(token, GUID, operation) -> boolean

   Test if the user identified by the provided token has authorization for
   operation on the object identified by GUID.

  :raises Exceptions.NotFound:
    :errorCode: 404
    :detailCode: 4560

    The specified object does not exist on the node.

  :raises Exceptions.NotAuthorized:
    :errorCode: 401
    :detailCode: 4580

    This error is raised if the request comes from a black listed source (e.g.
    a temporary block may be imposed on a source that calls this method too
    many times within some time interval)

----

.
.. function:: requestToken ()

   This operation is used by CN applications to obtain a token for system
   level operations.

   .. Note:: 
      This could be a normal :func:`login` operation using a system user and
      secret that is stored in a secure location.





Server Authentication API
~~~~~~~~~~~~~~~~~~~~~~~~~

Server authentication is handled by network configuration for V0.3.



