Authorization API
~~~~~~~~~~~~~~~~~

.. module:: CN_authorization
   :synopsis: Methods for authentication and authorization


.. function:: login(user, password, [auth_system]) -> token

  Authenticates a user for interaction with the DataONE system. The returned
  token is trusted throughout the DataONE system as a reliable statement as
  to the identity of the authenticated user.

  :param user: User name for authentication

  :param password: Secret used for verifying identity

  :param auth_system: Place holder for support of multiple authentication services 
    for a single user.

  :returns: A composite of the user id and authentication token.

  :rtype: AuthToken

  :raises Exceptions.InvalidCredentials: The supplied credentials were invalid
    (password + username don't jive)

  :raises Exceptions.AuthenticationTimeout: A response from the authentication
    service was not received before the operation timed out.

  .. Note:: :func:`login` may delegate the actual login to an authentication service,
     and a given user may utilize several authentication services.  If this is the 
     case then an additional parameter identifying the authentication service to
     use will be required.


.. function:: requestToken ()

   This operation is used by CN applications to obtain a token for system
   level operations.

   .. Note:: 
      This could be a normal :func:`login` operation using a system user and
      secret that is stored in a secure location.



.. function:: setAccess (token, GUID, accessLevel) -> boolean

   Set the access permissions for an object identified by GUID.

   :param token: 
      The authentication token returned by :func:`login`. Used to verify that
      the calling user has authority to modify access control for the object.

   :param GUID:  The object for which access control is being edited.

   :param accessLevel: The desired privileges to be assigned to the object.

   :returns: True if the operation succeeds, otherwise False.

   :rtype: Boolean

   :raises Exceptions.InvalidToken: The supplied token is invalid.

   :raises Exceptions.NotFound: The object identified by GUID was not found.

   :raises Exceptions.NotAuthorized: The supplied identity does not have
     permission to alter access control rules for the object.

   .. Note::
    Should permissions cascade? e.g. Should setting permission on a Data
    Package cascade to the contained objects as well (the experiment metadata
    and data)?


.. function:: setOwner(token, userid, objectList) -> objectList

   Changes ownership of all objects in objectList to the identity specified by
   userid.

   :param token: 
      The authentication token returned by :func:`login`. Used to verify that
      the calling user has authority to take ownership of the object.

   :param userid:
      Identity of the user that will be taking ownership of the specified objects.

   :param objectList: a list of object identifiers (GUIDs) that are to be modified.

   :returns: List of objects for which the operation failed.

   :rtype: ObjectList

   :raises Exceptions.InvalidToken: The supplied token is invalid.

   :raises Exceptions.NotAuthorized: The supplied identity does not have
     authority to change ownership.


.. function::  newAccount(username, password, [auth_system]) -> identity_GUID

   Create a new identity in the DataONE system. Note that there should
   probably be a lot more metadata captred about the new user, and there
   should be a mechanism for specifying the default access control rules for
   the new account.

   :param username: Requested username.  Must be unique within the DataONE system.

   :param password: The secret associated with the account.

   :param auth_system: Place holder for support of multiple authentication services 
     for a single user.

   :returns:
     GUID for the new identity, otherwise NULL.

   :rtype: GUID

   :raises Exceptions.IdentityAlreadyExists: The provided identity already
     exists in the system


.. function:: verify(token) -> boolean

  Test if the provided token is valid. 

  Note that there is a potential security issue here as open access to this
  method enables a malicious user to potentially probe a large number of
  generated tokens to determine properties of the system, and perhaps even
  generate a token that matches a system token. Hence another level of
  restriction (perhaps network level blocking / limiting) is necessary.

  :param token: The authentication token returned by :func:`login`

  :returns: True if the supplied token is valid, otherwise False

  :rtype: Boolean


Server Authentication API
~~~~~~~~~~~~~~~~~~~~~~~~~

Server authentication is handled by network configuration for V0.3.



