Authentication in DataONE
=========================

:Author: Dave Vieglais
:Status: Draft for comment
:Date: 20091023

This document outlines some simplistic approaches for authentication of users
of the DataONE system. It is not intended to be comprehensive but rather to
offer a common starting point for discussion about the topic in the context of
the DataONE infrastructure.

Overview
--------

Users and services authenticate in DataONE for the following purposes:

- To confirm their identity

Identity is utilized in the DataONE infrastructure to:

- To indicate ownership of objects

- To confirm or deny access to an object (read / write) through some access control rules

Four scenarios of identify provider are investigated below: 

1. Users are authenticated by Coordinating Nodes;

2. Users are authenticated by Member Nodes (a user identity managed by "their"
   MN);

3. Users are authenticated by a third party identity provider; and

4. Users are authenticated by any scheme with algorithmic verification
   available at any node.

The basic assumption in all cases is that the user authenticates using some
credentials and a key (password or some other secret) and the identity
provider returns a token that the user can pass around as proof that they have
authenticated with the DataONE system at some time within the last XXX period
of time.


Scenario 1: Authentication provided by CNs
------------------------------------------

.. image:: images/authenticate_case_a.png

..
  @startuml images/authenticate_case_a.png
  !include plantuml_fullsized.conf
  actor User
  participant MN1
  participant MN2
  participant CN
  User -> MN1: login(D1.username, password)
  activate MN1
  MN1 -> CN: login(D1.username, password)
  activate CN
  CN --> MN1: token
  deactivate CN
  MN1 -> User: token
  deactivate MN1
  User -> MN2: get(token, GUID)
  activate MN2
  MN2 -> CN: verify(token)
  activate CN
  CN --> MN2: T or F
  deactivate CN
  note right of MN2
    verify() could be called from within 
    isAuthorized() to avoid additional 
    network call.
  end note
  MN2 -> CN: isAuthorized(token, GUID, OP_GET)
  activate CN
  CN -> MN2: T or F
  deactivate CN
  MN2 --> User: object
  deactivate MN2
  @enduml
  
- The Member Nodes must trust Coordinating Nodes as an identity provider

- The CNs must trust that MNs are forwarding credentials appropriately

- All accounts exist on and are managed by CNs


Scenario 2. Authentication provided by MN
-----------------------------------------

.. image:: images/authenticate_case_b.png

..
  @startuml images/authenticate_case_b.png
  !include plantuml_fullsized.conf
  actor User
  participant MN1
  participant MN2
  participant CN
  User -> MN1: login(MN1.username, password)
  activate MN1
  MN1 -> User: token
  deactivate MN1
  alt MN verification
    User -> MN2: get(token, GUID)
    activate MN2
    MN2 -> MN1: verify(token)
    activate MN1
    MN1 --> MN2: T or F
    deactivate MN1
    MN2 -> MN1: isAuthorized(token, GUID, OP_GET)
    activate MN1
    MN1 --> MN2: result
    deactivate MN1
    MN2 --> User: object
    deactivate MN2
  else CN verification
    User -> MN2: get(token, GUID)
    activate MN2
    MN2 -> CN: verify(token)
    activate CN
    CN -> MN1: verify(token)
    activate MN1
    MN1 --> CN: T or F
    deactivate MN1
    CN --> MN2: T or F
    deactivate CN
    MN2 -> CN: isAuthorized(token, GUID, OP_GET)
    activate CN
    CN -> MN1: isAuthorized(token, GUID, OP_GET)  
    activate MN1
    MN1 --> CN: result
    deactivate MN1
    CN --> MN2: result
    deactivate CN
    MN2 --> User: object
    deactivate MN2
  end  
  @enduml

- token must have signature that indicates the issuing MN
- MN2 trusts MN1 as an authentication provider


Scenario 3. Authentication through Third Party Identity Provider
----------------------------------------------------------------

.. image:: images/authenticate_case_c.png

..
  @startuml images/authenticate_case_c.png
  !include plantuml_fullsized.conf
  actor User
  participant MN1
  participant "Third Party" as TP
  User -> TP: login(TP.username, password)
  TP --> User: token
  User -> MN1: get(token, GUID)
  activate MN1
  MN1 -> TP: verify(token)
  TP --> MN1: T or F
  MN1 -> MN1: isAuthorized(token, GUID, OP_GET)
  MN1 --> User: object
  deactivate MN1
  @enduml

- MNs and CNs must trust the third party identity provider

- Assuming access control rules are present on MN1


Scenario 4. Authentication Verified Algorithmically by Any Node
---------------------------------------------------------------

.. image:: images/authenticate_case_d.png

..
  @startuml images/authenticate_case_d.png
  !include plantuml_fullsized.conf
  actor User
  participant MN1
  participant "Identity Provider" as ident
  User -> ident: login(username, password)
  ident --> User: token
  User -> MN1: get(token, GUID)
  activate MN1
  MN1 -> MN1: verify(token)
  MN1 -> MN1: isAuthorized(token, GUID, OP_GET)
  MN1 --> User: object
  deactivate MN1
  @enduml

- Minimizes communication between Nodes for identity verification
- All MNs and CNs must trust each other (to accept identity)
- Assuming access control rules are present on MN1


Notes from 20090602 ABQ Meeting
-------------------------------

Access Control, Logging, Auditing -> Authentication + Identity Management

* Centralized directory (LDAP)
* Distributed directory (LDAP with referrals)
* Distributed management, replicated (LDAP with replication)
* GSI proxy certificates
* OpenID
* Shibboleth + InCommon


Verifying Identity

* Self registered (valid email, txt message, ...)
* Real person
* Member of xxx


Access Control

:Principals:
  * User
  * Member of group
  * Public
  * Authenticated user
  * Site manager (for harvest, system operations, ...)
  * Change request approval workflow
  * group who have accepted intellectual rights

Things to control:

- Data

  * read
  * write
  * change perms

- Metadata

  * read
  * write
  * change perms

- Member Node Write
- Perform certain API calls (e.g. register node)
- Logs about {MNs, Data, ... }

Special People

- data curators
- MN curators / IMs

Expressing Permissions

- SAML
- eml-access
- Others to consider?

Attaching Permissions to Resources and Services


