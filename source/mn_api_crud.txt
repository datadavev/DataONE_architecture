CRUD API
~~~~~~~~

.. module:: MN_crud
   :synopsis: Create, read, update, and delete operations on member nodes

::

  describe(token, GUID) -> DescribeResponse
  get(token, GUID) -> ByteStream
  batchGet(token, GUIDs) -> ?
  checkDataQuality (GUID) -> ?
  create(token, GUID, object, sysmeta) -> GUID
  update(token, GUID, object, obsoletedGUID, sysmeta) -> GUID
  delete (token, GUID) -> Boolean
  getChecksum (GUID) -> checksum
  getLogRecords(token, fromDate, toDate) -> LogRecords
  log (create, creationDate, ID) -> ?
  register (memberToken, ID, metadata) -?



.. function:: describe(token, GUID) -> DescribeResponse

   This method provides a lighter weight mechanism than
   :func:`getSystemMetadata` for a client to determine basic properties of the
   referenced object. The response should indicate properties that are
   typically returned in a HTTP HEAD request: the date late modified, the size
   of the object, the mime-type of the object.

   :param token: Identity with privileges to read the GUID.

   :param GUID: Identifier for the object in question.

   :rtype: DescribeResponse

   :returns: Tuple of (mime-type, size, date last modified) expressed in
     appropriate format, default being xhtml.

   :raises: Exceptions.NotAuthorized

   :raises: Exceptions.NotFound



.. function:: getSystemMetadata(token, GUID) -> system metadata

   Describes the science metadata or data object identified by the GUID 
   by returing the system metadata object associated with the GUID.

   :param token: authentication token; ignored for V0.3

   :param GUID: Identifier for the science data or science metedata object of interest.
 
   :rtype: System metadata object describing the object.

   :raises: Exceptions.NotAuthorized

   :raises Exceptions.NotFound: There is no data or science metadata
      identified by the given GUID.

   .. todo::

     Q. What happens if the GUID is valid within DataONE, but isn't on this MN?
     Is NotFound raised? Or, does the member node forward the request to a CN?

     A. Choices are: 1) raise NotFound. 2) resolve the GUID and return
     redirect. 3) redirect to a CN. 4) resolve the GUID and proxy content.

     Options 1 or 3 seem most reasonable, with inclination towards 3.


.. function:: get(token, GUID) -> object

   Retrieve an object identified by GUID from the Member Node.

   :param token: The authentication token returned by ``login()``. Ignored for v0.3

   :param GUID: The identifier for the object to be retrieved.

   :rtype: 
    Bytes of the specified object. For data objects, this will be the actual
    bytes of data. For metadata objects, this will be the representation of
    the object as provided by the Member Node.

   :raises Exceptions.NotAuthorized: The supplied identity does not have READ
      permission on the object.

   :raises Exceptions.NotFound: The object specified by GUID does not exist at
      this node.

   .. Note:: There may be multiple representations of content (e.g. metadata as
      XML, RDF, or some other format).  May need to add another parameter to specify
      the format, or perhaps rely on HTTP content negotiation for this.

   .. TODO:: 
   
      What happens if the GUID is valid within DataONE, but isn't on this MN?
      Is NotFound raised? Or, does the member node forward the request to a
      CN?



.. function:: batchGet(token, GUIDs) -> ?

  Identical to get() except that a list of identifiers is requested.

  The issue here is how to serialize the results. There are some conceptual
  mechanisms for handling structured markup such as XML, but no consistent
  approaches for working with data blobs. Perhaps this method should apply
  only to system metadata, for which the serialization can be defined
  independently of all the other participating nodes?

  :param token: The authentication token returned by ``login()``

  :param GUIDs: The list of identifiers to retrieve.

  :rtype: 
   Bytes of the specified objects. **How are multiple objects serialized?**

  :raises Exceptions.NotAuthorized: The supplied identity does not have READ
     permission on the object.

  :raises Exceptions.NotFound: The object specified by GUID does not exist.

  .. TODO:: batchGet specifies that multiple objects may be retrieved in a
     single call. How are these objects packaged in the response?


.. function:: checkDataQuality (GUID)

  .. TODO:: need details on what this operation is supposed to be doing.

  :param GUID: object to check



.. function:: create(token, GUID, object, sysmeta) -> GUID

   Adds a new object to the Member Node, where the object is either a data
   object or a science metadata object. This method is called by clients to
   create new data objects on Member nodes.

  :param token: The authentication token returned by ``login()``

  :param GUID: The globally unique identifier that should be used in DataONE
    to identify and access the object. This is an Unicode string that follows
    the constraints on identifiers described in :doc:`GUIDs`. If the identifier
    is already in use, an exception will be raised and the client should try
    again with a different, unique identifier.

  :param object:
   The data bytes that are to be added to the Member Node. 

  :param sysmeta:
   The system metadata document that provides basic information about the
   object, including a reference to its identifier, access control
   information, etc.  See :doc:`SystemMetadata` for a full description and
   schema.

  :rtype: 
   The identifier that was used to insert the document into the system. 

  :raises Exceptions.NotAuthorized:

  :raises Exceptions.IdentifierNotUnique:
   The requested identifier is already used by another object and therefore
   can not be used for this object.  Clients should choose a new identifier
   that is unique and retry the operation.

  :raises Exceptions.UnsupportedType: 
   The MN can not deal with the content specified in the data package.

  :raises Exceptions.InsufficientResources:
   The MN is unable to execute the transfer because it does not have
   sufficient storage space for example.


.. function:: update(token, GUID, object, obsoletedGUID, sysmeta) -> GUID

  Creates a new object on the Member Node that explicity updates and
  obsoletes a previous object, where the object is either a data
  object or a science metadata object. This method is called by clients to
  update objects on Member nodes.  The object that is being obsoleted is
  passed in as a parameter, and the Member Node should record the update by 
  storing the Obsoletes and ObsoletedBy fields for the respective objects.

  :param token: The authentication token returned by ``login()``

  :param GUID: The globally unique identifier that should be used in
   DataONE to identify and access the object.  This is an Unicode string
   that follows the constraints on identifiers described in
   :doc:`GUIDs`. If the identifier is already in use, an exception will be
   raised and the client should try again with a different, unique
   identifier.

  :param object:
   The data bytes that are to be added to the Member Node. 

  :param obsoletedGUID: The identifier of the object that is being updated.
   If this identifier does not exist in the system, an error is raised and
   the operation does not complete.  If the identifier is already in use, 
   an exception will be raised and the client should try again with a 
   different, unique identifier.

  :param sysmeta:
   The system metadata document that provides basic information about the
   object, including a reference to its identifier, access control
   information, obsoleted objects, etc.  See :doc:`SystemMetadata` for a 
   full description and schema.

  :rtype: 
   The identifier that was used to insert the document into the system. 

  :raises Exceptions.NotAuthorized:

  :raises Exceptions.IdentifierNotUnique:
   The requested identifier is already used by another object and therefore
   can not be used for this object.  Clients should choose a new identifier
   that is unique and retry the operation.

  :raises Exceptions.UnsupportedType: 
   The MN can not deal with the content specified in the data package.

  :raises Exceptions.InsufficientResources:
   The MN is unable to execute the transfer because it does not have
   sufficient storage space for example.

  :raises Exceptions.NotFound:
   The update operation failed because the object which was supposed to be
   updated in the system (indicated via the obsoletedGUID parameter) is not
   present in the DataONE system, so update is an illegal operation.


.. function:: delete (token, GUID) -> GUID

  Deletes an object from the Member Node, where the object is either a data
  object or a science metadata object. This method is called by clients to
  create delete objects on Member nodes.i Member Nodes must check that the
  caller is authorized to perform this function.

  :param token: The authentication token returned by ``login()``

  :param GUID: The globally unique identifier that should be used in
   DataONE to identify and delete the object.  This is an Unicode string
   that follows the constraints on identifiers described in
   :doc:`GUIDs`. 

  :rtype: 
   The identifier that was used to delete the document from the system. 

  :raises Exceptions.NotAuthorized:

  :raises Exceptions.NotFound:
   The delete operation failed because the object which was supposed to be
   deleted in the system (indicated via the GUID parameter) is not
   present in the DataONE system, so delete is an illegal operation.

  .. Note:: As DataONE is to be an archival system, we need to determine
     what the semantics of the DELETE function really should be.  Can any
     user delete their objects at any time?  What if they have published
     and referenced the identifier in past?  Should DELETE simply be a
     mechanism to move the object out of commonly found search mechanisms?
     What about copyrighted or illegal content that is uploaded?


.. function:: getChecksum (GUID) -> checksum

  Returns a checksum for the specified object using the system wide hashing
  algorithm. The result is used to determine if two instances referenced by a
  GUID are identical, hence it is important that the same algorithm is used throughout 

  :param GUID: The identifier of the object the operation is being performed on.

  :rtype: The checksum value originally computed for the specified object.

  :raises Exceptions.NotFound:

  .. Note:: for an MN, this should probably be a computed value.  For CNs, it
     should be the value originally calculated for the object (and retrieved from
     system metadata)


.. function:: getLogRecords(token, fromDate, toDate)

   Retrieve log information from the MN for the specified date range
   (inclusive).

   :param token: 
    authentication token; ignored for V0.3

   :param fromDate: specified by appropriate standard (ISO? W3C?)

   :param toDate: specified by appropriate standard (ISO? W3C?)

   :rtype: the set of log records specified; format is not yet specified

   :raises Exceptions.NotAuthorized:

   :raises: Exceptions.InvalidRequest:
   
   .. todo:: Format of the log records need to be specified.


.. function:: log (typeOfOperation, targetGUID, requestorIdentity, dateOfRequest, ...)

   This method is used exclusively internally by a MN. It really isn't part of
   external the API that must be implemented. However, a MN will need to
   implement some sort of logging infrastructure so that it can respond to
   `getLogRecords()`.

   :raises: Exceptions.InvalidRequest:


.. function:: register (token, ID, metadata)

   .. TODO:: Describe this operation.

   :param token: The authentication token returned by :func:`login`

   :param ID:

   :param metadata:

