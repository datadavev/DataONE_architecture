CRUD API
~~~~~~~~


.. module:: MN_crud
   :synopsis: Create, read, update, and delete operations on member nodes

The ``MN_crud`` API implements methods that enable object management
operations on a :term:`Member Node`.  


.. Table:: Methods exposed by the MN_crud API.

    ========================= ===================================================
    Function                  Parameters
    ========================= ===================================================
    :func:`describe`          ``(token, GUID) ->`` :class:`Types.DescribeResponse`
    :func:`getSystemMetadata` ``(token, GUID) ->`` :class:`Types.SystemMetadata`
    :func:`get`               ``(token, GUID) -> bytes``
    :func:`create`            ``(token, GUID, object, sysmeta) ->`` :class:`Types.GUID`
    :func:`update`            ``(token, GUID, object, obsoletedGUID, sysmeta) ->`` :class:`Types.GUID`
    :func:`delete`            ``(token, GUID) ->`` :class:`Types.GUID`
    :func:`getChecksum`       ``(token, GUID, [ChecksumAlgorithm]) ->`` :class:`Types.Checksum`
    :func:`getLogRecords`     ``(token, fromDate, toDate) ->`` :class:`Types.LogRecords`
    ========================= ===================================================

----

.. function:: describe(token, GUID) -> DescribeResponse

   This method provides a lighter weight mechanism than
   :func:`getSystemMetadata` for a client to determine basic properties of the
   referenced object. The response should indicate properties that are
   typically returned in a HTTP HEAD request: the date late modified, the size
   of the object, the type of the object (the :attr:`SystemMetadata.ObjectFormat`).

   The principal indicated by ``token`` must have read privileges on the object, 
   otherwise :exc:`Exceptions.NotAuthorized` is raised.

   If the object does not exist on the node servicing the request, then
   :exc:`Exceptions.NotFound` must be raised even if the object exists on
   another node in the DataONE system.

   :param token: Identity with privileges to read the GUID.

   :type token: :class:`Types.AuthToken`

   :param GUID: Identifier for the object in question.

   :type GUID: :class:`Types.GUID`

   :rtype: :class:`Types.DescribeResponse`

   :returns: Tuple of (mime-type, size, date last modified) expressed in
     appropriate format, default being xhtml.

   :raises: Exceptions.NotAuthorized

   :raises: Exceptions.NotFound

----


.. function:: getSystemMetadata(token, GUID) -> SystemMetadata

   Describes the science metadata and data object (and likely other objects in
   the future) identified by the GUID by returning the system metadata object
   associated with the GUID.

   If the object does not exist on the node servicing the request, then
   :exc:`Exceptions.NotFound` must be raised even if the object exists on
   another node in the DataONE system.

   :param token: authentication token

   :type token: :class:`Types.AuthToken` 

   :param GUID: Identifier for the science data or science metedata object of
     interest.

   :type GUID: :class:`Types.GUID`

   :rtype: System metadata object describing the object.

   :raises: Exceptions.NotAuthorized

   :raises Exceptions.NotFound: There is no data or science metadata
     identified by the given GUID on the node where the request was serviced.
     The error message should provide a hint to use the :func:`CN_crud.resolve`
     mechanism.

----


.. function:: get(token, GUID) -> bytes

   Retrieve an object identified by GUID from the Member Node.

   The response must contain the bytes of the indicated object, and the
   checksum of the bytes retrieved must match the
   :attr:`SystemMetadata.Checksum` recorded in the
   :class:`Types.SystemMetadata` if the object is science data.

   If the object does not exist on the node servicing the request, then
   :exc:`Exceptions.NotFound` must be raised even if the object exists on
   another node in the DataONE system.

   :param token: The authentication token returned by ``login()``.

   :type token: :class:`Types.AuthToken` 

   :param GUID: The identifier for the object to be retrieved.

   :type GUID: :class:`Types.GUID`

   :rtype: bytes

   :returns: 
     Bytes of the specified object. For data objects, this will be the actual
     bytes of data. For metadata objects, this will be the representation of
     the object as provided by the Member Node. 
     
   :raises Exceptions.NotAuthorized: The supplied identity does not have READ
      permission on the object.

   :raises Exceptions.NotFound: The object specified by GUID does not exist at
      this node.

.. TODO:: There may be multiple representations of content (e.g. metadata as
    XML, RDF, or some other format).  May need to add another parameter to specify
    the format, or perhaps rely on HTTP content negotiation for this.

    Should there be a separate identifier for different representations of the
    same content?

.. TODO:: For Science Metadata, only the CNs and the original Member Node can
  guarantee that the returned object will provide the same hash as recorded in
  the System Metadata for the object.  This needs to be verified.

----


.. function:: create(token, GUID, object, sysmeta) -> GUID

  Adds a new object to the Member Node, where the object is either a data
  object or a science metadata object. This method is called by clients to
  create new data objects on Member nodes.

  :param token: The authentication token returned by ``login()``

  :type token: :class:`Types.AuthToken`

  :param GUID:
    The identifier that should be used in DataONE to identify and access the
    object. This is an Unicode string that follows the constraints on
    identifiers described in :doc:`GUIDs`. If the identifier is already in
    use, :exc:`Exceptions.IdentifierNotUnique` will be raised and the
    client should try again with a different, unique identifier.

  :type GUID: :class:`Types.GUID`

  :param object:
   The data bytes that are to be added to the Member Node. 

  :type object: bytes

  :param sysmeta:
   The system metadata document that provides basic information about the
   object, including a reference to its identifier, access control
   information, etc. Attributes of the sysmeta that are the responsibility of
   the client **must** be set.

  :type sysmeta: :class:`Types.SystemMetadata`

  :rtype: :class:`Types.GUID`

  :returns: 
   The identifier that was used to insert the document into the system. 

  :raises Exceptions.NotAuthorized:

  :raises Exceptions.IdentifierNotUnique:
   The requested identifier is already used by another object and therefore
   can not be used for this object.  Clients should choose a new identifier
   that is unique and retry the operation.

  :raises Exceptions.UnsupportedType: 
   The MN can not deal with the content specified in the data package.

  :raises Exceptions.InsufficientResources:
   The MN is unable to execute the transfer because it does not have
   sufficient storage space for example.

----


.. function:: update(token, GUID, object, obsoletedGUID, sysmeta) -> GUID

  Creates a new object on the Member Node that explicity updates and
  obsoletes a previous object, where the object is either a data
  object or a science metadata object. This method is called by clients to
  update objects on Member nodes.  The object that is being obsoleted is
  passed in as a parameter, and the Member Node should record the update by 
  storing the Obsoletes and ObsoletedBy fields for the respective objects.

  :param token: The authentication token returned by ``login()``

  :type token: :class:`Types.AuthToken`

  :param GUID: The globally unique identifier that should be used in
   DataONE to identify and access the object.  This is an Unicode string
   that follows the constraints on identifiers described in
   :doc:`GUIDs`. If the identifier is already in use, an exception will be
   raised and the client should try again with a different, unique
   identifier.

  :type GUID: :class:`Types.GUID`

  :param object:
   The data bytes that are to be added to the Member Node. 

  :type object: bytes

  :param obsoletedGUID: The identifier of the object that is being updated.
   If this identifier does not exist in the system, an error is raised and
   the operation does not complete.  If the identifier is already in use, 
   an exception will be raised and the client should try again with a 
   different, unique identifier.

  :type obsoletedGUID: :class:`Types.GUID`

  :param sysmeta:
   The system metadata document that provides basic information about the
   object, including a reference to its identifier, access control
   information, obsoleted objects, etc.

  :type sysmeta: :class:`Types.SystemMetadata`

  :returns: 
   The identifier that was used to insert the document into the system. 

  :rtype: :class:`Types.GUID`

  :raises Exceptions.NotAuthorized:

  :raises Exceptions.IdentifierNotUnique:
   The requested identifier is already used by another object and therefore
   can not be used for this object.  Clients should choose a new identifier
   that is unique and retry the operation.

  :raises Exceptions.UnsupportedType: 
   The MN can not deal with the content specified in the data package.

  :raises Exceptions.InsufficientResources:
   The MN is unable to execute the transfer because it does not have
   sufficient storage space for example.

  :raises Exceptions.NotFound:
   The update operation failed because the object which was supposed to be
   updated in the system (indicated via the obsoletedGUID parameter) is not
   present in the DataONE system, so update is an illegal operation.

----


.. function:: delete (token, GUID) -> GUID

  Deletes an object from the Member Node, where the object is either a data
  object or a science metadata object. This method is called by clients to
  delete objects on Member nodes. Member Nodes must check that the caller is
  authorized to perform this function.

  If the object does not exist on the node servicing the request, then a
  :exc:`Exceptions.NotFound` exception is raised. The message body of the
  exception should contain a hint as to the location of the
  :func:`CN_crud.Resolve` method.

  :param token: The authentication token returned by ``login()``

  :type token: :class:`Types.AuthToken`

  :param GUID: The identifier of the object to be deleted.

  :type GUID: :class:`Types.GUID`

  :returns: 
   The identifier that was used to delete the document from the system. 

  :rtype: :class:`Types.GUID`

  :raises Exceptions.NotAuthorized:

  :raises Exceptions.NotFound:
   The delete operation failed because the object is not present on the node
   servicing the request.

.. TODO:: 
   As DataONE is to be an archival system, we need to determine what the
   semantics of the DELETE function really should be. Can any user delete
   their objects at any time? What if they have published and referenced the
   identifier in past? Should DELETE simply be a mechanism to move the object
   out of commonly found search mechanisms? What about copyrighted or illegal
   content that is uploaded?

----


.. function:: getChecksum (token, GUID, [ChecksumAlgorithm]) -> Checksum

  Returns a :class:`Types.Checksum` for the specified object using an accepted
  hashing algorithm. The result is used to determine if two instances
  referenced by a GUID are identical, hence it is necessary that MNs can
  ensure that the returned checksum is valid for the referenced object either
  by computing it on the fly or by using a cached value that is certain to be
  correct.

  :param token: The authentication token returned by ``login()``

  :type token: :class:`Types.AuthToken`

  :param GUID: The identifier of the object the operation is being performed
    on.

  :type GUID: :class:`Types.GUID`

  :param ChecksumAlgorithm: 
    The name of an algorithm that will be used to compute a checksum of the
    bytes of the object. This value is drawn from a DataONE controlled list of
    values as indicted in the :class:`Types.SystemMetadata`. If not specified,
    then the system wide default checksum algorithm should be used.

  :type ChecksumAlgorithm: string

  :returns: The checksum value originally computed for the specified object.

  :rtype: :class:`Types.Checksum`

  :raises Exceptions.NotAuthorized:

  :raises Exceptions.NotFound:

----


.. function:: getLogRecords(token, fromDate, toDate) -> LogRecords

   Retrieve log information from the MN for the specified date range
   (inclusive).

   :param token: 
    authentication token; ignored for V0.3

   :type token: :class:`Types.AuthToken`

   :param fromDate: specified by appropriate standard (ISO? W3C?)

   :type: :class:`Types.DateTime`

   :param toDate: specified by appropriate standard (ISO? W3C?)

   :type: :class:`Types.DateTime`

   :returns: the set of log records for the specified interval.

   :rtype: :class:`Types.LogRecords`

   :raises Exceptions.NotAuthorized:

   :raises: Exceptions.InvalidRequest:

----


.. function:: log (typeOfOperation, targetGUID, requestorIdentity, dateOfRequest, ...)

   This method is used exclusively internally by a MN. It really isn't part of
   external the API that must be implemented. However, a MN will need to
   implement some sort of logging infrastructure so that it can respond to
   `getLogRecords()`.

   :raises: Exceptions.InvalidRequest:

----


.. function:: register (token, ID, metadata)

   .. TODO:: Describe this operation.

   :param token: The authentication token returned by :func:`login`

   :param ID:

   :param metadata:


----

.. function:: batchGet(token, GUIDs) -> ?

  Identical to get() except that a list of identifiers is requested.

  The issue here is how to serialize the results. There are some conceptual
  mechanisms for handling structured markup such as XML, but no consistent
  approaches for working with data blobs. Perhaps this method should apply
  only to system metadata, for which the serialization can be defined
  independently of all the other participating nodes?

  :param token: (:class:`Types.AuthToken`) The authentication token returned 
    by ``login()``

  :param GUIDs: (GuidList) The list of identifiers to retrieve.

  :rtype: 
   Bytes of the specified objects. **How are multiple objects serialized?**

  :raises Exceptions.NotAuthorized: The supplied identity does not have READ
     permission on the object.

  :raises Exceptions.NotFound: The object specified by GUID does not exist.

  .. TODO:: batchGet specifies that multiple objects may be retrieved in a
     single call. How are these objects packaged in the response?


.. function:: checkDataQuality (GUID)

  .. TODO:: need details on what this operation is supposed to be doing.

  :param GUID: object to check



