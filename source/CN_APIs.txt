Coordinating Node APIs
----------------------


.. todo:: 
   The APIs need to be edited for consistency of method signatures and naming.
   Update the sequence diagrams to reflect the edits to the API.


======= ======================================================================
Version Method
======= ======================================================================
.       ``login(user, password, [auth_system]) -> tokens``
.       ``requestToken ()``
.       ``setAccess (token, GUID, accessLevel) -> boolean``
.       ``setOwner(token, userid, objectList) -> objectList``
.       ``newAccount(username, password, [auth_system]) -> identity_GUID``
.       ``verify(token) -> boolean``
======= ======================================================================


Authentication API
~~~~~~~~~~~~~~~~~~

.. module:: CN_authorization
   :synopsis: Methods for authentication and authorization

.. exception:: InvalidCredentials

.. exception:: AuthenticationTimeout

.. exception:: InvalidToken

.. exception:: NotFound

.. exception:: IdentityAlreadyExists



.. function:: login(user, password, [auth_system]) -> token

  Authenticates a user for interaction with the DataONE system. The returned
  token is trusted throughout the DataONE system as a reliable statement as
  to the identity of the authenticated user.

  :param user: User name for authentication

  :param password: Secret used for verifying identity

  :param auth_system: Place holder for support of multiple authentication services 
    for a single user.

  :rtype: A composite of the user id and authentication token.

  :raises InvalidCredentials: The supplied credentials were invalid (password +
    username don't jive)

  :raises AuthenticationTimeout: A response from the authentication service
    was not received before the operation timed out.

  .. Note:: :func:`login` may delegate the actual login to an authentication service,
     and a given user may utilize several authentication services.  If this is the 
     case then an additional parameter identifying the authentication service to
     use will be required.


.. function:: requestToken ()

   This operation is used by CN applications to obtain a token for system
   level operations.

   .. Note:: 
      This could be a normal :func:`login` operation using a system user and
      secret that is stored in a secure location.



.. function:: setAccess (token, GUID, accessLevel) -> boolean

   Set the access permissions for an object identified by GUID.

   :param token: 
      The authentication token returned by :func:`login`. Used to verify that
      the calling user has authority to modify access control for the object.

   :param GUID:  The object for which access control is being edited.

   :param accessLevel: The desired privileges to be assigned to the object.

   :rtype: True if the operation succeeds, otherwise False.

   :raises InvalidToken: The supplied token is invalid.

   :raises NotFound: The object identified by GUID was not found.

   :raises NotAauthorized: The supplied identity does not have permission 
     to alter access control rules for the object.

   .. Note::
    Should permissions cascade? e.g. Should setting permission on a Data
    Package cascade to the contained objects as well (the experiment metadata
    and data)?



.. function:: setOwner(token, userid, objectList) -> objectList

   Changes ownership of all objects in objectList to the identity specified by
   userid.

   :param token: 
      The authentication token returned by :func:`login`. Used to verify that
      the calling user has authority to take ownership of the object.

   :param userid:
      Identity of the user that will be taking ownership of the specified objects.

   :param objectList: a list of object identifiers (GUIDs) that are to be modified.

   :rtype: List of objects for which the operation failed.

   :raises InvalidToken: The supplied token is invalid.

   :raises NotAuthorized: The supplied identity does not have authority to change ownership.



.. function::  newAccount(username, password, [auth_system]) -> identity_GUID

   Create a new identity in the DataONE system. Note that there should
   probably be a lot more metadata captred about the new user, and there
   should be a mechanism for specifying the default access control rules for
   the new account.

   :param username: Requested username.  Must be unique within the DataONE system.

   :param password: The secret associated with the account.

   :param auth_system: Place holder for support of multiple authentication services 
     for a single user.

   :rtype:
     GUID for the new identity, otherwise NULL.

   :raises IdentityAlreadyExists: The provided identity already exists in the system 


.. function:: verify(token) -> boolean

  Test if the provided token is valid. 

  Note that there is a potential security issue here as open access to this
  method enables a malicious user to potentially probe a large number of
  generated tokens to determine properties of the system, and perhaps even
  generate a token that matches a system token. Hence another level of
  restriction (perhaps network level blocking / limiting) is necessary.

  :param token: The authentication token returned by :func:`login`

  :rtype: True if the supplied token is valid, otherwise False



Query API
~~~~~~~~~

The Query API handles searches of science metadata and system metadata; also
exposes log records held by CNs. This log-related functionality probably needs
to be split out into the Logging and Alert API (not yet defined).

.. module:: CN_query
   :synopsis: 
     Handles queries against science metadata, system metdata, and log
     records held by CNs

::

  getLogRecords(token, fromDate, toDate) -> logRecords
  search(token, query) -> list of GUIDs


.. function:: getLogRecords (token, fromDate, toDate) -> logRecords

   Retrieves consolidated log information for the specified date range
   (inclusive) for the entire DataONE infrastructure.

   :param token: authentication token

   :param fromDate: 
     specified by appropriate standard (ISO? W3C?)

   :param toDate: 
     specified by appropriate standard (ISO? W3C?)

   :returns:
     the set of log records specified; format is not yet specified; the set of
     records may be empty

   .. todo:: Format of the consolidated log records need to be specified.


.. function:: search (token, query) -> list of metadata GUIDs

   Search the metadata catalog and return GUIDs of metadata records that meet
   the criteria.

   :param token: authentication token; ignored for V0.3

   :param query: The criteria for matching the characteristics of the metadata
     objects of interest. The structure of this query is described in
     :doc:querying_content.

   .. todo: Details of query specification for `search(token, query)` needs to
     be worked out.



.. function:: getAllCopies (token, ownerID)

.. function:: getLinksAndCites (GUID, fromDate, toDate)

.. function:: getLogRecords (GUID, fromDate, toDate)

.. function:: getLogRecords (nodeID, fromDate, toDate)

.. function:: query (token, query)

.. function:: searchForData ()

.. function:: usageQuery (token, GUID)


CRUD API
~~~~~~~~

.. module:: CN_crud
   :synopsis: Create, read, update, and delete operations for Coordinating Nodes
   
.. function:: assertRelation (token, IDofSubject, relationship, IDofObject)

.. function:: batchWrite (objectsList)

.. function:: deleteRecords (token, listOfGUIDs)

.. function:: register (memberToken, ID, metadata)

.. function:: storeRecords ()

.. function:: update()


::

  getSystemMetadata(token, GUID) -> systemMetadata
  get(token, GUID) -> metadata
  resolve(token, GUID) -> systemMetadata???
  create(systemMetadataGUID, systemMetadata, scienceMetadataGUID, scienceMetadata)
  
.. exception:: NotFound

.. exception:: InvalidMetadataType

.. exception:: InvalidArgument

.. exception:: ObjectNotHere

.. function:: getSystemMetadata(token, GUID) -> system metadata

   Describes the science metadata or data object identified by the GUID 
   by returing the system metadata object associated with the GUID.

  :param token: authentication token; ignored for V0.3

  :param GUID: Identifier for the science data or science metedata object of interest.

  :returns: System metadata object describing the object.

  :raises NotFound: There is no data or science metadata identified by the given GUID. 
  
  :raises InvalidArgument: The GUID requested identifies a system metadata object. 


.. function:: get (token, GUID) -> metadata

   Retrieves the science metedata or system metadata object identified by the
   given GUID. If the object identified by the GUID is a data object, then an
   error is raised.

  :param token: authentication token; ignored for V0.3

  :param GUID:
    The identifier for the science metadata or system metadata object to be
    retrieved.

  :returns:
    For system metadata objects, the system metadata itself is returned. For
    science metadata objects, this will be the exact byte stream of the science
    metadata oject, as is was original ingested.

  :raises NotFound: The object specified by GUID does not exist.

  :raises ObjectNotHere: The object specified by the GUID is a data object and
    is not present on this (or any) CN. This response could be accompanied by
    the results of a standard resolve() method call to provide more information
    about the object.

   .. todo::
      This method name could be changed since it has different semantics than
      the method of the same name on MNs.
      
      
.. function:: resolve(token, identifier) -> list of nodes

   Given an identifier, returns information that a client can use to retrieve
   the identified target object form the DataONE system. The target may reside
   on a MN or a CN. The actual content returned will be specific to the type
   of interface implemented, and is described in detail in the documentation
   for the implementation (e.g. REST implementation might differ from SOAP
   implementation).
   
    :param token: authentication token; ignored for V0.3
   
    :param identifier: Identifier for the object in question
   
    :returns: A list of nodes known to contain copies of the target object

   .. todo::
     It seems that returning just a simple list of URLs for the service
     endpoints of the relevant MNs is not sufficient. Some sort of MN
     identifier also needs to be returned so that the caller can ask further
     information about MN (which would include the endpoint URL for the MN API
     implementation). Is there a use case that involves asking a CN for
     metadata describing a MN?

   :raises NotFound: There is no data object identified by the given GUID.

   :raises InvalidArgument: The GUID requested identifies a science metadata
     object or a system metadata object.


.. function:: create(systemMetadataGUID, systemMetadata,
                     scienceMetadataGUID, scienceMetadata)

   This is a method used internally by the CN, not exposed to MNs or the
   world. Stores the two given objects (systemMetadata, scienceMetadata) in a
   single atomic action. This method is used as part of the synchronization of
   science metadata between a MN and the CN.

  :param systemMetadataGUID: the GUID of the system metadata

  :param systemMetadata:
   The system metadata describing the data package (data and science metadata)

  :param scienceMetaDataGUID: the GUID of the science metadata

  :param scienceMetadata: the science metadata portion of the data package

  :raises InvalidMetadataType: 
    the science metadata is not of a type supported by the D1 system



Replication API
~~~~~~~~~~~~~~~

The Replication API handles replication of data and science metadata content
among member nodes. Such replication is not part of V0.3 functionality.


.. module:: CN_replication
   :synopsis: Manages replication of content between Member Nodes
   
.. function:: getDefaultReplicationPolicy (sess)

.. function:: getMNReplicateList ()

.. function:: getReplicationPolicy (sess, ID)

.. function:: isReplicationNeeded ()

.. function:: replicateMetadata ()

.. function:: setDefaultReplicationPolicy (sess, policy)

.. function:: setReplicationPolicy (sess, policy, ID)


Synchronization API
~~~~~~~~~~~~~~~~~~~

The Synchronization API manages synchronization of system metadata and science
metadata among CNs. Since this will be handled out-of-band with respect to the
CN APIs for V0.3, there are no Synchronization API methods required for V0.3.

.. module:: CN_synchronization
   :synopsis: Manages synchronization between Coordinating Nodes
   
.. function:: pollForNewIDs ()

.. function:: synchronize ()

.. function:: verifyAllRecordsReceived ()



.. function:: scheduleSync(nodeID)

   Schedules a synchronization operation on the specified Member Node.

   :param nodeID:  The member node that is being scheduled for synchronization.

   :raises NotFound: The specified Member Node ID is invalid.



Register API
~~~~~~~~~~~~

Register API methods manage registration of Member Nodes and is not
implemented for for V0.3. Instead, registry information about MNs is managed
manually.

.. module:: CN_register
   :synopsis: Methods to manage registration of Member Nodes 



.. function:: addNodeCapabilities (nodeID, capabilities)

   Adds the supplied capabilities to the system metadata describing the Member Node.

   :param nodeID: A GUID that identifies the Member Node.

   :param capabilities: 
     A capabilities document that describes the resources and supported
     services of the Member Node.



.. function:: register (token, capabilitiesURL) -> boolean

   Used to register a new Member Node.

   :param token: An authentication token with priviledges to rgister a new Member Node.

   :param capabilitiesURL: The URL from which capabilities will be retrieved.

   :raises NotAuthorized: The supplied identity does not have authority to register a node.

   :raises NotFound: The supplied capabilitiesURL does not resolve to a capabilities document

   :rtype: True or False



.. function:: registerForNotification (token, dataOwnerID)



.. function:: verifyCapabilities (nodeID, capabilities) -> boolean

   Evaluates the supplied capabilities document. This may involve additional
   interaction with the MN as various aspects are evaluated.

.. todo:: 
   The :func:`verifyCapabilities` will needto check functionality of the MN so
   need to define a few service hooks for checking these properties.



Server Authentication API
~~~~~~~~~~~~~~~~~~~~~~~~~

Server authentication is handled by network configuration for V0.3.


State of Health API
~~~~~~~~~~~~~~~~~~~

The Health API contains methods for determining the status of the DataONE
infrastructure, including both the CNs and MNs.

.. module:: CN_health
   :synopsis: Methods for reporting on the state of health of a CN and on the entire DataONE infrastructure

:: 

  generateReport(token) -> statusReport


.. function:: actOnPendingEvent (event)

.. function:: reportPendingEvent (event)

.. function:: Admin Application

.. function:: notify (adminID, nodeID, service)


.. function:: generateReport(token) -> statusReport

   Returns a status report for all of the registered Member Nodes. The
   informatio returned is used to give administrators information necessary to
   maintain the infrastructure.

   .. note:: 
      This method is used by Use Case 10 "MN Status Reports" for V0.3. However
      instead of a complete set of detailed status reports, the V0.3
      implementation of the use case will utilize thee the
      ``MN_health.heartbeat()`` method to compile very basic information
      about the MNs. Later versions of this method will use the richer
      ``MN_health.getStatus(token)`` method.

   :param token: Identity with authority to generate reports.
   
   :rtype: Status report, ideally in XML + stylsheet or at least XHTML.





.. raw:: latex

   \newpage
