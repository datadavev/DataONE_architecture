Exceptions Raised by MN and CN APIs
-----------------------------------

.. module:: Exceptions
   :synopsis: Exceptions that are raised by MN, CN, and ITK software.


.. contents::


.. table:: Summary of exceptions listed here and the corresponding errorCode.

  ============================== ========= ==================================================
  Exception                      errorCode Description
  ============================== ========= ==================================================
  :exc:`AuthenticationTimeout`   408       The client took too long to complete the request
  :exc:`IdentifierNotUnique`     409       The supplied identifier already exists so conflicts 
                                           with the state of the resource
  :exc:`InsufficientResources`   413       This could be 400, 413, or 415, though none of 
                                           these correspond with the semantics of the error 
                                           condition.
  :exc:`InvalidCredentials`      401       The supplied credentials could not be verified
  :exc:`InvalidRequest`          400       Parameters provided to the call were malformed or 
                                           inappropriate.
  :exc:`InvalidSystemMetadata`   400       System Metadata document is invalid, malformed,
                                           incomplete, or contains erroneous information.
  :exc:`InvalidToken`            401       The supplied authentication token is not valid
  :exc:`NotAuthorized`           401       Access to the indicated resource is not permitted 
                                           with the supplied credentials
  :exc:`NotFound`                404       The referenced object could not be located
  :exc:`UnsupportedMetadataType` 400       The supplied science metadata can not be processed
  :exc:`UnsupportedType`         400       Treated as an invalid request.  Response should 
                                           indicate the problem with the supplied data.
  ============================== ========= ==================================================


General
~~~~~~~

All exceptions raised by APIS methods in DataONE cicore must include three
basic elements of information and an optional element ``traceInformation`` as
detailed in :class:`Types.ErrorMessage`, repeated here for convenience.

================= ===============================================================
Element           Description
================= ===============================================================
errorCode         The error code.  This is the HTTP error code (i.e. 4xx)
detailCode        A code that can be mapped to a specific location in the 
                  source code of the implementation.  Implemented as a string with
                  dot notation to indicate progressive levels of detail.
description       A human readable message describing what happened
traceInformation  An optional dictionary of values that provides more information about
                  the error condition (e.g. calling parameters).  Note that traceInformation
                  should never contain sensitive information.
================= ===============================================================

There will be conditions encountered where exceptions are raised in the APIs
which are not exposed to HTTP. In these cases, the ``detailCode`` and
``description`` values must be included, and the code should be set to an
appropriate value.


HTTP Exception Handling Codes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

HTTP error codes of relevance to the DataONE cicore are repeated here for
convenience. Refer to the `HTTP specification`_ for a complete reference.

==== =================== ==========================================
Code Meaning             Description
==== =================== ==========================================
400  Bad Request         Bad request if the request REST operation is invalid,
                         serialization is erroneous, mime type is not supported, 
                         or resource is not supported.  
401  Unauthorized        Authentication failure. Credentials are required or 
                         were invalid. 
403  Forbidden           The current user does not have the right to perform 
                         the requested action.
404  Not Found           The object does not exist.
405  Method not allowed  The HTTP method used is not allowed on this resource.
                         Response must include an Allow header indicating valid
                         HTTP methods.
406  Not Acceptable      The resource identified by the request is only capable 
                         of generating response entities which have content 
                         characteristics not acceptable according to the accept 
                         headers sent in the request.
408  Request Timeout     The client did not produce a request within the time 
                         that the server was prepared to wait.
409  Conflict            The request could not be completed due to a conflict 
                         with the current state of the resource.
410  Gone                The resource is known to be permanently deleted (as 
                         opposed to 404 which indicates uncertainty about the
                         state of the object).   
413  Request Entity Too  The server is refusing to process a request because 
     Large               the request entity is larger than the server is willing 
                         or able to process.
415  Unsupported Media   The server is refusing to service the request because 
     Type                the entity of the request is in a format not supported 
                         by the requested resource for the requested method. 
500  Internal Server     The server encountered an unexpected condition which 
     Error               prevented it from fulfilling the request.
501  Not Implemented     The server does not support the functionality required 
                         to fulfill the request. This is the appropriate response 
                         when the server does not recognize the request method and 
                         is not capable of supporting it for any resource.
==== =================== ==========================================

.. _HTTP specification: http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html


Serializing Exception Information
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Exceptions can be serialized in different formats that vary according to where
the error occurs and what caller the error message is being sent to. Four
common serialization formats will be HTML, XML, JSON, and Log. The general
approach for serializing error messages is indicated by way of example below.
For errors raised in response to a HTTP call (e.g. through the REST interface),
the error should be serialized in the format indicated in the request Accept
header, defaulting to HTML.

Examples of a :exc:`Exceptions.NotFound` error raised by a request to
:func:`MN_crud.get` object ``123XYZ`` from a Member Node. The trace
information contains ``{'method':'mn.get'}``.

In HTML:

.. code-block:: html

  <html>
    <head>
      <meta http-equiv="content-type" content="text/html;charset=utf-8" />
      <title>Error: 404 Not Found (1020.1)</title>
    </head>
    <body>
      <p>
        <dl>
          <dt>Code</dt>
          <dd class='errorCode'>404</dd>
          <dt>Detail Code</dt>
          <dd class='detailCode'>1020.1</dd>
        </dl>
      </p>
      <p class='description'>The specified object does not exist on this node.</p>
      <dl class='traceInformation'>
        <dt>identifier</dt>
        <dd>123XYZ</dd>
        <dt>method</dt>
        <dd>mn.get</dd>
        <dt>hint</dt>
        <dd>Please try <a href='http://cn.dataone.org/cn/resolve/123XYZ'> resolving</a> 
            at a <a href='http://dataone.org'>DataONE</a> coordinating node.</dd>
      </dl>
    </body>
  </html>


In XML:

.. code-block:: xml

  <error errorCode='404' detailCode='1020.1'>
    <description>The specified object does not exist on this node.</description>
    <traceInformation>
      <value key='identifier'>123XYZ</value>
      <value key='method'>mn.get</value>
      <value key='hint'>http://cn.dataone.org/cn/resolve/123XYZ</value>
    </traceInformation>
  </error>


In JSON::

  {'errorCode':404,
   'detailCode': '1020.1',
   'description': 'The specified object does not exist on this node.',
   'traceInformation': {'identifier':'123XYZ',
                         'method': 'mn.get',
                         'hint':'http://cn.dataone.org/cn/resolve/123XYZ'}
   }


Log message body::

  [detail:1020.1][identifier:123XYZ, method:mn.get]The specified object does not exist on this node.



The Exceptions
~~~~~~~~~~~~~~

.. exception:: AuthenticationTimeout(detailCode, description, [traceInformation])

   The authentication request timed out.

   :errorCode: 408

   :param detailCode: Set by the method raising the exception.

   :type detailCode: string

   :description: Human readable description that can assist the caller in determining 
     how to avoid the problem.

   :type description: string

   :param traceInformation: 
     Optional set of key-value pairs that can include the name of the method
     that raised the error plus other details such as parameters used in the
     call that can be helpful for debugging. Sensitive information such as
     passwords must **never** be logged or recorded in error messages.

   :type traceInformation: dictionary


----

.. exception:: IdentifierNotUnique(detailCode, identifier, description, [traceInformation])

   The provided identifier conflicts with an existing identifier in the
   DataONE system. When serializing, the identifier in conflict should be
   rendered in traceInformation as the value of an ``identifier`` key.

  :errorCode: 409

  :param detailCode: Set by the method raising the exception.

  :type detailCode: string

  :param identifier: The identifier value that is in conflict

  :type identifier: :class:`Types.IdentifierType`

  :description: Human readable description that can assist the caller in determining 
    how to avoid the problem.

  :type description: string

  :param traceInformation: 
    Optional additional information to assist with debugging.

  :type traceInformation: dictionary


----

.. exception:: InsufficientResources(detailCode, description, [traceInformation])

  There are insufficient resources at the node to support the requested operation.  

  :errorCode: 413

  :param detailCode: Set by the method raising the exception.

  :type detailCode: string

  :description: Human readable description that can assist the caller in determining 
    how to avoid the problem.

  :type description: string

  :param traceInformation: 
    Optional set of key-value pairs that can include the name of the method
    that raised the error plus other details such as parameters used in the
    call that can be helpful for debugging. 

  :type traceInformation: dictionary


----

.. exception:: InvalidCredentials(detailCode, description, [traceInformation])

    Indicates that the credentials supplied (to login() for example) are
    invalid for some reason.

    :errorCode: 401

    :param detailCode: Set by the method raising the exception.

    :type detailCode: string

    :description: Human readable description that can assist the caller in determining 
      how to avoid the problem.

    :type description: string

    :param traceInformation: 
       Can include the name of the method that raised the error and perhaps
       the username. Obviously, the supplied password or other sensitive
       information should not be included.

    :type traceInformation: dictionary


----

.. exception:: InvalidRequest(detailCode, description, [traceInformation])

   The parameters provided in the call were invalid. The names and values of
   parameters should included in traceInformation.

  :errorCode: 400

  :param detailCode: Set by the method raising the exception.

  :type detailCode: string

  :description: Human readable description that can assist the caller in determining 
    how to avoid the problem.

  :type description: string

  :param traceInformation: 
    Optional set of key-value pairs that can include the name of the method
    that raised the error plus other details such as parameters used in the
    call that can be helpful for debugging. 

  :type traceInformation: dictionary


----

.. exception:: InvalidSystemMetadata(detailCode, description, [traceInformation])

   The supplied system metadata is invalid. This could be because some
   required field is not set, the metadata document is malformed, or the value
   of some field is not valid.

   The content of traceInformation should contain additional information about
   the error encountered (e.g. name of the field with bad value, if the
   document is malformed)

  :errorCode: 400

  :param detailCode: Set by the method raising the exception.

  :type detailCode: string

  :description: Human readable description that can assist the caller in determining 
    how to avoid the problem.

  :type description: string

  :param traceInformation: 
    Key-value pairs that should include additional information about the error
    that was encountered while processing the SystemMetadata document.

  :type traceInformation: dictionary


----

.. exception:: InvalidToken(detailCode, description, [traceInformation])

   The supplied authentication token could not be verified as being valid.

  :errorCode: 401

  :param detailCode: Set by the method raising the exception.

  :type detailCode: string

  :description: Human readable description that can assist the caller in determining 
    how to avoid the problem.

  :type description: string

  :param traceInformation: 
    Optional set of key-value pairs that can include the name of the method
    that raised the error plus other details such as parameters used in the
    call that can be helpful for debugging. Sensitive information such as
    passwords must **never** be logged or recorded in error messages.

  :type traceInformation: dictionary


----

.. exception:: NotAuthorized(detailCode, description, [traceInformation])

   The supplied identity information is not authorized for the requested operation.

  :errorCode: 401

  :param detailCode: Set by the method raising the exception.

  :type detailCode: string

  :description: Human readable description that can assist the caller in determining 
    how to avoid the problem.

  :type description: string

  :param traceInformation: 
    Optional set of key-value pairs that can include the name of the method
    that raised the error plus other details such as parameters used in the
    call that can be helpful for debugging. Sensitive information such as
    passwords must **never** be logged or recorded in error messages.

  :type traceInformation: dictionary


----

.. exception:: NotFound(detailCode, identifier, description, [traceInformation])

   Used to indicate that an object is not present on the node where the
   exception was raised.

   :errorCode: 404

   :param detailCode: 
     The detail code is set by the particular method that raises the exception.

   :type detailCode: string

   :param identifier: The identifier of the object that was requested.

   :type identifier: :class:`Types.IdentifierType`

   :param description: A human readable description of the error.

   :type description: string

   :param traceInformation: 
     Optional. Additional information that can be used to assist debugging an
     error condition, consisting of a dictionary with string or integer keys and 
     string values.

   :type traceInformation: dictionary


----

.. exception:: NotImplemented(detailCode, description, [traceInformation])

   A method is not implemented, or alternatively, features of a particular
   method are not implemented.

   :errorCode: 501

   :param detailCode:
     Set by the method raising the exception.

   :type detailCode: string

   :param description: 
     A human readable description of the error. Should indicate the method, or
     method feature that is not implemented.

   :type description: string
   
   :param traceInformation: 
     Optional. Additional information that can be used to assist debugging an
     error condition, consisting of a dictionary with string or integer keys and 
     string values.  
   
   :type traceInformation: dictionary

----

.. exception:: ServiceFailure(detailCode, description, [traceInformation])

   Some sort of system failure occurred that is preventing the requested
   operation from completing successfully. This error can be raised by any
   method in the DataONE API.

   :errorCode: 500

   :param detailCode: Set by the method raising the exception.

   :type detailCode: string

   :description: 
     Human readable description that can assist the caller in figuring out
     what's going wrong.

   :type description: string

   :param traceInformation: 
     Optional set of key-value pairs that can include the name of the method
     that raised the error plus other details such as parameters used in the
     call that can be helpful for debugging. 

   :type traceInformation: dictionary

----


.. exception:: UnsupportedMetadataType(detailCode, description, [traceInformation])

  The science metadata document submitted is not of a type that is recognized
  by the DataONE system.

  :errorCode: 400

  :param detailCode: Set by the method raising the exception.

  :type detailCode: string

  :description: Human readable description that can assist the caller in determining 
    how to avoid the problem.

  :type description: string

  :param traceInformation: 
    Optional set of key-value pairs that can include the name of the method
    that raised the error plus other details such as parameters used in the
    call that can be helpful for debugging. 

  :type traceInformation: dictionary


----

.. exception:: UnsupportedType(detailCode, description, [traceInformation])

  The information presented appears to be unsupported. This error might be
  encountered when attempting to register unrecognized science metadata for
  example.

  :errorCode: 400

  :param detailCode: Set by the method raising the exception.

  :type detailCode: string

  :description: Human readable description that can assist the caller in determining 
    how to avoid the problem.

  :type description: string

  :param traceInformation: 
    Optional set of key-value pairs that can include the name of the method
    that raised the error plus other details such as parameters used in the
    call that can be helpful for debugging. Sensitive information such as
    passwords must **never** be logged or recorded in error messages.

  :type traceInformation: dictionary


