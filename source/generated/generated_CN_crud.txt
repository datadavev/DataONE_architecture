..
  Warning: this file is automatically generated.  Edits will be lost


=========================== =========================================================================================================================================================================== 
Function                    Parameters                                                                                                                                                                  
=========================== =========================================================================================================================================================================== 
:func:`get`                 (:class:`token<Types.AuthToken>`, :class:`guid<Types.IdentifierType>`) ``->`` bytes                                                                                         
:func:`getSystemMetadata`   (:class:`token<Types.AuthToken>`, :class:`guid<Types.IdentifierType>`) ``->`` :class:`Types.SystemMetadata`                                                                 
:func:`resolve`             (:class:`token<Types.AuthToken>`, :class:`guid<Types.IdentifierType>`) ``->`` :class:`Types.ObjectLocationList`                                                             
:func:`create`              (:class:`guid<Types.IdentifierType>`, :class:`systemMetadata<Types.SystemMetadata>`, ``scienceMetadata``) ``->`` boolean                                                    
:func:`reserveIdentifier`   (:class:`token<Types.AuthToken>`, ``[scope]``, ``[format]``) ``->`` :class:`Types.IdentifierType`                                                                           
:func:`assertRelation`      (:class:`token<Types.AuthToken>`, :class:`IdOfSubject<Types.IdentifierType>`, :class:`relationship<Types.???>`, :class:`IdOfObject<Types.IdentifierType>`) ``->`` boolean   
=========================== =========================================================================================================================================================================== 


----

.. function:: get(token,guid) -> bytes

   Retrieves the object identified by ``guid`` from the node. If the object is
   not present on the node, then an :exc:`Exceptions.NotFound` error is raised
   (regardless of whether the object exists on another node in the DataONE
   system).

   :param token: The authentication token returned by ``login()``

   :type token: :class:`Types.AuthToken`

   :param guid: Identifier of the object to be retrieved

   :type guid: :class:`Types.IdentifierType`

   :returns: For science metadata objects, this will be the exact byte stream of
     the science metadata oject as it was original ingested. Note that
     additional object types may in the future be returned by the get method.

   :rtype: bytes

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4000)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4001)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4020)``

     The object specified by the identifier is not present on this (or any) CN.
     The response body should contain a reference to :func:`CN_crud.resolve`.


   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4030)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4010)``



----

.. function:: getSystemMetadata(token,guid) -> SystemMetadata

   Returns the :term:`system metadata` that contains DataONE specific
   information about the object identified by ``guid``. Note that authoritative
   copies of System Metadata are only available from the Coordinating Nodes.

   :param token: The authentication token returned by ``login()``

   :type token: :class:`Types.AuthToken`

   :param guid: Identifier for the object of interest.

   :type guid: :class:`Types.IdentifierType`

   :returns: A system metadata document describing the object.

   :rtype: :class:`Types.SystemMetadata`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4050)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4051)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4070)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4040)``

     The pricipal identified by token does not have READ permission on the
     object.


   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4060)``

     There is no object identified by ``identifier`` and so no system metadata
     can be returned.




----

.. function:: resolve(token,guid) -> ObjectLocationList

   Given an identifier, returns information that a client can use to retrieve
   the identified target object from the DataONE system. The target may reside
   on a MN or a CN.

   :param token: The authentication token returned by ``login()``

   :type token: :class:`Types.AuthToken`

   :param guid: Identifier for the object of interest.

   :type guid: :class:`Types.IdentifierType`

   :returns: A list of nodes known to contain copies of the target object, plus
     the URLs known to resolve to the node get methods.

   :rtype: :class:`Types.ObjectLocationList`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4130)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4150)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4120)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4140)``

     There is no object identified by the given identifier


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4131)``



----

.. function:: create(guid,systemMetadata,scienceMetadata) -> boolean

   This is a method used internally by the CN, not exposed to MNs or the world.
   Stores the two given objects (systemMetadata, scienceMetadata) in a single
   atomic action. The scienceMetadata document is optional as ``guid`` may refer
   to science data which is not retrieved to the Coordinating Node. This method
   is used as part of the :term:`Member Node synchronization` of science
   metadata between a MN and the CN.

   :param guid: Identifier of the object being registered

   :type guid: :class:`Types.IdentifierType`

   :param systemMetadata: System metadata generated by the Member Node (and ITK
     client) describing the object.

   :type systemMetadata: :class:`Types.SystemMetadata`

   :param scienceMetadata: The science metadata referneced by ``guid``

   :type scienceMetadata: bytes

   :returns: Acknowledgement of success or failure

   :rtype: boolean

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4115)``

   :raises Exceptions.UnsupportedMetadataType: ``(errorCode=400, detailCode=4100)``

     The science metadata is not of a type supported by the system


   :raises Exceptions.IdentifierNotUnique: ``(errorCode=409, detailCode=4110)``

     This should never be raised, but is required asa sanity check on the object
     store


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4101)``



----

.. function:: reserveIdentifier(token,[scope],[format]) -> IdentifierType

   Given an optional scope and format, reserves and returns an identifier within
   that scope and format that is unique and will not be used by any other
   sessions. Future calls to create() and update() that reference this ID must
   originate from the session in which the identifier was reserved, otherwise an
   error is raised on those methods.

   :param token: The authentication token returned by ``login()``

   :type token: :class:`Types.AuthToken`

   :param scope: An optional string to be used to qualify the scope of the
     identifer namespace, which is applied differently depending on the format
     requested. If scope is not supplied, a default scope will be used.

   :type scope: string

   :param format: The optional name of the identifier format to be used, drawn
     from a DataONE-specific vocabulary of identifier format names, including
     several common syntaxes such as DOI, LSID, UUID, and LSRN, among others. If
     the format is not supplied by the caller, the CN service will use a default
     identifier format, which may change over time.

   :type format: string

   :returns: The identifier that was reserved

   :rtype: :class:`Types.IdentifierType`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4190)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4210)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4180)``

     Supplied credentials dor not have WRITE permission


   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4200)``

     The format requested is not a valid format accepted by this service


   :raises Exceptions.IdentifierNotUnique: ``(errorCode=409, detailCode=4210)``

     The requested identifier can not be reserved because it already exists in
     the DataONE system or has already been reserved.


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4191)``



----

.. function:: assertRelation(token,IdOfSubject,relationship,IdOfObject) -> boolean

   Tests that the specified relationship between IdOfSubject and IdOfObject
   exists.

   :param token: The authentication token returned by ``login()``

   :type token: :class:`Types.AuthToken`

   :param IdOfSubject: The subject of the relationship being tested

   :type IdOfSubject: :class:`Types.IdentifierType`

   :param relationship: Relationship between IdOfSubject and IdOfObject being
     evaluated

   :type relationship: ???

   :param IdOfObject: The object of the relationship

   :type IdOfObject: :class:`Types.IdentifierType`

   :returns: True or False

   :rtype: boolean

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4230)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4270)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4220)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4240)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4260)``

     Raised if the parameters are incorrect (e.g. unknown relationship type
     specified)


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4221)``

.. TODO::
    Define what is meant by relationship - what is the type for this?


