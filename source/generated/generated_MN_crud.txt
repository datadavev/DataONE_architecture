..
  Warning: this file is automatically generated.  Edits will be lost


=========================== =============================================================================================================================================================================================================== 
Function                    Parameters                                                                                                                                                                                                      
=========================== =============================================================================================================================================================================================================== 
:func:`get`                 (:class:`token<Types.AuthToken>`, :class:`guid<Types.IdentifierType>`) ``->`` bytes                                                                                                                             
:func:`getSystemMetadata`   (:class:`token<Types.AuthToken>`, :class:`guid<Types.IdentifierType>`) ``->`` :class:`Types.SystemMetadata`                                                                                                     
:func:`create`              (:class:`token<Types.AuthToken>`, :class:`guid<Types.IdentifierType>`, ``object``, :class:`sysmeta<Types.SystemMetadata>`) ``->`` :class:`Types.IdentifierType`                                                 
:func:`update`              (:class:`token<Types.AuthToken>`, :class:`guid<Types.IdentifierType>`, ``object``, :class:`obsoletedGuid<Types.IdentifierType>`, :class:`sysmeta<Types.SystemMetadata>`) ``->`` :class:`Types.IdentifierType`   
:func:`delete`              (:class:`token<Types.AuthToken>`, :class:`guid<Types.IdentifierType>`) ``->`` :class:`Types.IdentifierType`                                                                                                     
:func:`describe`            (:class:`token<Types.AuthToken>`, :class:`guid<Types.IdentifierType>`) ``->`` :class:`Types.DescribeResponse`                                                                                                   
:func:`getChecksum`         (:class:`token<Types.AuthToken>`, :class:`guid<Types.IdentifierType>`, ``[checksumAlgorithm]``) ``->`` :class:`Types.Checksum`                                                                                  
:func:`getLogRecords`       (:class:`token<Types.AuthToken>`, :class:`fromDate<Types.DateTime>`, :class:`toDate<Types.DateTime>`) ``->`` :class:`Types.LogRecords`                                                                          
:func:`log`                 (:class:`typeOfOperation<Types.EventType>`, :class:`targetGuid<Types.IdentifierType>`, :class:`requestorIdentitity<Types.PrincipalType>`, :class:`dateOfRequest<Types.DateTime>`) ``->``                        
=========================== =============================================================================================================================================================================================================== 


----

.. function:: get(token,guid) -> bytes

   Retrieve an object identified by GUID from the node.

   The response must contain the bytes of the indicated object, and the checksum
   of the bytes retrieved must match the :attr:`SystemMetadata.Checksum`
   recorded in the  :class:`Types.SystemMetadata` if the object is science data.

   If the object does not exist on the node servicing the request, then
   :exc:`Exceptions.NotFound` must be raised even if the object exists on
   another node in the DataONE system.

   :param token: The authentication token returned by ``login()``.

   :type token: :class:`Types.AuthToken`

   :param guid: The identifier for the object to be retrieved.

   :type guid: :class:`Types.IdentifierType`

   :returns: Bytes of the specified object. For data objects, this will be the
     actual bytes of data. For metadata objects, this will be the representation
     of the object as provided by the Member Node.

   :rtype: bytes

   :raises Exceptions.NotAuthorized:
     :detailCode: 1000

     The provided identity does not have READ permission on the object.


   :raises Exceptions.NotFound:
     :detailCode: 1020

     The object specified by GUID does not exist at this node. The description
     should include a reference to the resolve method.


   :raises Exceptions.ServiceFailure:
     :detailCode: 1030

   :raises Exceptions.InvalidToken:
     :detailCode: 1010

   :raises Exceptions.NotImplmented:
     :detailCode: 1001

.. TODO::
    There may be multiple representations of content (e.g. metadata as XML, RDF,
    or some other format).  May need to add another parameter to specify the
    format, or perhaps rely on HTTP content negotiation for this.

    Should there be a separate identifier for different representations of the
    same content?

.. TODO::
    For Science Metadata, only the CNs and the original Member Node can
    guarantee that the returned object will provide the same hash as recorded in
    the System Metadata for the object.  This needs to be verified.



----

.. function:: getSystemMetadata(token,guid) -> SystemMetadata

   Describes the science metadata or data object (and likely other objects in
   the future) identified by the GUID by returning the associated system
   metadata object.

   If the object does not exist on the node servicing the request, then
   :exc:`Exceptions.NotFound` must be raised even if the object exists on
   another node in the DataONE system.

   :param token: The authentication token returned by ``login()``.

   :type token: :class:`Types.AuthToken`

   :param guid: Identifier for the science data or science metedata object of
     interest.

   :type guid: :class:`Types.IdentifierType`

   :returns: System metadata object describing the object.

   :rtype: :class:`Types.SystemMetadata`

   :raises Exceptions.NotAuthorized:
     :detailCode: 1040

   :raises Exceptions.NotImplemented:
     :detailCode: 1041

   :raises Exceptions.NotFound:
     :detailCode: 1060

     There is no data or science metadata identified by the given GUID on the
     node where the request was serviced. The error message should provide a
     hint to use the :func:`CN_crud.resolve` mechanism.


   :raises Exceptions.InvalidRequest:
     :detailCode: 1080

   :raises Exceptions.ServiceFailure:
     :detailCode: 1090

   :raises Exceptions.InvalidToken:
     :detailCode: 1050



----

.. function:: create(token,guid,object,sysmeta) -> IdentifierType

   Adds a new object to the Member Node, where the object is either a data
   object or a science metadata object. This method is called by clients to
   create new data objects on Member nodes.

   :param token: The authentication token returned by ``login()``

   :type token: :class:`Types.AuthToken`

   :param guid: The identifier that should be used in DataONE to identify and
     access the object. This is an Unicode string that follows the constraints
     on identifiers described in :doc:`GUIDs`. If the identifier is already in
     use, :exc:`Exceptions.IdentifierNotUnique` will be raised and the client
     should try again with a different, unique identifier.

   :type guid: :class:`Types.IdentifierType`

   :param object: The data bytes that are to be added to the Member Node.

   :type object: bytes

   :param sysmeta: The system metadata document that provides basic information
     about the object, including a reference to its identifier, access control
     information, etc. Attributes of the sysmeta that are the responsibility of
     the client **must** be set.

   :type sysmeta: :class:`Types.SystemMetadata`

   :returns: The identifier that was used to insert the document into the
     system.

   :rtype: :class:`Types.IdentifierType`

   :raises Exceptions.NotAuthorized:
     :detailCode: 1100

     The provided identity does not have permission to WRITE to the Member Node.


   :raises Exceptions.IdentifierNotUnique:
     :detailCode: 1120

     The requested identifier is already used by another object and therefore
     can not be used for this object. Clients should choose a new identifier
     that is unique and retry the operation.


   :raises Exceptions.UnsupportedType:
     :detailCode: 1140

     The MN can not deal with the content specified in the data package.


   :raises Exceptions.InsufficientResources:
     :detailCode: 1160

     The MN is unable to execute the transfer because it does not have
     sufficient storage space for example.


   :raises Exceptions.InvalidSystemMetadata:
     :detailCode: 1180

     The supplied system metadata is invalid. This could be because some
     required field is not set, the metadata document is malformed, or the value
     of some field is not valid.


   :raises Exceptions.ServiceFailure:
     :detailCode: 1190

   :raises Exceptions.InvalidToken:
     :detailCode: 1110

   :raises Exceptions.NotImplemented:
     :detailCode: 1101



----

.. function:: update(token,guid,object,obsoletedGuid,sysmeta) -> IdentifierType

   Creates a new object on the Member Node that explicity updates and obsoletes
   a previous object, where the object is either a data object or a science
   metadata object. This method is called by clients to update objects on Member
   nodes.  The object that is being obsoleted is passed in as a parameter, and
   the Member Node should record the update by storing the Obsoletes and
   ObsoletedBy fields for the respective objects.

   :param token: The authentication token returned by ``login()``

   :type token: :class:`Types.AuthToken`

   :param guid: The globally unique identifier that should be used in DataONE to
     identify and access the object.  This is an Unicode string that follows the
     constraints on identifiers described in :doc:`/GUIDs`. If the identifier is
     already in use, an exception will be raised and the client should try again
     with a different, unique identifier.

   :type guid: :class:`Types.IdentifierType`

   :param object: The data bytes that are to be added to the Member Node.

   :type object: bytes

   :param obsoletedGuid: The identifier of the object that is being updated. If
     this identifier does not exist in the system, an error is raised and the
     operation does not complete.  If the identifier is already in use, an
     exception will be raised and the client should try again with a different,
     unique identifier.

   :type obsoletedGuid: :class:`Types.IdentifierType`

   :param sysmeta: The system metadata document that provides basic information
     about the object, including a reference to its identifier, access control
     information, obsoleted objects, etc.

   :type sysmeta: :class:`Types.SystemMetadata`

   :returns: The identifier that was used to insert the document into the
     system.

   :rtype: :class:`Types.IdentifierType`

   :raises Exceptions.NotAuthorized:
     :detailCode: 1200

   :raises Exceptions.IdentifierNotUnique:
     :detailCode: 1220

     The requested identifier is already used by another object and therefore
     can not be used for this object.  Clients should choose a new identifier
     that is unique and retry the operation.


   :raises Exceptions.UnsupportedType:
     :detailCode: 1240

     The MN can not deal with the object provided.


   :raises Exceptions.InsufficientResources:
     :detailCode: 1260

     The MN is unable to execute the transfer because it does not have
     sufficient storage space for example.


   :raises Exceptions.NotFound:
     :detailCode: 1280

     The update operation failed because the object which was supposed to be
     updated in the system (indicated via the obsoletedGUID parameter) is not
     present in the DataONE system, so update is an illegal operation.


   :raises Exceptions.InvalidSystemMetadata:
     :detailCode: 1300

     The supplied system metadata is invalid. This could be because some
     required field is not set, the metadata document is malformed, or the value
     of some field is not valid.


   :raises Exceptions.ServiceFailure:
     :detailCode: 1310

   :raises Exceptions.InvalidToken:
     :detailCode: 1210

   :raises Exceptions.NotImplemented:
     :detailCode: 1201



----

.. function:: delete(token,guid) -> IdentifierType

   Deletes an object from the Member Node, where the object is either a data
   object or a science metadata object. This method is called by clients to
   delete objects on Member nodes. Member Nodes must check that the caller is
   authorized to perform this function.

   If the object does not exist on the node servicing the request, then a
   :exc:`Exceptions.NotFound` exception is raised. The message body of the
   exception should contain a hint as to the location of the
   :func:`CN_crud.Resolve` method.

   :param token: The authentication token returned by ``login()``

   :type token: :class:`Types.AuthToken`

   :param guid: The identifier of the object to be deleted.

   :type guid: :class:`Types.IdentifierType`

   :returns: The identifier that was used to delete the document from the
     system.

   :rtype: :class:`Types.IdentifierType`

   :raises Exceptions.NotAuthorized:
     :detailCode: 1320

   :raises Exceptions.NotFound:
     :detailCode: 1340

     The delete operation failed because the object is not present on the node
     servicing the request.


   :raises Exceptions.ServiceFailure:
     :detailCode: 1350

   :raises Exceptions.InvalidToken:
     :detailCode: 1330

   :raises Exceptions.NotImplemented:
     :detailCode: 1321

.. TODO::
    As DataONE is to be an archival system, we need to determine what the
    semantics of the DELETE function really should be. Can any user delete their
    objects at any time? What if they have published and referenced the
    identifier in past? Should DELETE simply be a mechanism to move the object
    out of commonly found search mechanisms? What about copyrighted or illegal
    content that is uploaded?



----

.. function:: describe(token,guid) -> DescribeResponse

   This method provides a lighter weight mechanism than
   :func:`getSystemMetadata` for a client to determine basic properties of the
   referenced object. The response should indicate properties that are typically
   returned in a HTTP HEAD request: the date late modified, the size of the
   object, the type of the object (the :attr:`SystemMetadata.ObjectFormat`).

   The principal indicated by ``token`` must have read privileges on the object,
   otherwise :exc:`Exceptions.NotAuthorized` is raised.

   If the object does not exist on the node servicing the request, then
   :exc:`Exceptions.NotFound` must be raised even if the object exists on
   another node in the DataONE system.

   :param token: The authentication token returned by ``login()``

   :type token: :class:`Types.AuthToken`

   :param guid: Identifier for the object in question.

   :type guid: :class:`Types.IdentifierType`

   :returns: A set of values providing a basic description of the object.

   :rtype: :class:`Types.DescribeResponse`

   :raises Exceptions.NotAuthorized:
     :detailCode: 1360

   :raises Exceptions.NotFound:
     :detailCode: 1380

   :raises Exceptions.ServiceFailure:
     :detailCode: 1390

   :raises Exceptions.InvalidToken:
     :detailCode: 1370

   :raises Exceptions.NotImplemented:
     :detailCode: 1361



----

.. function:: getChecksum(token,guid,[checksumAlgorithm]) -> Checksum

   Returns a :class:`Types.Checksum` for the specified object using an accepted
   hashing algorithm. The result is used to determine if two instances
   referenced by a GUID are identical, hence it is necessary that MNs can ensure
   that the returned checksum is valid for the referenced object either by
   computing it on the fly or by using a cached value that is certain to be
   correct.

   :param token: The authentication token returned by ``login()``

   :type token: :class:`Types.AuthToken`

   :param guid: The identifier of the object the operation is being performed
     on.

   :type guid: :class:`Types.IdentifierType`

   :param checksumAlgorithm: The name of an algorithm that will be used to
     compute a checksum of the bytes of the object. This value is drawn from a
     DataONE controlled list of values as indicted in the
     :class:`Types.SystemMetadata`. If not specified, then the system wide
     default checksum algorithm should be used.

   :type checksumAlgorithm: string

   :returns: The checksum value originally computed for the specified object.

   :rtype: :class:`Types.Checksum`

   :raises Exceptions.NotAuthorized:
     :detailCode: 1400

   :raises Exceptions.NotFound:
     :detailCode: 1420

   :raises Exceptions.InvalidRequest:
     :detailCode: 1440

     A supplied parameter was invalid, most likely an unsupported checksum
     algorithm was specified, in which case the error message should include an
     enumeration of supported checksum algorithms.


   :raises Exceptions.ServiceFailure:
     :detailCode: 1410

   :raises Exceptions.InvalidToken:
     :detailCode: 1430

   :raises Exceptions.NotImplemented:
     :detailCode: 1401



----

.. function:: getLogRecords(token,fromDate,toDate) -> LogRecords

   Retrieve log information from the MN for the specified date range
   (inclusive).

   :param token: The authentication token returned by ``login()``

   :type token: :class:`Types.AuthToken`

   :param fromDate: Starting time for records in response

   :type fromDate: :class:`Types.DateTime`

   :param toDate: End time for records in response

   :type toDate: :class:`Types.DateTime`

   :returns:

   :rtype: :class:`Types.LogRecords`

   :raises Exceptions.NotAuthorized:
     :detailCode: 1460

   :raises Exceptions.InvalidRequest:
     :detailCode: 1480

     The request parameters were malformed or an invalid date range was
     specified.


   :raises Exceptions.ServiceFailure:
     :detailCode: 1490

   :raises Exceptions.InvalidToken:
     :detailCode: 1470

   :raises Exceptions.NotImplemented:
     :detailCode: 1461



----

.. function:: log(typeOfOperation,targetGuid,requestorIdentitity,dateOfRequest) -> 

   This method is used exclusively internally by a MN. It really isn't part of
   external the API that must be implemented. However, a MN will need to
   implement some sort of logging infrastructure so that it can respond to
   `getLogRecords()`.

   :param typeOfOperation: Enumerated value

   :type typeOfOperation: :class:`Types.EventType`

   :param targetGuid: The target of the operation

   :type targetGuid: :class:`Types.IdentifierType`

   :param requestorIdentitity: Who invoked the operation

   :type requestorIdentitity: :class:`Types.PrincipalType`

   :param dateOfRequest: Time stamp

   :type dateOfRequest: :class:`Types.DateTime`

   :returns:

   :rtype: 

   :raises Exceptions.InvalidRequest:
     :detailCode: 1500

     Define the type of the Log Event


   :raises Exceptions.ServiceFailure:
     :detailCode: 1510

   :raises Exceptions.NotImplemented:
     :detailCode: 1501


