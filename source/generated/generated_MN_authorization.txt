..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`MN_authorization`
   :widths: 10 30
   :header-rows: 1

   * - Function
     - Parameters
   * - :func:`login`
     - (``user``, ``password``,
       :class:`[authSystem]<Types.AuthenticationSystem>`) ``->``
       :class:`Types.AuthToken`
   * - :func:`logout`
     - (:class:`token<Types.AuthToken>`) ``->`` boolean
   * - :func:`isAuthorized`
     - (:class:`token<Types.AuthToken>`, :class:`guid<Types.Identifier>`,
       :class:`operation<Types.Event>`) ``->`` boolean



----

.. function:: login(user,password,[authSystem]) -> AuthToken

   Authenticates a user for interaction with the DataONE system. The returned
   token is trusted throughout the DataONE system as a reliable statement as to
   the identity of the authenticated user.

   :func:`login` may delegate the actual login to an authentication service, and
   a given user may utilize several authentication services. If this is the case
   then an additional parameter identifying the authentication service to use
   will be required.

   Appears in functional use cases: :doc:`UC16 </UseCases/16_uc>`

   :param user: User name

   :type user: string

   :param password: Secret

   :type password: string

   :param authSystem: Place holder for support of multiple authentication
     services for a single user.

   :type authSystem: :class:`Types.AuthenticationSystem`

   :returns: A composite of the user id and authentication token.

   :rtype: :class:`Types.AuthToken`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1600)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1620)``

   :raises Exceptions.InvalidCredentials: ``(errorCode=401, detailCode=1640)``

     The supplied credentials were invalid (password + username don't jive)


   :raises Exceptions.AuthenticationTimeout: ``(errorCode=408, detailCode=1680)``

     A response from the authentication ervice was not received before the
     operation timed out.


   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1601)``



----

.. function:: logout(token) -> boolean

   Revokes trust in the supplied token, making it invalid for further use within
   the DataONE system.

   :param token: The authentication token returned by ``login()``

   :type token: :class:`Types.AuthToken`

   :returns: True if all ok

   :rtype: boolean

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1700)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1720)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1740)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1701)``



----

.. function:: isAuthorized(token,guid,operation) -> boolean

   Test if the user identified by the provided token has authorization for
   operation on the specified object.

   .. Note:: Should perhaps add convenience methods for "canRead()" and
     "canWrite()" to verify that a user is able to read / write an object.

   Appears in functional use cases: :doc:`UC01 </UseCases/01_uc>`, :doc:`UC37
   </UseCases/37_uc>`

   :param token:

   :type token: :class:`Types.AuthToken`

   :param guid:

   :type guid: :class:`Types.Identifier`

   :param operation:

   :type operation: :class:`Types.Event`

   :returns: True if the operation is allowed

   :rtype: boolean

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1760)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1780)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=1800)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1820)``

     This error is raised if the request comes from a black listed source (e.g.
     a temporary block may be imposed on a source that calls this method too
     many times within some time interval)


   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1840)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1761)``


