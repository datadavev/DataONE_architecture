..
  Warning: this file is automatically generated.  Edits will be lost


====================== ============================================================================================================================ 
Function               Parameters                                                                                                                   
====================== ============================================================================================================================ 
:func:`login`          (``user``, ``password``, :class:`[authSystem]<Types.AuthenticationSystemType>`) ``->`` :class:`Types.AuthToken`              
:func:`logout`         (:class:`token<Types.AuthToken>`) ``->`` boolean                                                                             
:func:`IsAuthorized`   (:class:`token<Types.AuthToken>`, :class:`guid<Types.IdentifierType>`, :class:`operation<Types.EventType>`) ``->`` boolean   
:func:`verifyToken`    (:class:`token<Types.AuthToken>`) ``->`` boolean                                                                             
====================== ============================================================================================================================ 


----

.. function:: login(user,password,[authSystem]) -> AuthToken

   Authenticates a user for interaction with the DataONE system. The returned
   token is trusted throughout the DataONE system as a reliable statement as to
   the identity of the authenticated user.

   :func:`login` may delegate the actual login to an authentication service, and
   a given user may utilize several authentication services. If this is the case
   then an additional parameter identifying the authentication service to use
   will be required.

   :param user: User name

   :type user: string

   :param password: Secret

   :type password: string

   :param authSystem: Place holder for support of multiple authentication
     services for a single user.

   :type authSystem: :class:`Types.AuthenticationSystemType`

   :returns: A composite of the user id and authentication token.

   :rtype: :class:`Types.AuthToken`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1600)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1620)``

   :raises Exceptions.InvalidCredentials: ``(errorCode=401, detailCode=1640)``

     The supplied credentials were invalid (password + username don't jive)


   :raises Exceptions.AuthenticationTimeout: ``(errorCode=408, detailCode=1680)``

     A response from the authentication ervice was not received before the
     operation timed out.




----

.. function:: logout(token) -> boolean

   Revokes trust in the supplied token, making it invalid for further use within
   the DataONE system.

   :param token: The authentication token returned by ``login()``

   :type token: :class:`Types.AuthToken`

   :returns: True if all ok

   :rtype: boolean

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1700)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1720)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1740)``



----

.. function:: IsAuthorized(token,guid,operation) -> boolean

   Test if the user identified by the provided token has authorization for
   operation on the specified object.

   .. Note:: Should perhaps add convenience methods for "canRead()" and
   "canWrite()" to verify that a user is able to read / write an object.

   :param token:

   :type token: :class:`Types.AuthToken`

   :param guid:

   :type guid: :class:`Types.IdentifierType`

   :param operation:

   :type operation: :class:`Types.EventType`

   :returns: True if the operation is allowed

   :rtype: boolean

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1760)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1780)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=1800)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1820)``

     This error is raised if the request comes from a black listed source (e.g.
     a temporary block may be imposed on a source that calls this method too
     many times within some time interval)


   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1840)``



----

.. function:: verifyToken(token) -> boolean

   Test if the provided token is valid.

   Note that there is a potential security issue here as open access to this
   method enables a malicious user to potentially probe a large number of
   generated tokens to determine properties of the system, and perhaps even
   generate a token that matches a system token. Hence another level of
   restriction (perhaps network level blocking / limiting) is necessary.

   :param token: The token to be tested.

   :type token: :class:`Types.AuthToken`

   :returns: True if the supplied token is valid, otherwise False.

   :rtype: boolean

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1860)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1880)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1900)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1920)``

     This error is raised if the request comes from a black listed source (e.g.
     a temporary block may be imposed on a source that calls this method too
     many times within some time interval)



