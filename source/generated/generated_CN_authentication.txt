..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`CN_authentication`
   :widths: 10 30
   :header-rows: 1

   * - Function
     - Parameters
   * - :func:`login`
     - (``user``, ``password``,
       :class:`[authSystem]<Types.AuthenticationSystem>`) ``->``
       :class:`Types.AuthToken`
   * - :func:`setOwner`
     - (:class:`token<Types.AuthToken>`, :class:`guid<Types.Identifier>`,
       :class:`userId<Types.Principal>`) ``->`` :class:`Types.Identifier`
   * - :func:`newAccount`
     - (``username``, ``password``,
       :class:`[authSystem]<Types.AuthenticationSystem>`) ``->``
       :class:`Types.PrincipalType`



----

.. function:: login(user,password,[authSystem]) -> AuthToken

   Authenticates a user for interaction with the DataONE system. The returned
   token is trusted throughout the DataONE system as a reliable statement as to
   the identity of the authenticated user.

   :func:`login` may delegate the actual login to an authentication service, and
   a given user may utilize several authentication services. If this is the case
   then an additional parameter identifying the authentication service to use
   will be required.

   Appears in functional use cases: :doc:`UC16 </UseCases/16_uc>`

   :param user: User name

   :type user: string

   :param password: Secret

   :type password: string

   :param authSystem: Place holder for support of multiple authentication
     services for a single user.

   :type authSystem: :class:`Types.AuthenticationSystem`

   :returns: A composite of the user id and authentication token.

   :rtype: :class:`Types.AuthToken`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4390)``

   :raises Exceptions.InvalidCredentials: ``(errorCode=401, detailCode=4360)``

     The supplied credentials were invalid (password + username don't jive)


   :raises Exceptions.AuthenticationTimeout: ``(errorCode=408, detailCode=4380)``

     A response from the authentication service was not received before the
     operation timed out.


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4361)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4362)``



----

.. function:: setOwner(token,guid,userId) -> Identifier

   Changes ownership of the specified object to the :term:`principal` specified
   by `userId`

   Appears in functional use cases: :doc:`UC16 </UseCases/16_uc>`

   :param token: The authentication token returned by :func:`login`. Used to
     verify that the calling user has authority to modify access control for the
     object.

   :type token: :class:`Types.AuthToken`

   :param guid: Identifier of the object to be modified

   :type guid: :class:`Types.Identifier`

   :param userId: The principal that will be taking ownership of the specified
     object.

   :type userId: :class:`Types.Principal`

   :returns: Identifier of the object that was modified

   :rtype: :class:`Types.Identifier`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4490)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4480)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4440)``

     The supplied principal does not have permission to change ownership of the
     object


   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4460)``

     The specified object does not exist in the DataONE system


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4441)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4442)``



----

.. function:: newAccount(username,password,[authSystem]) -> PrincipalType

   Create a new :term:`principal` in the DataONE system. Note that there should
   probably be a lot more metadata captured about the new user, and there should
   be a mechanism for specifying the default access control rules for the new
   account.

   Appears in functional use cases: :doc:`UC16 </UseCases/16_uc>`

   :param username: Requested username.  Must be unique within the DataONE
     system.

   :type username: string

   :param password: Secret that conforms to appropriate standards

   :type password: string

   :param authSystem: Selection from potentially multiple authentication systems

   :type authSystem: :class:`Types.AuthenticationSystem`

   :returns: The new principal in the DataONE system.  This may be a simple
     identifier.

   :rtype: :class:`Types.PrincipalType`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4530)``

   :raises Exceptions.IdentifierNotUnique: ``(errorCode=409, detailCode=4500)``

     The chosen identity already exists in the system


   :raises Exceptions.InvalidCredentials: ``(errorCode=401, detailCode=4520)``

     Raised if the supplied credentials are invalid, such asa password that is
     too weak or inappropriate user name.


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4501)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4502)``


