..
  Warning: this file is automatically generated.  Edits will be lost


====================== =================================================================================================================================================== 
Function               Parameters                                                                                                                                          
====================== =================================================================================================================================================== 
:func:`login`          (``user``, ``password``, :class:`[authSystem]<Types.AuthenticationSystemType>`) ``->`` :class:`Types.AuthToken`                                     
:func:`setAccess`      (:class:`token<Types.AuthToken>`, :class:`guid<Types.IdentifierType>`, :class:`accessLevel<Types.AccessRuleType>`) ``->`` boolean                   
:func:`setOwner`       (:class:`token<Types.AuthToken>`, :class:`guid<Types.IdentifierType>`, :class:`userId<Types.PrincipalType>`) ``->`` :class:`Types.IdentifierType`   
:func:`newAccount`     (``username``, ``password``, :class:`[authSystem]<Types.AuthenticationSystemType>`) ``->`` :class:`Types.PrincipalType`                             
:func:`verifyToken`    (:class:`token<Types.AuthToken>`) ``->`` boolean                                                                                                    
:func:`IsAuthorized`   (:class:`token<Types.AuthToken>`, :class:`guid<Types.IdentifierType>`, :class:`operation<Types.EventType>`) ``->`` boolean                          
====================== =================================================================================================================================================== 


----

.. function:: login(user,password,[authSystem]) -> AuthToken

   Authenticates a user for interaction with the DataONE system. The returned
   token is trusted throughout the DataONE system as a reliable statement as to
   the identity of the authenticated user.

   :func:`login` may delegate the actual login to an authentication service, and
   a given user may utilize several authentication services. If this is the case
   then an additional parameter identifying the authentication service to use
   will be required.

   :param user: User name

   :type user: string

   :param password: Secret

   :type password: string

   :param authSystem: Place holder for support of multiple authentication
     services for a single user.

   :type authSystem: :class:`Types.AuthenticationSystemType`

   :returns: A composite of the user id and authentication token.

   :rtype: :class:`Types.AuthToken`

   :raises Exceptions.ServiceFailure:
     :detailCode: 4390

   :raises Exceptions.InvalidCredentials:
     :detailCode: 4360

     The supplied credentials were invalid (password + username don't jive)


   :raises Exceptions.AuthenticationTimeout:
     :detailCode: 4380

     A response from the authentication ervice was not received before the
     operation timed out.


   :raises Exceptions.NotImplemented:
     :detailCode: 4361



----

.. function:: setAccess(token,guid,accessLevel) -> boolean

   Sets the access permissions for an object idenitifed by the ``guid``.

   :param token: The authentication token returned by :func:`login`. Used to
     verify that the calling user has authority to modify access control for the
     object.

   :type token: :class:`Types.AuthToken`

   :param guid: The object for which access control is being edited.

   :type guid: :class:`Types.IdentifierType`

   :param accessLevel: The desired privileges to be assigned to the object.

   :type accessLevel: :class:`Types.AccessRuleType`

   :returns: True if the operation succeeds, otherwise false.

   :rtype: boolean

   :raises Exceptions.InvalidToken:
     :detailCode: 4410

     The supplied token is invalid


   :raises Exceptions.ServiceFailure:
     :detailCode: 4430

   :raises Exceptions.NotFound:
     :detailCode: 4400

     The specified object does not exist in the DataONE system


   :raises Exceptions.NotAuthorized:
     :detailCode: 4420

     The :term:`principal` does not have permission to alter access control
     rules for the object.


   :raises Exceptions.NotImplemented:
     :detailCode: 4401

.. TODO::
    Should permissions cascade? e.g. Should setting permission on a Data Package
    cascade to the contained objects as well (the experiment metadata and data)?



----

.. function:: setOwner(token,guid,userId) -> IdentifierType

   Changes ownership of the specified object to the :term:`principal` specified
   by userid

   :param token: "The authentication token returned by :func:`login`. Used to
     verify that the calling user has authority to modify access control for the
     object."

   :type token: :class:`Types.AuthToken`

   :param guid: Identiifer of the object to be modified

   :type guid: :class:`Types.IdentifierType`

   :param userId: The principal that will be taking ownership of the specified
     object.

   :type userId: :class:`Types.PrincipalType`

   :returns: Identifier of the object that was modified

   :rtype: :class:`Types.IdentifierType`

   :raises Exceptions.ServiceFailure:
     :detailCode: 4490

   :raises Exceptions.InvalidToken:
     :detailCode: 4480

   :raises Exceptions.NotAuthorized:
     :detailCode: 4440

     The supplied principal does not have permission to change ownership of the
     object


   :raises Exceptions.NotFound:
     :detailCode: 4460

     The specified object does not exist in the DataONE system


   :raises Exceptions.NotImplemented:
     :detailCode: 4441



----

.. function:: newAccount(username,password,[authSystem]) -> PrincipalType

   Create a new identity in the DataONE system. Note that there should probably
   be a lot more metadata captred about the new user, and there should be a
   mechanism for specifying the default access control rules for the new
   account.

   :param username: Requested username.  Must be unique within the DataONE
     system.

   :type username: string

   :param password: Secret that conforms to appropriate standards

   :type password: string

   :param authSystem: Selection from potentially multiple authentication systems

   :type authSystem: :class:`Types.AuthenticationSystemType`

   :returns: The new principal in the DataONE system.  This may be a simple
     identifier.

   :rtype: :class:`Types.PrincipalType`

   :raises Exceptions.ServiceFailure:
     :detailCode: 4530

   :raises Exceptions.IdentifierNotUnique:
     :detailCode: 4500

     The chosen identity already exists in the system


   :raises Exceptions.InvalidCredentials:
     :detailCode: 4520

     Raised if the supplied credentials are invalid, such asa password that is
     too weak or innapropriate user name.


   :raises Exceptions.NotImplemented:
     :detailCode: 4501



----

.. function:: verifyToken(token) -> boolean

   Test if the provided token is valid.

   Note that there is a potential security issue here as open access to this
   method enables a malicious user to potentially probe a large number of
   generated tokens to determine properties of the system, and perhaps even
   generate a token that matches a system token. Hence another level of
   restriction (perhaps network level blocking / limiting) is necessary.

   :param token: The token to be tested.

   :type token: :class:`Types.AuthToken`

   :returns: True if the supplied token is valid, otherwise False.

   :rtype: boolean

   :raises Exceptions.ServiceFailure:
     :detailCode: 4550

   :raises Exceptions.NotAuthorized:
     :detailCode: 4540

     This error is raised if the request comes from a black listed source (e.g.
     a temporary block may be imposed on a source that calls this method too
     many times within some time interval)


   :raises Exceptions.NotImplemented:
     :detailCode: 4541

   :raises Exceptions.InvalidToken:
     :detailCode: 4555



----

.. function:: IsAuthorized(token,guid,operation) -> boolean

   Test if the user identified by the provided token has authorization for
   operation on the specified object.

   :param token:

   :type token: :class:`Types.AuthToken`

   :param guid:

   :type guid: :class:`Types.IdentifierType`

   :param operation:

   :type operation: :class:`Types.EventType`

   :returns: True if the operation is allowed

   :rtype: boolean

   :raises Exceptions.ServiceFailure:
     :detailCode: 4600

   :raises Exceptions.InvalidToken:
     :detailCode: 4620

   :raises Exceptions.NotFound:
     :detailCode: 4560

   :raises Exceptions.NotAuthorized:
     :detailCode: 4580

     This error is raised if the request comes from a black listed source (e.g.
     a temporary block may be imposed on a source that calls this method too
     many times within some time interval)


   :raises Exceptions.NotImplemented:
     :detailCode: 4601


