Data Types in CICore
--------------------

.. module:: Types
   :synopsis: Catalog of data types (structures) used by the DataONE cicore.

.. Note:: Here we use the Sphinx ``class`` directives to identify data
  structures. This is not meant to imply that these structures are implemented
  as classes - it is merely a convenience mechanism for documentation.

.. Note:: Class structures are described using the Google `Protocol Buffer
  Language`_ . This is for convenience only, and the IDL used will probably
  change in the future.

========= =============================
Version   Structure
========= =============================
.         :class:`AccessRuleType`
.         :class:`AuthenticationSystemType`
.         :class:`AuthToken`
.         :class:`Capabilities`
.         :class:`Checksum`
.         :class:`DateTime`
.         :class:`DescribeResponse`
.         :class:`ErrorMessage`
.         :class:`EventType`
.         :class:`HeartbeatResponse`
.         :class:`IdentifierFormatType`
.         :class:`IdentifierList`
.         :class:`IdentifierType`
.         :class:`LogRecord`
.         :class:`LogRecords`
.         :class:`NodeReferenceType`
.         :class:`ObjectFormatType`
.         :class:`ObjectList`
.         :class:`ObjectLocationList`
.         :class:`PingResponse`
.         :class:`PrincipalType`
.         :class:`QueryType`
.         :class:`Status`
.         :class:`SystemMetadata`
========= =============================

----

.. class:: AccessRuleType

   An access rule.

----

.. class:: AuthenticationSystemType

  Place holder for support of multiple authentication services for a single
  user.


----

.. class:: AuthToken

  An AuthToken is used to identify a principal and to assert that the identity
  of the principal has been verified by the DataONE authentication infrastructure.


----

.. class:: Capabilities

  Describes the capabilities of a MemberNode.


----

.. class:: Checksum

  Represents the value of a computed checksum.

  ::

    enum ChecksumAlgorithmEnum 
    {
      SHA-1 = 0;
      SHA-224 = 1;
      SHA-356 = 2;
      SHA-384 = 3;
      SHA-512 = 4;
      MD5 = 5;
    }

    message Checksum 
    {
      required ChecksumAlgorithmEnum algorithm = 1  [default = SHA-1];
      required string value = 2;
    }

----


.. class:: DateTime

  A string that completely identifies a specific point in time.

  - Must include date and time
  - If not specified, then the time zone is 0, i.e. GMT

  Valid representations include:
  
  - `HTTP Full Date`_ format.  e.g. `Sun, 06 Nov 1994 08:49:37 GMT`
  - `YYYY-MM-DDTHH:MM:SS.mmmmmm`
  - `YYYYMMDDTHHMMSS.mmmmmm`
  - `YYYY-MM-DDTHH:MM:SS.mmmmmm+HH:MM`
  - `YYYYMMDDTHHMMSS.mmmmmm+HHMM`

  The milliseconds may be left off if that precision is not available.


.. _HTTP Full Date: http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1

----

.. class:: DescribeResponse  

  Provides a hint about the type, size and state of an object.

  ::
  
    message ObjectFormat
    {
      required string objectFormat = 1;
    }


    message DescribeResponse 
    {
      required ObjectFormat objectFormat = 1;
      required uint64 size = 2;
      required DateTime dateSysMetadataModified = 3;
      required Checksum checksum = 4;
    }


  .. attribute:: objectFormat

     The value of the :attr:`SystemMetadata.objectFormat` entry available in
     the :class:`SystemMetadata`.

  .. attribute:: size

     Size of the object in bytes

  .. attribute:: dateSysMetadataModified

     A :class:`DateTime` value that indicates when the :term:`system metadata`
     associated with the object was last modified.

  .. attribute:: checksum

     A :class:`Checksum` value that provides the computed checksum value of the
     referenced object.

----

.. class:: ErrorMessage

   The information that is returned with :doc:`Exceptions`.

   ::
   
     message ErrorMessage 
     {
       required int32 errorCode = 1;
       required int32 detailCode = 2;
       required string description = 3;
       
       message KVPair 
       {
         required string key = 1;
         required string value = 2;
       }
       
       repeated KVPair traceInformation = 4;
     }


  .. attribute:: errorCode

    The error code.  This is the HTTP error code (i.e. 4xx)

  .. attribute:: detailCode

    A more detailed error code which provides a precise indication of where
    the exception was raised.

  .. attribute:: description

    A human readable message describing what happened

  .. attribute:: traceInformation

    A dictionary of key, value pairs that can provide more information about
    the error condition.


----

.. class:: EventType

  The contolled list of events that are logged, which will include 'CREATE',
  'UPDATE', 'DELETE', 'READ', 'REPLICATE' events

  ::

    message EventType {
      CREATE = 0;
      READ = 1;
      UPDATE = 2;
      DELETE = 3;
      REPLICATE = 4;
    }


----

.. class:: HeartbeatResponse

  The response from :func:`MN_health.heartbeat`

----

.. class:: IdentifierFormatType

  Initially an enumerated list of strings that specify different types of identifiers.

  ::

    message IdentifierFormatType {
      enum IdentifierFormat {
        OID = 0;
        LSID = 1;
        UUID = 2;
        LSRN = 3;
      }
    }

.. TODO:: There's a few more of these that need to be specified.

----

.. class:: IdentifierType

  An :term:`identifier` (:term:`GUID`) in the DataONE system. This is
  equivalent to a unicode string of printable characters, excluding
  whitespace. All representations of identifiers must be encoded in 7-bit
  ASCII or UTF-8.


----

.. class:: IdentifierList

   A list of idenitfiers, so a list of unicode strings.

   ::
   
     message IdentifierList {
       repeated IdentifierType identifier = 1;
     }

----

.. class:: LogRecord

  A single log entry as reported by a Member Node or Coordinating Node through
  the getLogRecords methods.

  :: 

    message LogRecord {
      required string timestamp = 1;
      
    }


----

.. class:: LogRecords

  A list of LogRecord instances.

  ::

    message LogRecords {
      repeated LogRecord entry = 1;
    }


----

.. class:: NodeReferenceType

  MemberNodeIdentifier drawn from the DataONE MemberNodeRegistryService


----

.. class:: ObjectFormatType

  One value from the DataONE Object Format Vocabulary, which may be an adopted
  vocabulary maintained by another organization. ObjectFormatType is currently
  (prototype implementation)a string, however it seems likely that this will
  require a more structured type in the future as the requirements of this
  type are better defined.


----

.. class:: ObjectList

  A list of objects. This provides more information than the :class:`IdentifierList` by
  adding an identifier to the :class:`DescribeResponse`.
  
  ::
  
    message ObjectInfo
    {
      extend DescribeResponse
      {
        required string identifier = 5
      }
    }
  
    message ObjectList 
    {
      required int start = 0;
      required int count = 1;
      required int total = 2;
      repeated ObjectInfo objectInfo = 3;
    }

  .. attribute:: identifier

     Identifier of the object in the describe response.

  .. attribute:: start

     An integer that indicates zero-based offset of the first entry in
     objectInfo from the start of the list of entries from which this list was
     drawn (such as the results of :func:`CN_query.search` or
     :func:`MN_replication.listObjects`)

  .. attribute:: count

     The total number of entries returned in :attr:`objectInfo`.

  .. attribute:: total

     The total number of entries in the list from which this list was drawn.

  .. attribute:: objectInfo

     List of ObjectInfo structures, which are an extension of :class:`DescribeResponse`


----

.. class:: ObjectLocationList

   A list of nodes and full :func:`CN_crud.get` and / or :func:`MN_crud.get`
   URLs that can be used to retrieve the object.

  ::
  
    message ObjectLocationList {
      required IdentifierType identifier = 1;
      repeated ObjectLocation locations = 2;
    }

    message ObjectLocation {
      required string node = 1;
      required string url = 2;
    }

  .. attribute:: identifier

     The identifier that this ObjectLocationList refers to.

  .. attribute:: locations

     List of ObjectLocation entries that indicate the nodes on which the object
     is located.

  .. attribute:: node

     A node identifier. Currently, this should be the node name + base path. For
     example, a member node with domain name "mn1.dataone.org" that serves
     content from /mn would be identified as ``mn1.dataone.org/mn``

  .. attribute:: url

     The full URL for retrieving the object. For example, if identifer was
     "ABX154", then for the Member Node indicated above, this entry would be
     ``http://mn1.dataone.org/mn/object/ABX154``


----

.. class:: PingResponse

  The response from :func:`MN_health.ping`


----

.. class:: PrincipalType

  Person (user), group, or organization.

  PrincipalIdentifier drawn from the DataONE IdentityProviderService/

  Used by :mod:`SystemMetadata`


----

.. class:: QueryType

   Queries are used to identify a subset of objects from a collection. The
   form of query used by the DataONE system is likely to evolve significantly
   as the project proceeds. The query specification listed here applies to the
   prototype implementations (i.e. pre-version 1.0).

   ::
    
     enum FilterTypeEnum 
     {
       NVP = 1;
       SOLR = 3;
       EARTHGRID = 4;
     }
     
     enum LogicalOperator
     {
       LOP_OR = 0;
       LOP_AND = 1;
     }

     message NameValuePair
     {
       required string name = 0;
       required string value= 1;
     }

     message NameValuePairFilter
     {
       optional LogicalOperator LOP = 1 [default = LOP_AND];
       repeated NameValuePair nvpair = 2;
     }

     message SOLRFilter
     {
       required string filter = 0;
       optional string facetFilter = 1;
     }

     message EarthGridFilter
     {
       required string filter = 0;
     }


Expressing a NVP query in a URL



----

.. class:: Status

  The response from :func:`MN_health.getStatus`


----

.. class:: SystemMetadata

  A set of low level information about an object in the DataONE system.
  SystemMetadata is described in :mod:`SystemMetadata`.



.. _Protocol Buffer Language: http://code.google.com/apis/protocolbuffers/docs/overview.html
