Data Types in CICore
--------------------

.. module:: Types
   :synopsis: Catalog of data types (structures) used by the DataONE cicore.

.. Note:: Here we use the Sphinx ``class`` directives to identify data
  structures. This is not meant to imply that these structures are implemented
  as classes - it is merely a convenience mechanism for documentation.

.. Note:: Class structures are described using the Google `Protocol Buffer
  Language`_ . This is for convenience only, and the IDL used will probably
  change in the future.

========= =============================
Version   Structure
========= =============================
.         :class:`AccessRuleType`
.         :class:`AuthenticationSystemType`
.         :class:`AuthToken`
.         :class:`Checksum`
.         :class:`DateTime`
.         :class:`DescribeResponse`
.         :class:`ErrorMessage`
.         :class:`EventType`
.         :class:`IdentifierFormatType`
.         :class:`IdentifierList`
.         :class:`IdentifierType`
.         :class:`LogRecord`
.         :class:`LogRecords`
.         :class:`MNCapabilities`
.         :class:`MNHeartbeatResponse`
.         :class:`MNStatus`
.         :class:`NodeReferenceType`
.         :class:`ObjectFormatType`
.         :class:`ObjectList`
.         :class:`ObjectLocationList`
.         :class:`PingResponse`
.         :class:`PrincipalType`
.         :class:`QueryType`
.         :class:`SystemMetadata`
========= =============================

----

.. class:: AccessRuleType

   An access rule.

----

..class:: AuthenticationSystemType

  Place holder for support of multiple authentication services for a single
  user.


----

.. class:: AuthToken

  An AuthToken is used to identify a principal and to assert that the identity
  of the principal has been verified by the DataONE authentication infrastructure.


----

.. class:: Checksum

  Represents the value of a computed checksum.

  ::

    message ChecksumAlgorithm {
      SHA-1 = 0;
      SHA-224 = 1;
      ...
    }

    message Checksum {
      required ChecksumAlgorithm algorithm = 1;
      required string value = 2;
    }

----


.. class:: DateTime

  A string that completely identifies a specific point in time.

  - Must include date and time
  - If not specified, then the time zone is 0, i.e. GMT

  Valid representations include:
  
  - `HTTP Full Date`_ format.  e.g. `Sun, 06 Nov 1994 08:49:37 GMT`
  - `YYYY-MM-DDTHH:MM:SS.mmmmmm`
  - `YYYYMMDDTHHMMSS.mmmmmm`
  - `YYYY-MM-DDTHH:MM:SS.mmmmmm+HH:MM`
  - `YYYYMMDDTHHMMSS.mmmmmm+HHMM`

  The milliseconds may be left off if that precision is not available.


.. _HTTP Full Date: http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1

----

.. class:: DescribeResponse  

  Provides a hint about the type, size and state of an object.

  ::

    message DescribeResponse {
      required string objectformat = 1;
      required uint64 size = 2;
      required DateTime last_modified = 3;
    }


  .. attribute:: objectformat

     The value of the :attr:`SystemMetadata.ObjectFormat` entry available in
     the :class:`SystemMetadata`.

  .. attribute:: size

     The size in bytes of the object

  .. attribute:: last_modified

     A DateTime value that indicates when the object was last modified. Note
     that all time stamps in DataONE refer to UTC if no time zone information
     is provided with the value. Note that since content in DataONE is
     intended to be static, this value will refer to the time that the object
     was created on the system responding to the request.

----

.. class:: ErrorMessage

   The information that is returned with :doc:`Exceptions`.

   ::
   
     message ErrorMessage {
       required int32 code = 1;
       required int32 detail_code = 2;
       required string description = 3;
       
       message KVPair {
         required string key = 1;
         required string value = 2;
       }
       
       repeated KVPair trace_information = 4;
     }


  .. attribute:: code

    The error code.  This is the HTTP error code (i.e. 4xx)

  .. attribute:: error_detail

    A more detailed error code which provides a precise indication of where
    the exception was raised.

  .. attribute:: description

    A human readable message describing what happened


----

.. class:: EventType

  The contolled list of events that are logged, which will include 'CREATE',
  'UPDATE', 'DELETE', 'READ', and 'REPLICATE' events

  ::

    message EventType {
      CREATE = 0;
      READ = 1;
      UPDATE = 2;
      DELETE = 3;
      REPLICATE = 4;
      INSERT = 5;
    }


----

.. class:: IdentifierFormatType

  Initially an enumerated list of strings that specify different types of identifiers.

  ::

    message IdentifierFormatType {
      enum IdentifierFormat {
        OID = 0;
        LSID = 1;
        UUID = 2;
        LSRN = 3;
      }
    }

.. TODO:: There's a few more of these that need to be specified.

----

.. class:: IdentifierType

  An :term:`identifier` (:term:`GUID`) in the DataONE system. This is
  equivalent to a unicode string of printable characters. All representations
  of identifiers must be encoded in 7-bit ASCII or UTF-8.                 


----

.. class:: IdentifierList

   A list of GUIDs, so a list of unicode strings.

   ::
   
     message GuidList {
       repeated string guid = 1;
     }

----

.. class:: LogRecord

  A single log entry as reported by a Member Node or Coordinating Node through
  the getLogRecords methods.

  :: 

    message LogRecord {
      required string timestamp = 1;
    }


----

.. class:: LogRecords

  A list of LogRecord instances.

  ::

    message LogRecords {
      repeated LogRecord entry = 1;
    }


----

.. class:: MNCapabilities

  Describes the capabilities of a MemberNode.

----


.. class:: MNHeartbeatResponse

  The response from :func:`MN_health.heartbeat`

----


.. class:: MNStatus

  The response from :func:`MN_health.getStatus`

----

.. class:: NodeReferenceType

  MemberNodeIdentifier drawn from the DataONE MemberNodeRegistryService


----

.. class:: ObjectFormatType

  One value from the DataONE Object Format Vocabulary, which may be an adopted
  vocabulary maintained by another organization. ObjectFormatType is currently
  (prototype implementation)a string, however it seems likely that this will
  require a more structured type in the future as the requirements of this
  type are better defined.


----

.. class:: ObjectList

  A list of objects. This provides more information than the GuidList by
  combining a GUID with the DescribeResponse.
  
  ::
  
    message ObjectList {
      
      message ObjectInfo {
        required string guid = 1;
        required string DescribeResponse info = 2;
      }
    
      repeated DescribeResponse describeresponse = 1;
    }


----

.. class:: ObjectLocationList

   Provides a list of ``node``, ``get request URL`` that provides a list of
   nodes known to hold a copy of an object, and the get() method URL that
   might be used to retrieve the object from each node.

  ::
  
    message ObjectLocationList {
      repeated ObjectLocation location = 1;
    }

    message ObjectLocation {
      required string node = 1;
      required string url = 2;
    }


----

.. class:: PingResponse

  The response from :func:`MN_health.ping`


----

.. class:: PrincipalType

  Person (user), group, or organization.

  PrincipalIdentifier drawn from the DataONE IdentityProviderService/

  Used by :mod:`SystemMetadata`


----

.. class:: QueryType

   Queries are used to identify a subset of objects from a collection. The
   form of query used by the DataONE system is likely to evolve significantly
   as the project proceeds. The query specification listed here applies to the
   prototype implementations (i.e. pre-version 1.0).

   ::

     message QueryType{
       required FilterEnum filterType = 1 [default= NVP];
       required FilterStruct filter = 2;

       enum FilterEnum {
         NVP = 1;
         SOLR = 2;
         EarthGrid = 3;
       }

     }

     

----

.. class:: SystemMetadata

  A set of low level information about an object in the DataONE system.
  SystemMetadata is described in :mod:`SystemMetadata`.



.. _Protocol Buffer Language: http://code.google.com/apis/protocolbuffers/docs/overview.html
