Member Node APIs for V0.3
-------------------------


These APIs are implemented by Member Nodes for version 0.3. This is a reduced set of functionality compared to the full set of APIs envisioned for Member nodes.

.. todo:: 
   The APIs need to be edited for consistency of method signatures and naming.
   Update the sequence diagrams to reflect the edits to the API.


Authorization API
~~~~~~~~~~~~~~~~~

There is no authorization API for this version.


CRUD API
~~~~~~~~

.. module:: MN_crud
   :synopsis: Create, read, update, and delete operations on member nodes

::

  getSystemMetadata(token, GUID) -> objectMetadata
  get(token, GUID) -> object
  getLogRecords(token, fromDate, toDate)
  log (create, creationDate, ID)
  

.. exception:: NotFound

.. exception:: NotAuthorized

.. exception:: UnsupportedType

.. exception:: InsufficientResources


.. function:: getSystemMetadata(token, GUID) -> objectMetadata

   Describes the object located at the endpoint of a GUID. This is necessary
   to enable a client (e.g. a CN doing synchronization of new content) to
   determine what type of information is being referenced before it is
   registered in the system metadata. Helps to avoid accidental download of
   data objects rather than metadata.

   :param token: Identity with privileges to read the GUID.

   :param GUID: Identifier for the object in question.

   :rtype: Metadata describing the object to which the GUID refers .


.. function:: get(token, GUID) -> object

   Retrieve an object identified by GUID from the Member Node.

   :param token: The authentication token returned by ``login()``

   :param GUID: The identifier for the object to be retrieved.

   :rtype: 
    Bytes of the specified object. For data objects, this will be the actual
    bytes of data. For metadata objects, this will be the representation of
    the object as provided by the Member Node.

   :raises NotAuthorized: The supplied identity does not have READ permission on the object.

   :raises NotFound: The object specified by GUID does not exist.

   .. Note:: There may be multiple representations of content (e.g. metadata as
      XML, RDF, or some other format).  May need to add another parameter to specify
      the format, or perhaps rely on HTTP content negotiation for this.



.. function:: getLogRecords(token, fromDate, toDate)

  Retrieve log information from the MN for the specified date range (inclusive).



.. function:: log (create, creationDate, ID)



.. function:: register (memberToken, ID, metadata)

  :param token: The authentication token returned by :func:`login`




Replication API
~~~~~~~~~~~~~~~

.. module:: MN_replication
   :synopsis: Handles CN directed replication of content between member nodes.

.. function::  cancelReplication (sess, transID)

.. function::  listAllObjects ()

.. function::  listRecords ()

.. function::  replicationSucceeds (transID)

.. function::  startReplica (ID, sessionID, transID, srcMN)

.. function::  sysOp (token)



.. function:: listChangedRecords(token) -> GUIDs

   List the records that have changed since the last synchronization event.

   :param token: A token with authority to retrieve a list of changed records.




Capabilities API
~~~~~~~~~~~~~~~~

.. module:: MN_capabilities
   :synopsis: Reports the capabilities of a Member Node

.. function::  serviceRequest (token)

.. function::  getCapabilities () -> capabilities

   Returns a document describing the capabilities of the Member Node. 
   
   :rtype: Capabilities metadata document




State of Health API
~~~~~~~~~~~~~~~~~~~

.. module:: MN_health
   :synopsis: Reports on the status of a Member Node

.. function::  sohQuery (token, service)

.. function:: ping() -> pingResponse

   Low level "are you alive" operation. Response is simple ACK, but may be
   reasonable to overload with a couple of flags that could indicate
   availability of new data or change in capabilities.

   :rtype pingResponse: A simple chunk of data, perhaps XML, or plain text.

.. function:: getStatus(token) -> currentStatus

   Returns the current status of the MN, perhaps with some accumulation and
   averaging over the last xxx minutes.

   :param token: Identity with authority to retrieve the status information.

   :rtype: A status document in an easily parsed syntax such as JSON or XML


.. raw:: latex

   \newpage

