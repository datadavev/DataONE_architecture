.. _UC04:

Use Case 04 - CRUD (Create, Update Delete)
------------------------------------------

Author
  VDC TWG

Date
  - 20090929 Filling out details
  - 20090925 Adding to use case description and documentation
  - 20090114 (TWG meeting).  Subsequent various modifications.

Version 
  Draft

Goal
  Create, update or delete metadata record on a Member Node.

Summary 
  A user is creating a new metadata record on a Member Node (MN). The
  mechanism by which the user does this is out of scope for the DataONE
  system, so this use case continues from the point where a new Data Package
  is present on the MN.

  The metadata is retrieved by the CN using a pull mechanism (CN requests
  content from the MN).

  The availability of new content on a MN is indicated by a flag in the
  response to a ping() message issued by a CN. The CN then retrieves a list of
  changes from the MN and for each change, retrieves the experiment metadata,
  stores it and generates a search metadata document by extracting content
  from the experiment metadata. The changes to the CN (stored experiment
  metadata, update search metadata) are replicated to the other CNs (Use Case
  ###). The CN schedules replication of the data package across other MNs
  (`Use Case 06`__).

__ UC06_

.. image:: UseCases/images/04_interaction.png


Actors
  Member Node, additional Member Nodes, Coordinating Nodes
  
  
Preconditions

  - Use is authenticated and so client application has an auth_token for the process.

  - DataONE system operational
  
  - MN is registered and is monitored
  
  
Triggers

  - CN update of search metadata

  - CN replication of metadata 

  - Data Package replication across MNs

  - Watchers notified of change
  
 
Post Conditions
  
  - New data package is replicated across MNs
  
  - Search metadata is updated
  
  - Operation recorded in logs


Notes
~~~~~

- Are IDs are pegged to versions? If so, update might differ more radically
  from create.

- If delete is a metadata operation only, then will be very similar to update.
  But if it is a physical operation, it becomes more complex. Will there be an
  archival copy? Will member nodes that hold replicas be "forced" to destroy
  the replicas?

- Is submit from a member node a push or pull?

- Should queuing of a submission within a member node be required for success?
  (We assume yes, to guarantee replication of submissions).


