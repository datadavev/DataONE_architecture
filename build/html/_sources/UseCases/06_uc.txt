.. _UC06:

Use Case 06 - MN Synchronize
----------------------------

Author
  VDC TWG

Date
  - 20090930 Filled out content, changed mode to pull from MN
  - 20090925 Adding to use case description and documentation
  - 20090114 (TWG meeting).  Subsequent various modifications.

Version 
  Draft

Goal
  Replicate / synchronize metadata record between Member Node and Coordinating Node.

Summary 

  As data packages, or portions there of are created or modified, the metadata
  associated with those needs to be replicated to the coordinating nodes.

  The presence of new or changed information on a Member Node (MN) is made
  known to a Coordinating Node (CN) through the status information in a
  ``ping()`` response. If so indicated, the CN schedules a synchronization
  operation with the MN, a list of changed object GUIDS is retrieved by the
  CN, and the CN proceeds to retrieve and process each object identified.

  If new data packages are present on the MN, then a MN-MN synchronization
  process is scheduled.


Actors
  Member Node, Coordinating Node

Preconditions 
  - Member Node has new or changed data packages
  
Triggers
  - New or changed content is present on a Member Node
 
Post Conditions
  - MN is in sync with CN

  - Log

  - Watchers for changes to MN, CN, or DataONE system

**Notes**

- Overloading ping() for notification of change seems a little bit of a hack,
  though changing the name from ping() to status() makes it seem OK.

.. raw:: pdf

   PageBreak
   

.. figure:: images/06_uc.png

..
  @startuml images/06_uc.png
  !include ../plantuml.conf

  package "DataONE"
  component "Coordinating Node" as CN
  component "Member Node" as MN
  usecase "13. Authorization" as author
  usecase "06. Synchronize Metadata" as SYNC
  usecase "XX. Notify Watchers" as NOTIFY
  CN -- SYNC
  MN -- SYNC
  SYNC ..> author: <<includes>>
  SYNC ..> NOTIFY: <<includes>>
  @enduml


----

.. figure:: images/06_interaction.png

   Synchronize Metadata between Member and Coordinating Node
   
..
  @startuml images/06_interaction.png
  !include ../plantuml.conf
  participant "CRUD API" as m_crud << Member Node >>
  participant "State of Health API" as c_health << Coordinating Node >>
  c_health -> m_crud: ping()
  activate c_health
    c_health <-- m_crud: [ACK, NewData]
  participant "Synchronization API" as c_sync << Coordinating Node >>
    c_health -> c_sync: scheduleSync(MN_ID)
  deactivate c_health

  participant "Replication API" as m_rep << Member Node >>
  c_sync -> m_rep: listChangedRecords()

  note right of c_sync
    The RSS mechanism might be 
    appropriate for retrieving changes.
  end note

  c_sync <-- m_rep: GUID_list
  loop for each GUID
    c_sync -> m_crud: getMetadata(system_token, GUID)
    c_sync <-- m_crud: metadata
  participant "CRUD API" as c_crud << Coordinating Node >>
    c_sync -> c_crud: create(GUID, metadata)
    c_sync <-- c_crud: ack or FAIL
    c_sync -> m_rep: notifyReplicated(system_token, GUID)
    note over m_rep
      What happens if the CN create() operation fails?
    end note
  end
  @enduml


.. raw:: pdf

   PageBreak
